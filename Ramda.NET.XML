<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ramda.NET</name>
    </assembly>
    <members>
        <member name="T:Ramda.NET.AwaitableDynamicDelegate">
            <summary>
            Provides a class for specifying dynamic async invocation behavior at run time
            </summary>
        </member>
        <member name="F:Ramda.NET.AwaitableDynamicDelegate.arguments">
            <summary>
            The arguments
            </summary>
        </member>
        <member name="M:Ramda.NET.AwaitableDynamicDelegate.#ctor(System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Ramda.NET.AwaitableDynamicDelegate"/> class.
            </summary>
            <param name="fn">The function.</param>
        </member>
        <member name="M:Ramda.NET.AwaitableDynamicDelegate.#ctor(System.Func{System.Object[],System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Ramda.NET.AwaitableDynamicDelegate"/> class.
            </summary>
            <param name="fn">The function.</param>
        </member>
        <member name="M:Ramda.NET.AwaitableDynamicDelegate.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke an object. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.
            </summary>
            <param name="binder">The binder.</param>
            <param name="arguments">The arguments.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Ramda.NET.AwaitableDynamicDelegate.GetAwaiter">
            <summary>
            Gets the awaiter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ramda.NET.AwaitableDynamicDelegate.Result">
            <summary>
            Gets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Ramda.NET.PromiseContinuation">
            <summary>
             Provides a continuation context as a result of calling to <see cref="T:Ramda.NET.PromiseLikeDynamicDelegate" />Then method
            </summary>
        </member>
        <member name="M:Ramda.NET.PromiseContinuation.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ramda.NET.PromiseContinuation"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ramda.NET.PromiseContinuation.Then(System.Func{System.Object,System.Object})">
            <summary>
            Gets a continuation callback and invokes it.
            </summary>
            <param name="continuation">The continuation.</param>
            <returns></returns>
        </member>
        <member name="T:Ramda.NET.PromiseLikeDynamicDelegate">
            <summary>
            Provides a class for specifying dynamic invocation of promise like behavior at run time
            </summary>
            <seealso cref="T:Ramda.NET.DynamicDelegate" />
        </member>
        <member name="M:Ramda.NET.PromiseLikeDynamicDelegate.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke an object. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.
            </summary>
            <param name="binder">The binder.</param>
            <param name="arguments">The arguments.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Ramda.NET.PromiseLikeDynamicDelegate.Then(System.Func{System.Object,System.Object})">
            <summary>
            Creates a continuation that executes asynchronously when the target Dynamic Method completes.
            </summary>
            <param name="continuation"></param>
            <returns></returns>
        </member>
        <member name="T:Ramda.NET.DynamicDelegate">
            <summary>
            Provides a base class for specifying dynamic invocation behavior at run time
            </summary>
        </member>
        <member name="P:Ramda.NET.DynamicDelegate.Length">
            <summary>
            The Arity of the function
            </summary>
        </member>
        <member name="M:Ramda.NET.DynamicDelegate.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="T:Ramda.NET.AbstractLambda">
            <summary>
            Provides a base class for specifying dynamic invocation behavior at run time
            </summary>
        </member>
        <member name="F:Ramda.NET.AbstractLambda.fn">
            <summary>
            The function
            </summary>
        </member>
        <member name="M:Ramda.NET.AbstractLambda.#ctor(Ramda.NET.DynamicDelegate,System.Nullable{System.Int32})">
            <summary>
            Provides a base class for specifying dynamic invocation behavior at run time
            </summary>
        </member>
        <member name="M:Ramda.NET.AbstractLambda.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke an object. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.
            </summary>
            <param name="binder">Provides information about the invoke operation.</param>
            <param name="args">The arguments that are passed to the object during the invoke operation. For example, for the sampleObject(100) operation, where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="args[0][0]" /> is equal to 100.</param>
            <param name="result">The result of the object invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.
            </returns>
        </member>
        <member name="M:Ramda.NET.AbstractLambda.TryInvoke(System.Dynamic.InvokeBinder,System.Object[])">
            <summary>
            Provides the implementation for operations that invoke an object. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.
            </summary>
            <param name="binder">The binder.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="T:Ramda.NET.Exceptions">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ramda.NET.Exceptions.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ramda.NET.Exceptions.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ramda.NET.Exceptions.NotANumberException">
            <summary>
              Looks up a localized string similar to The operartion produced a NaN (Not ot Number) value. Do not use empty collections..
            </summary>
        </member>
        <member name="T:Ramda.NET.R.Functor">
            <summary>
            Provides a class to map between categories
            </summary>
        </member>
        <member name="P:Ramda.NET.R.Functor.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Ramda.NET.R.Functor.Map">
            <summary>
            Gets or sets the mapping function.
            </summary>
            <value>
            The map.
            </value>
        </member>
        <member name="T:Ramda.NET.R.IReducible">
            <summary>
            Returns a single item by iterating through the list, successively calling the iterator function and passing it an accumulator value and the current value from the array, and then passing the result to the next call.
            </summary>
        </member>
        <member name="M:Ramda.NET.R.IReducible.Reduce(System.Func{System.Object,System.Object,System.Object},System.Object)">
            <summary>
            Reduces the specified step.
            </summary>
            <param name="step">The step.</param>
            <param name="acc">The acc.</param>
            <returns></returns>
        </member>
        <member name="T:Ramda.NET.R.Tuple">
            <summary>
             Provides static methods for creating tuple objects. To browse the .NET Framework
            </summary>
        </member>
        <member name="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(Ramda.NET.RamdaPlaceholder,System.Boolean)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(System.Boolean,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(System.Double,System.Double)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(Ramda.NET.RamdaPlaceholder,System.Double)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(System.Double,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(System.Int32,System.Int32)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(System.Object,System.Object)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(System.String,System.String)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Add(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Adds two values.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Number</returns>
            <see cref="M:Ramda.NET.R.Subtract(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.AddIndex(System.Delegate)">
            <summary>
            Creates a new list iteration function from an existing one by adding two newparameters to its callback function: the current index, and the entire list.This would turn, for instance, Ramda's simple `map` function into one thatmore closely resembles `Array.prototype.map`. Note that this will only workfor functions in which the iteration callback function is the firstparameter, and where the list is the last parameter. (This latter might beunimportant if the list parameter is not used.)
            <para />
            sig: ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)
            </summary>
            <param name="fn">A list iteration function that does not pass index or list to its callback</param>
            <returns>An altered list iteration function that passes (item, index, list) to its callback</returns>
        </member>
        <member name="M:Ramda.NET.R.AddIndex(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new list iteration function from an existing one by adding two newparameters to its callback function: the current index, and the entire list.This would turn, for instance, Ramda's simple `map` function into one thatmore closely resembles `Array.prototype.map`. Note that this will only workfor functions in which the iteration callback function is the firstparameter, and where the list is the last parameter. (This latter might beunimportant if the list parameter is not used.)
            <para />
            sig: ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)
            </summary>
            <param name="fn">A list iteration function that does not pass index or list to its callback</param>
            <returns>An altered list iteration function that passes (item, index, list) to its callback</returns>
        </member>
        <member name="M:Ramda.NET.R.AddIndex(System.Object)">
            <summary>
            Creates a new list iteration function from an existing one by adding two newparameters to its callback function: the current index, and the entire list.This would turn, for instance, Ramda's simple `map` function into one thatmore closely resembles `Array.prototype.map`. Note that this will only workfor functions in which the iteration callback function is the firstparameter, and where the list is the last parameter. (This latter might beunimportant if the list parameter is not used.)
            <para />
            sig: ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)
            </summary>
            <param name="fn">A list iteration function that does not pass index or list to its callback</param>
            <returns>An altered list iteration function that passes (item, index, list) to its callback</returns>
        </member>
        <member name="M:Ramda.NET.R.Adjust``1(System.Func{``0,``0},System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Applies a function to the value at the given index of an array, returning anew copy of the array with the element at the given index replaced with theresult of the function application.
            <para />
            sig: (a -> a) -> Number -> [a] -> [a]
            </summary>
            <param name="fn">The function to apply.</param>
            <param name="idx">The index.</param>
            <param name="list">An array-like object whose value       at the supplied index will be replaced.</param>
            <returns>A copy of the supplied array-like object with the element at index `idx` replaced with the value returned by applying `fn` to the existing element.</returns>
            <see cref="M:Ramda.NET.R.Update(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Adjust``1(Ramda.NET.RamdaPlaceholder,System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Applies a function to the value at the given index of an array, returning anew copy of the array with the element at the given index replaced with theresult of the function application.
            <para />
            sig: (a -> a) -> Number -> [a] -> [a]
            </summary>
            <param name="fn">The function to apply.</param>
            <param name="idx">The index.</param>
            <param name="list">An array-like object whose value       at the supplied index will be replaced.</param>
            <returns>A copy of the supplied array-like object with the element at index `idx` replaced with the value returned by applying `fn` to the existing element.</returns>
            <see cref="M:Ramda.NET.R.Update(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Adjust``1(System.Func{``0,``0},Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Applies a function to the value at the given index of an array, returning anew copy of the array with the element at the given index replaced with theresult of the function application.
            <para />
            sig: (a -> a) -> Number -> [a] -> [a]
            </summary>
            <param name="fn">The function to apply.</param>
            <param name="idx">The index.</param>
            <param name="list">An array-like object whose value       at the supplied index will be replaced.</param>
            <returns>A copy of the supplied array-like object with the element at index `idx` replaced with the value returned by applying `fn` to the existing element.</returns>
            <see cref="M:Ramda.NET.R.Update(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Adjust``1(System.Func{``0,``0},System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Applies a function to the value at the given index of an array, returning anew copy of the array with the element at the given index replaced with theresult of the function application.
            <para />
            sig: (a -> a) -> Number -> [a] -> [a]
            </summary>
            <param name="fn">The function to apply.</param>
            <param name="idx">The index.</param>
            <param name="list">An array-like object whose value       at the supplied index will be replaced.</param>
            <returns>A copy of the supplied array-like object with the element at index `idx` replaced with the value returned by applying `fn` to the existing element.</returns>
            <see cref="M:Ramda.NET.R.Update(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Adjust``1(System.Func{``0,``0},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Applies a function to the value at the given index of an array, returning anew copy of the array with the element at the given index replaced with theresult of the function application.
            <para />
            sig: (a -> a) -> Number -> [a] -> [a]
            </summary>
            <param name="fn">The function to apply.</param>
            <param name="idx">The index.</param>
            <param name="list">An array-like object whose value       at the supplied index will be replaced.</param>
            <returns>A copy of the supplied array-like object with the element at index `idx` replaced with the value returned by applying `fn` to the existing element.</returns>
            <see cref="M:Ramda.NET.R.Update(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Adjust``1(System.Object,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Applies a function to the value at the given index of an array, returning anew copy of the array with the element at the given index replaced with theresult of the function application.
            <para />
            sig: (a -> a) -> Number -> [a] -> [a]
            </summary>
            <param name="fn">The function to apply.</param>
            <param name="idx">The index.</param>
            <param name="list">An array-like object whose value       at the supplied index will be replaced.</param>
            <returns>A copy of the supplied array-like object with the element at index `idx` replaced with the value returned by applying `fn` to the existing element.</returns>
            <see cref="M:Ramda.NET.R.Update(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Adjust(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Applies a function to the value at the given index of an array, returning anew copy of the array with the element at the given index replaced with theresult of the function application.
            <para />
            sig: (a -> a) -> Number -> [a] -> [a]
            </summary>
            <param name="fn">The function to apply.</param>
            <param name="idx">The index.</param>
            <param name="list">An array-like object whose value       at the supplied index will be replaced.</param>
            <returns>A copy of the supplied array-like object with the element at index `idx` replaced with the value returned by applying `fn` to the existing element.</returns>
            <see cref="M:Ramda.NET.R.Update(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Adjust(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Applies a function to the value at the given index of an array, returning anew copy of the array with the element at the given index replaced with theresult of the function application.
            <para />
            sig: (a -> a) -> Number -> [a] -> [a]
            </summary>
            <param name="fn">The function to apply.</param>
            <param name="idx">The index.</param>
            <param name="list">An array-like object whose value       at the supplied index will be replaced.</param>
            <returns>A copy of the supplied array-like object with the element at index `idx` replaced with the value returned by applying `fn` to the existing element.</returns>
            <see cref="M:Ramda.NET.R.Update(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Adjust``1(System.Object,System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Applies a function to the value at the given index of an array, returning anew copy of the array with the element at the given index replaced with theresult of the function application.
            <para />
            sig: (a -> a) -> Number -> [a] -> [a]
            </summary>
            <param name="fn">The function to apply.</param>
            <param name="idx">The index.</param>
            <param name="list">An array-like object whose value       at the supplied index will be replaced.</param>
            <returns>A copy of the supplied array-like object with the element at index `idx` replaced with the value returned by applying `fn` to the existing element.</returns>
            <see cref="M:Ramda.NET.R.Update(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Adjust(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Applies a function to the value at the given index of an array, returning anew copy of the array with the element at the given index replaced with theresult of the function application.
            <para />
            sig: (a -> a) -> Number -> [a] -> [a]
            </summary>
            <param name="fn">The function to apply.</param>
            <param name="idx">The index.</param>
            <param name="list">An array-like object whose value       at the supplied index will be replaced.</param>
            <returns>A copy of the supplied array-like object with the element at index `idx` replaced with the value returned by applying `fn` to the existing element.</returns>
            <see cref="M:Ramda.NET.R.Update(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.All``1(System.Func{``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Returns `true` if all elements of the list match the predicate, `false` ifthere are any that don't.Dispatches to the `all` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.All``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns `true` if all elements of the list match the predicate, `false` ifthere are any that don't.Dispatches to the `all` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.All``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if all elements of the list match the predicate, `false` ifthere are any that don't.Dispatches to the `all` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.All(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if all elements of the list match the predicate, `false` ifthere are any that don't.Dispatches to the `all` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.All``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Returns `true` if all elements of the list match the predicate, `false` ifthere are any that don't.Dispatches to the `all` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.All(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if all elements of the list match the predicate, `false` ifthere are any that don't.Dispatches to the `all` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.All``1(System.Func{``0,System.Boolean},Ramda.NET.ITransformer)">
            <summary>
            Returns `true` if all elements of the list match the predicate, `false` ifthere are any that don't.Dispatches to the `all` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.All(Ramda.NET.RamdaPlaceholder,Ramda.NET.ITransformer)">
            <summary>
            Returns `true` if all elements of the list match the predicate, `false` ifthere are any that don't.Dispatches to the `all` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.All(System.Object,Ramda.NET.ITransformer)">
            <summary>
            Returns `true` if all elements of the list match the predicate, `false` ifthere are any that don't.Dispatches to the `all` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.AllPass(System.Collections.Generic.IList{System.Object})">
            <summary>
            Takes a list of predicates and returns a predicate that returns true for agiven list of arguments if every one of the provided predicates is satisfiedby those arguments.The function returned is a curried function whose arity matches that of thehighest-arity predicate.
            <para />
            sig: [(*... -> Boolean)] -> (*... -> Boolean)
            </summary>
            <param name="predicates">An array of predicates to check</param>
            <returns>The combined predicate</returns>
            <see cref="M:Ramda.NET.R.AnyPass(System.Collections.Generic.IList{System.Object})"/>
        </member>
        <member name="M:Ramda.NET.R.AllPass``1(System.Collections.Generic.IList{System.Func{``0,System.Boolean}})">
            <summary>
            Takes a list of predicates and returns a predicate that returns true for agiven list of arguments if every one of the provided predicates is satisfiedby those arguments.The function returned is a curried function whose arity matches that of thehighest-arity predicate.
            <para />
            sig: [(*... -> Boolean)] -> (*... -> Boolean)
            </summary>
            <param name="predicates">An array of predicates to check</param>
            <returns>The combined predicate</returns>
            <see cref="M:Ramda.NET.R.AnyPass(System.Collections.Generic.IList{System.Object})"/>
        </member>
        <member name="M:Ramda.NET.R.AllPass(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a list of predicates and returns a predicate that returns true for agiven list of arguments if every one of the provided predicates is satisfiedby those arguments.The function returned is a curried function whose arity matches that of thehighest-arity predicate.
            <para />
            sig: [(*... -> Boolean)] -> (*... -> Boolean)
            </summary>
            <param name="predicates">An array of predicates to check</param>
            <returns>The combined predicate</returns>
            <see cref="M:Ramda.NET.R.AnyPass(System.Collections.Generic.IList{System.Object})"/>
        </member>
        <member name="M:Ramda.NET.R.Always``1(``0)">
            <summary>
            Returns a function that always returns the given value. Note that fornon-primitives the value returned is a reference to the original value.This function is known as `const`, `constant`, or `K` (for K combinator) inother languages and libraries.
            <para />
            sig: a -> (* -> a)
            </summary>
            <param name="val">The value to wrap in a function</param>
            <returns>A Function :: * -<![CDATA[>]]> val.</returns>
        </member>
        <member name="M:Ramda.NET.R.Always(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a function that always returns the given value. Note that fornon-primitives the value returned is a reference to the original value.This function is known as `const`, `constant`, or `K` (for K combinator) inother languages and libraries.
            <para />
            sig: a -> (* -> a)
            </summary>
            <param name="val">The value to wrap in a function</param>
            <returns>A Function :: * -<![CDATA[>]]> val.</returns>
        </member>
        <member name="M:Ramda.NET.R.And(System.Boolean,System.Boolean)">
            <summary>
            Returns `true` if both arguments are `true`; `false` otherwise.
            <para />
            sig: a -> b -> a | b
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>the first argument if it is falsy, otherwise the second argument.</returns>
            <see cref="M:Ramda.NET.R.Both(System.Delegate,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.And(Ramda.NET.RamdaPlaceholder,System.Boolean)">
            <summary>
            Returns `true` if both arguments are `true`; `false` otherwise.
            <para />
            sig: a -> b -> a | b
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>the first argument if it is falsy, otherwise the second argument.</returns>
            <see cref="M:Ramda.NET.R.Both(System.Delegate,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.And(System.Boolean,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if both arguments are `true`; `false` otherwise.
            <para />
            sig: a -> b -> a | b
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>the first argument if it is falsy, otherwise the second argument.</returns>
            <see cref="M:Ramda.NET.R.Both(System.Delegate,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.And(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if both arguments are `true`; `false` otherwise.
            <para />
            sig: a -> b -> a | b
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>the first argument if it is falsy, otherwise the second argument.</returns>
            <see cref="M:Ramda.NET.R.Both(System.Delegate,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Any``1(System.Func{``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Returns `true` if at least one of elements of the list match the predicate,`false` otherwise.Dispatches to the `any` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by at least one element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.All(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Any``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns `true` if at least one of elements of the list match the predicate,`false` otherwise.Dispatches to the `any` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by at least one element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.All(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Any``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if at least one of elements of the list match the predicate,`false` otherwise.Dispatches to the `any` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by at least one element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.All(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if at least one of elements of the list match the predicate,`false` otherwise.Dispatches to the `any` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by at least one element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.All(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Any``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Returns `true` if at least one of elements of the list match the predicate,`false` otherwise.Dispatches to the `any` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by at least one element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.All(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Any(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if at least one of elements of the list match the predicate,`false` otherwise.Dispatches to the `any` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is satisfied by at least one element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.All(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.AnyPass(System.Collections.Generic.IList{System.Object})">
            <summary>
            Takes a list of predicates and returns a predicate that returns true for agiven list of arguments if at least one of the provided predicates issatisfied by those arguments.The function returned is a curried function whose arity matches that of thehighest-arity predicate.
            <para />
            sig: [(*... -> Boolean)] -> (*... -> Boolean)
            </summary>
            <param name="predicates">An array of predicates to check</param>
            <returns>The combined predicate</returns>
            <see cref="M:Ramda.NET.R.AllPass(System.Collections.Generic.IList{System.Object})"/>
        </member>
        <member name="M:Ramda.NET.R.AnyPass``1(System.Collections.Generic.IList{System.Func{``0,System.Boolean}})">
            <summary>
            Takes a list of predicates and returns a predicate that returns true for agiven list of arguments if at least one of the provided predicates issatisfied by those arguments.The function returned is a curried function whose arity matches that of thehighest-arity predicate.
            <para />
            sig: [(*... -> Boolean)] -> (*... -> Boolean)
            </summary>
            <param name="predicates">An array of predicates to check</param>
            <returns>The combined predicate</returns>
            <see cref="M:Ramda.NET.R.AllPass(System.Collections.Generic.IList{System.Object})"/>
        </member>
        <member name="M:Ramda.NET.R.AnyPass(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a list of predicates and returns a predicate that returns true for agiven list of arguments if at least one of the provided predicates issatisfied by those arguments.The function returned is a curried function whose arity matches that of thehighest-arity predicate.
            <para />
            sig: [(*... -> Boolean)] -> (*... -> Boolean)
            </summary>
            <param name="predicates">An array of predicates to check</param>
            <returns>The combined predicate</returns>
            <see cref="M:Ramda.NET.R.AllPass(System.Collections.Generic.IList{System.Object})"/>
        </member>
        <member name="M:Ramda.NET.R.Ap(System.Object,System.Object)">
            <summary>
            ap applies a list of functions to a list of values.Dispatches to the `ap` method of the second argument, if present. Alsotreats curried functions as applicatives.
            <para />
            sig: [a -> b] -> [a] -> [b]
            </summary>
            <param name="fns">An array of functions</param>
            <param name="vs">An array of values</param>
            <returns>An array of results of applying each of `fns` to all of `vs` in turn.</returns>
        </member>
        <member name="M:Ramda.NET.R.Ap(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            ap applies a list of functions to a list of values.Dispatches to the `ap` method of the second argument, if present. Alsotreats curried functions as applicatives.
            <para />
            sig: [a -> b] -> [a] -> [b]
            </summary>
            <param name="fns">An array of functions</param>
            <param name="vs">An array of values</param>
            <returns>An array of results of applying each of `fns` to all of `vs` in turn.</returns>
        </member>
        <member name="M:Ramda.NET.R.Ap(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            ap applies a list of functions to a list of values.Dispatches to the `ap` method of the second argument, if present. Alsotreats curried functions as applicatives.
            <para />
            sig: [a -> b] -> [a] -> [b]
            </summary>
            <param name="fns">An array of functions</param>
            <param name="vs">An array of values</param>
            <returns>An array of results of applying each of `fns` to all of `vs` in turn.</returns>
        </member>
        <member name="M:Ramda.NET.R.Ap``1(System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{``0})">
            <summary>
            ap applies a list of functions to a list of values.Dispatches to the `ap` method of the second argument, if present. Alsotreats curried functions as applicatives.
            <para />
            sig: [a -> b] -> [a] -> [b]
            </summary>
            <param name="fns">An array of functions</param>
            <param name="vs">An array of values</param>
            <returns>An array of results of applying each of `fns` to all of `vs` in turn.</returns>
        </member>
        <member name="M:Ramda.NET.R.Ap(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)">
            <summary>
            ap applies a list of functions to a list of values.Dispatches to the `ap` method of the second argument, if present. Alsotreats curried functions as applicatives.
            <para />
            sig: [a -> b] -> [a] -> [b]
            </summary>
            <param name="fns">An array of functions</param>
            <param name="vs">An array of values</param>
            <returns>An array of results of applying each of `fns` to all of `vs` in turn.</returns>
        </member>
        <member name="M:Ramda.NET.R.Ap``1(System.Func{``0,``0},System.Func{``0,``0})">
            <summary>
            ap applies a list of functions to a list of values.Dispatches to the `ap` method of the second argument, if present. Alsotreats curried functions as applicatives.
            <para />
            sig: [a -> b] -> [a] -> [b]
            </summary>
            <param name="fns">An array of functions</param>
            <param name="vs">An array of values</param>
            <returns>An array of results of applying each of `fns` to all of `vs` in turn.</returns>
        </member>
        <member name="M:Ramda.NET.R.Ap``1(Ramda.NET.RamdaPlaceholder,System.Func{``0,``0})">
            <summary>
            ap applies a list of functions to a list of values.Dispatches to the `ap` method of the second argument, if present. Alsotreats curried functions as applicatives.
            <para />
            sig: [a -> b] -> [a] -> [b]
            </summary>
            <param name="fns">An array of functions</param>
            <param name="vs">An array of values</param>
            <returns>An array of results of applying each of `fns` to all of `vs` in turn.</returns>
        </member>
        <member name="M:Ramda.NET.R.Ap``1(System.Func{``0,``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            ap applies a list of functions to a list of values.Dispatches to the `ap` method of the second argument, if present. Alsotreats curried functions as applicatives.
            <para />
            sig: [a -> b] -> [a] -> [b]
            </summary>
            <param name="fns">An array of functions</param>
            <param name="vs">An array of values</param>
            <returns>An array of results of applying each of `fns` to all of `vs` in turn.</returns>
        </member>
        <member name="M:Ramda.NET.R.Ap``1(System.Collections.Generic.IList{System.Func{``0,``0}},System.Collections.Generic.IList{``0})">
            <summary>
            ap applies a list of functions to a list of values.Dispatches to the `ap` method of the second argument, if present. Alsotreats curried functions as applicatives.
            <para />
            sig: [a -> b] -> [a] -> [b]
            </summary>
            <param name="fns">An array of functions</param>
            <param name="vs">An array of values</param>
            <returns>An array of results of applying each of `fns` to all of `vs` in turn.</returns>
        </member>
        <member name="M:Ramda.NET.R.Ap``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            ap applies a list of functions to a list of values.Dispatches to the `ap` method of the second argument, if present. Alsotreats curried functions as applicatives.
            <para />
            sig: [a -> b] -> [a] -> [b]
            </summary>
            <param name="fns">An array of functions</param>
            <param name="vs">An array of values</param>
            <returns>An array of results of applying each of `fns` to all of `vs` in turn.</returns>
        </member>
        <member name="M:Ramda.NET.R.Ap``1(System.Collections.Generic.IList{System.Func{``0,``0}},Ramda.NET.RamdaPlaceholder)">
            <summary>
            ap applies a list of functions to a list of values.Dispatches to the `ap` method of the second argument, if present. Alsotreats curried functions as applicatives.
            <para />
            sig: [a -> b] -> [a] -> [b]
            </summary>
            <param name="fns">An array of functions</param>
            <param name="vs">An array of values</param>
            <returns>An array of results of applying each of `fns` to all of `vs` in turn.</returns>
        </member>
        <member name="M:Ramda.NET.R.Ap(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            ap applies a list of functions to a list of values.Dispatches to the `ap` method of the second argument, if present. Alsotreats curried functions as applicatives.
            <para />
            sig: [a -> b] -> [a] -> [b]
            </summary>
            <param name="fns">An array of functions</param>
            <param name="vs">An array of values</param>
            <returns>An array of results of applying each of `fns` to all of `vs` in turn.</returns>
        </member>
        <member name="M:Ramda.NET.R.Aperture``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list, composed of n-tuples of consecutive elements If `n` isgreater than the length of the list, an empty list is returned.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Number -> [a] -> [[a]]
            </summary>
            <param name="n">The size of the tuples to create</param>
            <param name="list">The list to split into `n`-length tuples</param>
            <returns>The resulting list of `n`-length tuples</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Aperture``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list, composed of n-tuples of consecutive elements If `n` isgreater than the length of the list, an empty list is returned.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Number -> [a] -> [[a]]
            </summary>
            <param name="n">The size of the tuples to create</param>
            <param name="list">The list to split into `n`-length tuples</param>
            <returns>The resulting list of `n`-length tuples</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Aperture(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list, composed of n-tuples of consecutive elements If `n` isgreater than the length of the list, an empty list is returned.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Number -> [a] -> [[a]]
            </summary>
            <param name="n">The size of the tuples to create</param>
            <param name="list">The list to split into `n`-length tuples</param>
            <returns>The resulting list of `n`-length tuples</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Aperture(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list, composed of n-tuples of consecutive elements If `n` isgreater than the length of the list, an empty list is returned.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Number -> [a] -> [[a]]
            </summary>
            <param name="n">The size of the tuples to create</param>
            <param name="list">The list to split into `n`-length tuples</param>
            <returns>The resulting list of `n`-length tuples</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Append``1(``0,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing the contents of the given list, followed bythe given element.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="el">The element to add to the end of the new list.</param>
            <param name="list">The list of elements to add a new item to.       list.</param>
            <returns>A new list containing the elements of the old list followed by `el`.</returns>
            <see cref="M:Ramda.NET.R.Prepend(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Append``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing the contents of the given list, followed bythe given element.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="el">The element to add to the end of the new list.</param>
            <param name="list">The list of elements to add a new item to.       list.</param>
            <returns>A new list containing the elements of the old list followed by `el`.</returns>
            <see cref="M:Ramda.NET.R.Prepend(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Append``1(``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing the contents of the given list, followed bythe given element.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="el">The element to add to the end of the new list.</param>
            <param name="list">The list of elements to add a new item to.       list.</param>
            <returns>A new list containing the elements of the old list followed by `el`.</returns>
            <see cref="M:Ramda.NET.R.Prepend(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Append(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing the contents of the given list, followed bythe given element.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="el">The element to add to the end of the new list.</param>
            <param name="list">The list of elements to add a new item to.       list.</param>
            <returns>A new list containing the elements of the old list followed by `el`.</returns>
            <see cref="M:Ramda.NET.R.Prepend(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Apply``1(System.Delegate,System.Collections.Generic.IList{``0})">
            <summary>
            Applies function `fn` to the argument list `args`. This is useful forcreating a fixed-arity function from a variadic function. `fn` should be abound function if context is significant.
            <para />
            sig: (*... -> a) -> [*] -> a
            </summary>
            <param name="fn">The function which will be called with `args`</param>
            <param name="args">The arguments to call `fn` with</param>
            <returns>result The result, equivalent to `fn(...args)`</returns>
            <see cref="M:Ramda.NET.R.Call(System.Delegate,System.Object[])"/>
            <see cref="M:Ramda.NET.R.Unapply(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Apply``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Applies function `fn` to the argument list `args`. This is useful forcreating a fixed-arity function from a variadic function. `fn` should be abound function if context is significant.
            <para />
            sig: (*... -> a) -> [*] -> a
            </summary>
            <param name="fn">The function which will be called with `args`</param>
            <param name="args">The arguments to call `fn` with</param>
            <returns>result The result, equivalent to `fn(...args)`</returns>
            <see cref="M:Ramda.NET.R.Call(System.Delegate,System.Object[])"/>
            <see cref="M:Ramda.NET.R.Unapply(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Apply(System.Delegate,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Applies function `fn` to the argument list `args`. This is useful forcreating a fixed-arity function from a variadic function. `fn` should be abound function if context is significant.
            <para />
            sig: (*... -> a) -> [*] -> a
            </summary>
            <param name="fn">The function which will be called with `args`</param>
            <param name="args">The arguments to call `fn` with</param>
            <returns>result The result, equivalent to `fn(...args)`</returns>
            <see cref="M:Ramda.NET.R.Call(System.Delegate,System.Object[])"/>
            <see cref="M:Ramda.NET.R.Unapply(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Apply(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Applies function `fn` to the argument list `args`. This is useful forcreating a fixed-arity function from a variadic function. `fn` should be abound function if context is significant.
            <para />
            sig: (*... -> a) -> [*] -> a
            </summary>
            <param name="fn">The function which will be called with `args`</param>
            <param name="args">The arguments to call `fn` with</param>
            <returns>result The result, equivalent to `fn(...args)`</returns>
            <see cref="M:Ramda.NET.R.Call(System.Delegate,System.Object[])"/>
            <see cref="M:Ramda.NET.R.Unapply(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Apply``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Applies function `fn` to the argument list `args`. This is useful forcreating a fixed-arity function from a variadic function. `fn` should be abound function if context is significant.
            <para />
            sig: (*... -> a) -> [*] -> a
            </summary>
            <param name="fn">The function which will be called with `args`</param>
            <param name="args">The arguments to call `fn` with</param>
            <returns>result The result, equivalent to `fn(...args)`</returns>
            <see cref="M:Ramda.NET.R.Call(System.Delegate,System.Object[])"/>
            <see cref="M:Ramda.NET.R.Unapply(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Apply(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Applies function `fn` to the argument list `args`. This is useful forcreating a fixed-arity function from a variadic function. `fn` should be abound function if context is significant.
            <para />
            sig: (*... -> a) -> [*] -> a
            </summary>
            <param name="fn">The function which will be called with `args`</param>
            <param name="args">The arguments to call `fn` with</param>
            <returns>result The result, equivalent to `fn(...args)`</returns>
            <see cref="M:Ramda.NET.R.Call(System.Delegate,System.Object[])"/>
            <see cref="M:Ramda.NET.R.Unapply(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ApplySpec``1(``0)">
            <summary>
            Given a spec object recursively mapping properties to functions, creates afunction producing an object of the same structure, by mapping each propertyto the result of calling its associated function with the supplied arguments.
            <para />
            sig: {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})
            </summary>
            <param name="spec">an object recursively mapping properties to functions for       producing the values for these properties.</param>
            <returns>A function that returns an object of the same structureas `spec', with each property set to the value returned by calling itsassociated function with the supplied arguments.</returns>
            <see cref="M:Ramda.NET.R.Converge(System.Delegate,System.Collections.Generic.IList{System.Delegate})"/>
            <see cref="M:Ramda.NET.R.Juxt(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ApplySpec(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Given a spec object recursively mapping properties to functions, creates afunction producing an object of the same structure, by mapping each propertyto the result of calling its associated function with the supplied arguments.
            <para />
            sig: {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})
            </summary>
            <param name="spec">an object recursively mapping properties to functions for       producing the values for these properties.</param>
            <returns>A function that returns an object of the same structureas `spec', with each property set to the value returned by calling itsassociated function with the supplied arguments.</returns>
            <see cref="M:Ramda.NET.R.Converge(System.Delegate,System.Collections.Generic.IList{System.Delegate})"/>
            <see cref="M:Ramda.NET.R.Juxt(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Ascend``1(System.Func{``0,System.Int32},``0,``0)">
            <summary>
            Makes an ascending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[<]]> fn(b), `1` if fn(b) <![CDATA[<]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Ascend``1(Ramda.NET.RamdaPlaceholder,``0,``0)">
            <summary>
            Makes an ascending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[<]]> fn(b), `1` if fn(b) <![CDATA[<]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Ascend``1(System.Func{``0,System.Int32},Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Makes an ascending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[<]]> fn(b), `1` if fn(b) <![CDATA[<]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Ascend``1(System.Func{``0,System.Int32},``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes an ascending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[<]]> fn(b), `1` if fn(b) <![CDATA[<]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Ascend``1(System.Func{``0,System.Int32},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes an ascending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[<]]> fn(b), `1` if fn(b) <![CDATA[<]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Ascend``1(System.Object,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Makes an ascending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[<]]> fn(b), `1` if fn(b) <![CDATA[<]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Ascend``1(System.Object,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes an ascending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[<]]> fn(b), `1` if fn(b) <![CDATA[<]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Ascend(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes an ascending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[<]]> fn(b), `1` if fn(b) <![CDATA[<]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Ascend``1(System.Object,``0,``0)">
            <summary>
            Makes an ascending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[<]]> fn(b), `1` if fn(b) <![CDATA[<]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Ascend(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes an ascending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[<]]> fn(b), `1` if fn(b) <![CDATA[<]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Assoc``2(System.String,``0,``1)">
            <summary>
            Makes a shallow clone of an object, setting or overriding the specifiedproperty with the given value. Note that this copies and flattens prototypeproperties onto the new object as well. All non-primitive properties arecopied by reference.
            <para />
            sig: String -> a -> {k: v} -> {k: v}
            </summary>
            <param name="prop">The property name to set</param>
            <param name="val">The new value</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original except for the changed property.</returns>
            <see cref="M:Ramda.NET.R.Dissoc(System.String,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Assoc``2(Ramda.NET.RamdaPlaceholder,``0,``1)">
            <summary>
            Makes a shallow clone of an object, setting or overriding the specifiedproperty with the given value. Note that this copies and flattens prototypeproperties onto the new object as well. All non-primitive properties arecopied by reference.
            <para />
            sig: String -> a -> {k: v} -> {k: v}
            </summary>
            <param name="prop">The property name to set</param>
            <param name="val">The new value</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original except for the changed property.</returns>
            <see cref="M:Ramda.NET.R.Dissoc(System.String,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Assoc``1(System.String,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Makes a shallow clone of an object, setting or overriding the specifiedproperty with the given value. Note that this copies and flattens prototypeproperties onto the new object as well. All non-primitive properties arecopied by reference.
            <para />
            sig: String -> a -> {k: v} -> {k: v}
            </summary>
            <param name="prop">The property name to set</param>
            <param name="val">The new value</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original except for the changed property.</returns>
            <see cref="M:Ramda.NET.R.Dissoc(System.String,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Assoc``1(System.String,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes a shallow clone of an object, setting or overriding the specifiedproperty with the given value. Note that this copies and flattens prototypeproperties onto the new object as well. All non-primitive properties arecopied by reference.
            <para />
            sig: String -> a -> {k: v} -> {k: v}
            </summary>
            <param name="prop">The property name to set</param>
            <param name="val">The new value</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original except for the changed property.</returns>
            <see cref="M:Ramda.NET.R.Dissoc(System.String,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Assoc(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes a shallow clone of an object, setting or overriding the specifiedproperty with the given value. Note that this copies and flattens prototypeproperties onto the new object as well. All non-primitive properties arecopied by reference.
            <para />
            sig: String -> a -> {k: v} -> {k: v}
            </summary>
            <param name="prop">The property name to set</param>
            <param name="val">The new value</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original except for the changed property.</returns>
            <see cref="M:Ramda.NET.R.Dissoc(System.String,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Assoc(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes a shallow clone of an object, setting or overriding the specifiedproperty with the given value. Note that this copies and flattens prototypeproperties onto the new object as well. All non-primitive properties arecopied by reference.
            <para />
            sig: String -> a -> {k: v} -> {k: v}
            </summary>
            <param name="prop">The property name to set</param>
            <param name="val">The new value</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original except for the changed property.</returns>
            <see cref="M:Ramda.NET.R.Dissoc(System.String,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.AssocPath``2(System.Collections.Generic.IList{System.Object},``0,``1)">
            <summary>
            Makes a shallow clone of an object, setting or overriding the nodes requiredto create the given path, and placing the specific value at the tail end ofthat path. Note that this copies and flattens prototype properties onto thenew object as well. All non-primitive properties are copied by reference.
            <para />
            sig: [Idx] -> a -> {a} -> {a}
            </summary>
            <param name="path">the path to set</param>
            <param name="val">The new value</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original except along the specified path.</returns>
            <see cref="M:Ramda.NET.R.DissocPath(System.Collections.Generic.IList{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.AssocPath``2(Ramda.NET.RamdaPlaceholder,``0,``1)">
            <summary>
            Makes a shallow clone of an object, setting or overriding the nodes requiredto create the given path, and placing the specific value at the tail end ofthat path. Note that this copies and flattens prototype properties onto thenew object as well. All non-primitive properties are copied by reference.
            <para />
            sig: [Idx] -> a -> {a} -> {a}
            </summary>
            <param name="path">the path to set</param>
            <param name="val">The new value</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original except along the specified path.</returns>
            <see cref="M:Ramda.NET.R.DissocPath(System.Collections.Generic.IList{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.AssocPath``1(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Makes a shallow clone of an object, setting or overriding the nodes requiredto create the given path, and placing the specific value at the tail end ofthat path. Note that this copies and flattens prototype properties onto thenew object as well. All non-primitive properties are copied by reference.
            <para />
            sig: [Idx] -> a -> {a} -> {a}
            </summary>
            <param name="path">the path to set</param>
            <param name="val">The new value</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original except along the specified path.</returns>
            <see cref="M:Ramda.NET.R.DissocPath(System.Collections.Generic.IList{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.AssocPath``1(System.Collections.Generic.IList{System.Object},``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes a shallow clone of an object, setting or overriding the nodes requiredto create the given path, and placing the specific value at the tail end ofthat path. Note that this copies and flattens prototype properties onto thenew object as well. All non-primitive properties are copied by reference.
            <para />
            sig: [Idx] -> a -> {a} -> {a}
            </summary>
            <param name="path">the path to set</param>
            <param name="val">The new value</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original except along the specified path.</returns>
            <see cref="M:Ramda.NET.R.DissocPath(System.Collections.Generic.IList{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.AssocPath(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes a shallow clone of an object, setting or overriding the nodes requiredto create the given path, and placing the specific value at the tail end ofthat path. Note that this copies and flattens prototype properties onto thenew object as well. All non-primitive properties are copied by reference.
            <para />
            sig: [Idx] -> a -> {a} -> {a}
            </summary>
            <param name="path">the path to set</param>
            <param name="val">The new value</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original except along the specified path.</returns>
            <see cref="M:Ramda.NET.R.DissocPath(System.Collections.Generic.IList{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.AssocPath(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes a shallow clone of an object, setting or overriding the nodes requiredto create the given path, and placing the specific value at the tail end ofthat path. Note that this copies and flattens prototype properties onto thenew object as well. All non-primitive properties are copied by reference.
            <para />
            sig: [Idx] -> a -> {a} -> {a}
            </summary>
            <param name="path">the path to set</param>
            <param name="val">The new value</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original except along the specified path.</returns>
            <see cref="M:Ramda.NET.R.DissocPath(System.Collections.Generic.IList{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Binary(System.Delegate)">
            <summary>
            Wraps a function of any arity (including nullary) in a function that acceptsexactly 2 parameters. Any extraneous parameters will not be passed to thesupplied function.
            <para />
            sig: (* -> c) -> (a, b -> c)
            </summary>
            <param name="fn">The function to wrap.</param>
            <returns>A new function wrapping `fn`. The new function is guaranteed to be of arity 2.</returns>
        </member>
        <member name="M:Ramda.NET.R.Binary(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Wraps a function of any arity (including nullary) in a function that acceptsexactly 2 parameters. Any extraneous parameters will not be passed to thesupplied function.
            <para />
            sig: (* -> c) -> (a, b -> c)
            </summary>
            <param name="fn">The function to wrap.</param>
            <returns>A new function wrapping `fn`. The new function is guaranteed to be of arity 2.</returns>
        </member>
        <member name="M:Ramda.NET.R.Binary(System.Object)">
            <summary>
            Wraps a function of any arity (including nullary) in a function that acceptsexactly 2 parameters. Any extraneous parameters will not be passed to thesupplied function.
            <para />
            sig: (* -> c) -> (a, b -> c)
            </summary>
            <param name="fn">The function to wrap.</param>
            <returns>A new function wrapping `fn`. The new function is guaranteed to be of arity 2.</returns>
        </member>
        <member name="M:Ramda.NET.R.Bind``1(System.Delegate,``0)">
            <summary>
            Creates a function that is bound to a context.Note: `R.bind` does not provide the additional argument-binding capabilities of[Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
            <para />
            sig: (* -> *) -> {*} -> (* -> *)
            </summary>
            <param name="fn">The function to bind to context</param>
            <param name="thisObj">The context to bind `fn` to</param>
            <returns>A function that will execute in the context of `thisObj`.</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Bind``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Creates a function that is bound to a context.Note: `R.bind` does not provide the additional argument-binding capabilities of[Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
            <para />
            sig: (* -> *) -> {*} -> (* -> *)
            </summary>
            <param name="fn">The function to bind to context</param>
            <param name="thisObj">The context to bind `fn` to</param>
            <returns>A function that will execute in the context of `thisObj`.</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Bind(System.Delegate,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a function that is bound to a context.Note: `R.bind` does not provide the additional argument-binding capabilities of[Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
            <para />
            sig: (* -> *) -> {*} -> (* -> *)
            </summary>
            <param name="fn">The function to bind to context</param>
            <param name="thisObj">The context to bind `fn` to</param>
            <returns>A function that will execute in the context of `thisObj`.</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Bind(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a function that is bound to a context.Note: `R.bind` does not provide the additional argument-binding capabilities of[Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
            <para />
            sig: (* -> *) -> {*} -> (* -> *)
            </summary>
            <param name="fn">The function to bind to context</param>
            <param name="thisObj">The context to bind `fn` to</param>
            <returns>A function that will execute in the context of `thisObj`.</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Bind``1(System.Object,``0)">
            <summary>
            Creates a function that is bound to a context.Note: `R.bind` does not provide the additional argument-binding capabilities of[Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
            <para />
            sig: (* -> *) -> {*} -> (* -> *)
            </summary>
            <param name="fn">The function to bind to context</param>
            <param name="thisObj">The context to bind `fn` to</param>
            <returns>A function that will execute in the context of `thisObj`.</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Bind(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a function that is bound to a context.Note: `R.bind` does not provide the additional argument-binding capabilities of[Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
            <para />
            sig: (* -> *) -> {*} -> (* -> *)
            </summary>
            <param name="fn">The function to bind to context</param>
            <param name="thisObj">The context to bind `fn` to</param>
            <returns>A function that will execute in the context of `thisObj`.</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Both(System.Delegate,System.Delegate)">
            <summary>
            A function which calls the two provided functions and returns the `<![CDATA[&&]]>`of the results.It returns the result of the first function if it is false-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns afalse-y value.In addition to functions, `R.both` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">A predicate</param>
            <param name="g">Another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `<![CDATA[&&]]>`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.And(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Both(System.Object,System.Delegate)">
            <summary>
            A function which calls the two provided functions and returns the `<![CDATA[&&]]>`of the results.It returns the result of the first function if it is false-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns afalse-y value.In addition to functions, `R.both` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">A predicate</param>
            <param name="g">Another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `<![CDATA[&&]]>`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.And(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Both(System.Delegate,System.Object)">
            <summary>
            A function which calls the two provided functions and returns the `<![CDATA[&&]]>`of the results.It returns the result of the first function if it is false-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns afalse-y value.In addition to functions, `R.both` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">A predicate</param>
            <param name="g">Another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `<![CDATA[&&]]>`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.And(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Both(System.Object,System.Object)">
            <summary>
            A function which calls the two provided functions and returns the `<![CDATA[&&]]>`of the results.It returns the result of the first function if it is false-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns afalse-y value.In addition to functions, `R.both` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">A predicate</param>
            <param name="g">Another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `<![CDATA[&&]]>`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.And(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Both``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            A function which calls the two provided functions and returns the `<![CDATA[&&]]>`of the results.It returns the result of the first function if it is false-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns afalse-y value.In addition to functions, `R.both` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">A predicate</param>
            <param name="g">Another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `<![CDATA[&&]]>`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.And(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Both``1(Ramda.NET.RamdaPlaceholder,System.Func{``0,System.Boolean})">
            <summary>
            A function which calls the two provided functions and returns the `<![CDATA[&&]]>`of the results.It returns the result of the first function if it is false-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns afalse-y value.In addition to functions, `R.both` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">A predicate</param>
            <param name="g">Another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `<![CDATA[&&]]>`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.And(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Both``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            A function which calls the two provided functions and returns the `<![CDATA[&&]]>`of the results.It returns the result of the first function if it is false-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns afalse-y value.In addition to functions, `R.both` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">A predicate</param>
            <param name="g">Another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `<![CDATA[&&]]>`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.And(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Both(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            A function which calls the two provided functions and returns the `<![CDATA[&&]]>`of the results.It returns the result of the first function if it is false-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns afalse-y value.In addition to functions, `R.both` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">A predicate</param>
            <param name="g">Another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `<![CDATA[&&]]>`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.And(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Both(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            A function which calls the two provided functions and returns the `<![CDATA[&&]]>`of the results.It returns the result of the first function if it is false-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns afalse-y value.In addition to functions, `R.both` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">A predicate</param>
            <param name="g">Another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `<![CDATA[&&]]>`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.And(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Both``1(System.Object,System.Func{``0,System.Boolean})">
            <summary>
            A function which calls the two provided functions and returns the `<![CDATA[&&]]>`of the results.It returns the result of the first function if it is false-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns afalse-y value.In addition to functions, `R.both` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">A predicate</param>
            <param name="g">Another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `<![CDATA[&&]]>`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.And(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Both``1(System.Func{``0,System.Boolean},System.Object)">
            <summary>
            A function which calls the two provided functions and returns the `<![CDATA[&&]]>`of the results.It returns the result of the first function if it is false-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns afalse-y value.In addition to functions, `R.both` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">A predicate</param>
            <param name="g">Another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `<![CDATA[&&]]>`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.And(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Both(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            A function which calls the two provided functions and returns the `<![CDATA[&&]]>`of the results.It returns the result of the first function if it is false-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns afalse-y value.In addition to functions, `R.both` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">A predicate</param>
            <param name="g">Another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `<![CDATA[&&]]>`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.And(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Call(System.Delegate,System.Object[])">
            <summary>
            Returns the result of calling its first argument with the remainingarguments. This is occasionally useful as a converging function for`R.converge`: the left branch can produce a function while the right branchproduces a value to be passed to that function as an argument.
            <para />
            sig: (*... -> a),*... -> a
            </summary>
            <param name="fn">The function to apply to the remaining arguments.</param>
            <param name="args">Any number of positional arguments.</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Apply(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Call(Ramda.NET.RamdaPlaceholder,System.Object[])">
            <summary>
            Returns the result of calling its first argument with the remainingarguments. This is occasionally useful as a converging function for`R.converge`: the left branch can produce a function while the right branchproduces a value to be passed to that function as an argument.
            <para />
            sig: (*... -> a),*... -> a
            </summary>
            <param name="fn">The function to apply to the remaining arguments.</param>
            <param name="args">Any number of positional arguments.</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Apply(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Call(System.Delegate,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of calling its first argument with the remainingarguments. This is occasionally useful as a converging function for`R.converge`: the left branch can produce a function while the right branchproduces a value to be passed to that function as an argument.
            <para />
            sig: (*... -> a),*... -> a
            </summary>
            <param name="fn">The function to apply to the remaining arguments.</param>
            <param name="args">Any number of positional arguments.</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Apply(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Call(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of calling its first argument with the remainingarguments. This is occasionally useful as a converging function for`R.converge`: the left branch can produce a function while the right branchproduces a value to be passed to that function as an argument.
            <para />
            sig: (*... -> a),*... -> a
            </summary>
            <param name="fn">The function to apply to the remaining arguments.</param>
            <param name="args">Any number of positional arguments.</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Apply(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Call(System.Object,System.Object[])">
            <summary>
            Returns the result of calling its first argument with the remainingarguments. This is occasionally useful as a converging function for`R.converge`: the left branch can produce a function while the right branchproduces a value to be passed to that function as an argument.
            <para />
            sig: (*... -> a),*... -> a
            </summary>
            <param name="fn">The function to apply to the remaining arguments.</param>
            <param name="args">Any number of positional arguments.</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Apply(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Call(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of calling its first argument with the remainingarguments. This is occasionally useful as a converging function for`R.converge`: the left branch can produce a function while the right branchproduces a value to be passed to that function as an argument.
            <para />
            sig: (*... -> a),*... -> a
            </summary>
            <param name="fn">The function to apply to the remaining arguments.</param>
            <param name="args">Any number of positional arguments.</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Apply(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Chain``1(System.Delegate,System.Collections.Generic.IList{``0})">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Chain``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Chain(System.Delegate,Ramda.NET.RamdaPlaceholder)">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Chain(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Chain``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Chain(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Chain(System.Delegate,System.Delegate)">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Chain(Ramda.NET.RamdaPlaceholder,System.Delegate)">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Chain(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Chain(System.Object,System.Delegate)">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Chain(System.Delegate,System.Object)">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Chain(System.Object,System.Object)">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Chain``1(System.Delegate,``0)">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Chain``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Chain``1(System.Object,``0)">
            <summary>
            `chain` maps a function over a list and concatenates the results. `chain`is also known as `flatMap` in some librariesDispatches to the `chain` method of the second argument, if present,according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain m => (a -> m b) -> m a -> m b
            </summary>
            <param name="fn">The function to map with</param>
            <param name="list">The list to map over</param>
            <returns>The result of flat-mapping `list` with `fn`</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(System.Char,System.Char,System.Char)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(Ramda.NET.RamdaPlaceholder,System.Char,System.Char)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(System.Char,Ramda.NET.RamdaPlaceholder,System.Char)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(System.Char,System.Char,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(System.Char,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(Ramda.NET.RamdaPlaceholder,System.Double,System.Double)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(System.Double,Ramda.NET.RamdaPlaceholder,System.Double)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(System.Double,System.Double,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(System.Double,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(Ramda.NET.RamdaPlaceholder,System.Int32,System.Int32)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(System.Int32,Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(System.Int32,System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clamp(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
            <para />
            sig: Ord a => a -> a -> a -> a
            </summary>
            <param name="minimum">The lower limit of the clamp (inclusive)</param>
            <param name="maximum">The upper limit of the clamp (inclusive)</param>
            <param name="value">Value to be clamped</param>
            <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
        </member>
        <member name="M:Ramda.NET.R.Clone``1(``0)">
            <summary>
            Creates a deep copy of the value which may contain (nested) `Array`s and`Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s areassigned by reference rather than copiedDispatches to a `clone` method if present.
            <para />
            sig: {*} -> {*}
            </summary>
            <param name="value">The object or array to clone</param>
            <returns>A deeply cloned copy of `val`</returns>
        </member>
        <member name="M:Ramda.NET.R.Clone(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a deep copy of the value which may contain (nested) `Array`s and`Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s areassigned by reference rather than copiedDispatches to a `clone` method if present.
            <para />
            sig: {*} -> {*}
            </summary>
            <param name="value">The object or array to clone</param>
            <returns>A deeply cloned copy of `val`</returns>
        </member>
        <member name="M:Ramda.NET.R.Comparator``1(System.Func{``0,``0,System.Boolean})">
            <summary>
            Makes a comparator function out of a function that reports whether the firstelement is less than the second.
            <para />
            sig: (a, b -> Boolean) -> (a, b -> Number)
            </summary>
            <param name="pred">A predicate function of arity two which will return `true` if the first argumentis less than the second, `false` otherwise</param>
            <returns>A Function :: a -<![CDATA[>]]> b -<![CDATA[>]]> Int that returns `-1` if a <![CDATA[<]]> b, `1` if b <![CDATA[<]]> a, otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Comparator(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes a comparator function out of a function that reports whether the firstelement is less than the second.
            <para />
            sig: (a, b -> Boolean) -> (a, b -> Number)
            </summary>
            <param name="pred">A predicate function of arity two which will return `true` if the first argumentis less than the second, `false` otherwise</param>
            <returns>A Function :: a -<![CDATA[>]]> b -<![CDATA[>]]> Int that returns `-1` if a <![CDATA[<]]> b, `1` if b <![CDATA[<]]> a, otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Comparator(System.Object)">
            <summary>
            Makes a comparator function out of a function that reports whether the firstelement is less than the second.
            <para />
            sig: (a, b -> Boolean) -> (a, b -> Number)
            </summary>
            <param name="pred">A predicate function of arity two which will return `true` if the first argumentis less than the second, `false` otherwise</param>
            <returns>A Function :: a -<![CDATA[>]]> b -<![CDATA[>]]> Int that returns `-1` if a <![CDATA[<]]> b, `1` if b <![CDATA[<]]> a, otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Complement``1(System.Func{``0,System.Boolean})">
            <summary>
            Takes a function `f` and returns a function `g` such that if called with the same argumentswhen `f` returns a "truthy" value, `g` returns `false` and when `f` returns a "falsy" value `g` returns `true`.`R.complement` may be applied to any functor
            <para />
            sig: (*... -> *) -> (*... -> Boolean)
            </summary>
            <param name="f">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Not(System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Complement(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function `f` and returns a function `g` such that if called with the same argumentswhen `f` returns a "truthy" value, `g` returns `false` and when `f` returns a "falsy" value `g` returns `true`.`R.complement` may be applied to any functor
            <para />
            sig: (*... -> *) -> (*... -> Boolean)
            </summary>
            <param name="f">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Not(System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Complement(System.Object)">
            <summary>
            Takes a function `f` and returns a function `g` such that if called with the same argumentswhen `f` returns a "truthy" value, `g` returns `false` and when `f` returns a "falsy" value `g` returns `true`.`R.complement` may be applied to any functor
            <para />
            sig: (*... -> *) -> (*... -> Boolean)
            </summary>
            <param name="f">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Not(System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Compose(System.Delegate[])">
            <summary>
            Performs right-to-left function composition. The rightmost function may haveany arity; the remaining functions must be unary.**Note:** The result of compose is not automatically curried.
            <para />
            sig: ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
            </summary>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.Compose(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Performs right-to-left function composition. The rightmost function may haveany arity; the remaining functions must be unary.**Note:** The result of compose is not automatically curried.
            <para />
            sig: ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
            </summary>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.Compose(System.Object[])">
            <summary>
            Performs right-to-left function composition. The rightmost function may haveany arity; the remaining functions must be unary.**Note:** The result of compose is not automatically curried.
            <para />
            sig: ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
            </summary>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.ComposeK(System.Delegate[])">
            <summary>
            Returns the right-to-left Kleisli composition of the provided functions,each of which must return a value of a type supported by [`chain`](#chain).`R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.
            <para />
            sig: Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)
            </summary>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.ComposeK(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the right-to-left Kleisli composition of the provided functions,each of which must return a value of a type supported by [`chain`](#chain).`R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.
            <para />
            sig: Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)
            </summary>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.ComposeK(System.Object[])">
            <summary>
            Returns the right-to-left Kleisli composition of the provided functions,each of which must return a value of a type supported by [`chain`](#chain).`R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.
            <para />
            sig: Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)
            </summary>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.ComposeP(System.Delegate[])">
            <summary>
            Performs right-to-left composition of one or more Promise-returningfunctions. The rightmost function may have any arity; the remainingfunctions must be unary.
            <para />
            sig: ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)
            </summary>
            <param name="functions">The functions to compose</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.PipeP(System.Delegate[])"/>
        </member>
        <member name="M:Ramda.NET.R.ComposeP(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Performs right-to-left composition of one or more Promise-returningfunctions. The rightmost function may have any arity; the remainingfunctions must be unary.
            <para />
            sig: ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)
            </summary>
            <param name="functions">The functions to compose</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.PipeP(System.Delegate[])"/>
        </member>
        <member name="M:Ramda.NET.R.ComposeP(System.Object[])">
            <summary>
            Performs right-to-left composition of one or more Promise-returningfunctions. The rightmost function may have any arity; the remainingfunctions must be unary.
            <para />
            sig: ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)
            </summary>
            <param name="functions">The functions to compose</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.PipeP(System.Delegate[])"/>
        </member>
        <member name="M:Ramda.NET.R.Concat``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Returns the result of concatenating the given lists or strings.Note: `R.concat` expects both arguments to be of the same type,unlike the native `Array.prototype.concat` method. It will throwan error if you `concat` an Array with a non-Array value.Dispatches to the `concat` method of the first argument, if present.
            <para />
            sig: [a] -> [a] -> [a]
            </summary>
            <param name="firstList">The first list</param>
            <param name="secondList">The second list</param>
            <returns>A list consisting of the elements of `firstList` followed by the elements of`secondList`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Concat``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the result of concatenating the given lists or strings.Note: `R.concat` expects both arguments to be of the same type,unlike the native `Array.prototype.concat` method. It will throwan error if you `concat` an Array with a non-Array value.Dispatches to the `concat` method of the first argument, if present.
            <para />
            sig: [a] -> [a] -> [a]
            </summary>
            <param name="firstList">The first list</param>
            <param name="secondList">The second list</param>
            <returns>A list consisting of the elements of `firstList` followed by the elements of`secondList`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Concat``1(System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of concatenating the given lists or strings.Note: `R.concat` expects both arguments to be of the same type,unlike the native `Array.prototype.concat` method. It will throwan error if you `concat` an Array with a non-Array value.Dispatches to the `concat` method of the first argument, if present.
            <para />
            sig: [a] -> [a] -> [a]
            </summary>
            <param name="firstList">The first list</param>
            <param name="secondList">The second list</param>
            <returns>A list consisting of the elements of `firstList` followed by the elements of`secondList`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Concat(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of concatenating the given lists or strings.Note: `R.concat` expects both arguments to be of the same type,unlike the native `Array.prototype.concat` method. It will throwan error if you `concat` an Array with a non-Array value.Dispatches to the `concat` method of the first argument, if present.
            <para />
            sig: [a] -> [a] -> [a]
            </summary>
            <param name="firstList">The first list</param>
            <param name="secondList">The second list</param>
            <returns>A list consisting of the elements of `firstList` followed by the elements of`secondList`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Concat``2(``0,``1)">
            <summary>
            Returns the result of concatenating the given lists or strings.Note: `R.concat` expects both arguments to be of the same type,unlike the native `Array.prototype.concat` method. It will throwan error if you `concat` an Array with a non-Array value.Dispatches to the `concat` method of the first argument, if present.
            <para />
            sig: [a] -> [a] -> [a]
            </summary>
            <param name="firstList">The first list</param>
            <param name="secondList">The second list</param>
            <returns>A list consisting of the elements of `firstList` followed by the elements of`secondList`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Concat``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns the result of concatenating the given lists or strings.Note: `R.concat` expects both arguments to be of the same type,unlike the native `Array.prototype.concat` method. It will throwan error if you `concat` an Array with a non-Array value.Dispatches to the `concat` method of the first argument, if present.
            <para />
            sig: [a] -> [a] -> [a]
            </summary>
            <param name="firstList">The first list</param>
            <param name="secondList">The second list</param>
            <returns>A list consisting of the elements of `firstList` followed by the elements of`secondList`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Concat``1(``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of concatenating the given lists or strings.Note: `R.concat` expects both arguments to be of the same type,unlike the native `Array.prototype.concat` method. It will throwan error if you `concat` an Array with a non-Array value.Dispatches to the `concat` method of the first argument, if present.
            <para />
            sig: [a] -> [a] -> [a]
            </summary>
            <param name="firstList">The first list</param>
            <param name="secondList">The second list</param>
            <returns>A list consisting of the elements of `firstList` followed by the elements of`secondList`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Concat(System.String,System.String)">
            <summary>
            Returns the result of concatenating the given lists or strings.Note: `R.concat` expects both arguments to be of the same type,unlike the native `Array.prototype.concat` method. It will throwan error if you `concat` an Array with a non-Array value.Dispatches to the `concat` method of the first argument, if present.
            <para />
            sig: [a] -> [a] -> [a]
            </summary>
            <param name="firstList">The first list</param>
            <param name="secondList">The second list</param>
            <returns>A list consisting of the elements of `firstList` followed by the elements of`secondList`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Concat(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Returns the result of concatenating the given lists or strings.Note: `R.concat` expects both arguments to be of the same type,unlike the native `Array.prototype.concat` method. It will throwan error if you `concat` an Array with a non-Array value.Dispatches to the `concat` method of the first argument, if present.
            <para />
            sig: [a] -> [a] -> [a]
            </summary>
            <param name="firstList">The first list</param>
            <param name="secondList">The second list</param>
            <returns>A list consisting of the elements of `firstList` followed by the elements of`secondList`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Concat(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of concatenating the given lists or strings.Note: `R.concat` expects both arguments to be of the same type,unlike the native `Array.prototype.concat` method. It will throwan error if you `concat` an Array with a non-Array value.Dispatches to the `concat` method of the first argument, if present.
            <para />
            sig: [a] -> [a] -> [a]
            </summary>
            <param name="firstList">The first list</param>
            <param name="secondList">The second list</param>
            <returns>A list consisting of the elements of `firstList` followed by the elements of`secondList`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Cond(System.Collections.Generic.IList{System.Object})">
            <summary>
            Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.`R.cond` takes a list of [predicate, transformer] pairs. All of the argumentsto `fn` are applied to each of the predicates in turn until one returns a"truthy" value, at which point `fn` returns the result of applying itsarguments to the corresponding transformer. If none of the predicatesmatches, `fn` returns undefined.
            <para />
            sig: [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
            </summary>
            <param name="pairs">A list of [predicate, transformer]</param>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.Cond(System.Delegate[][])">
            <summary>
            Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.`R.cond` takes a list of [predicate, transformer] pairs. All of the argumentsto `fn` are applied to each of the predicates in turn until one returns a"truthy" value, at which point `fn` returns the result of applying itsarguments to the corresponding transformer. If none of the predicatesmatches, `fn` returns undefined.
            <para />
            sig: [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
            </summary>
            <param name="pairs">A list of [predicate, transformer]</param>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.Cond(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.`R.cond` takes a list of [predicate, transformer] pairs. All of the argumentsto `fn` are applied to each of the predicates in turn until one returns a"truthy" value, at which point `fn` returns the result of applying itsarguments to the corresponding transformer. If none of the predicatesmatches, `fn` returns undefined.
            <para />
            sig: [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
            </summary>
            <param name="pairs">A list of [predicate, transformer]</param>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.Construct``1(System.Func{``0})">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type.
            <para />
            sig: (* -> {*}) -> (* -> {*})
            </summary>
            <param name="fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Construct(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type.
            <para />
            sig: (* -> {*}) -> (* -> {*})
            </summary>
            <param name="fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Construct(System.Object)">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type.
            <para />
            sig: (* -> {*}) -> (* -> {*})
            </summary>
            <param name="fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Construct``2(System.Func{``0,``1})">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type.
            <para />
            sig: (* -> {*}) -> (* -> {*})
            </summary>
            <param name="fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Construct``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type.
            <para />
            sig: (* -> {*}) -> (* -> {*})
            </summary>
            <param name="fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Construct``3(System.Func{``0,``1,``2})">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type.
            <para />
            sig: (* -> {*}) -> (* -> {*})
            </summary>
            <param name="fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Construct``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type.
            <para />
            sig: (* -> {*}) -> (* -> {*})
            </summary>
            <param name="fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Construct``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type.
            <para />
            sig: (* -> {*}) -> (* -> {*})
            </summary>
            <param name="fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Construct``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type.
            <para />
            sig: (* -> {*}) -> (* -> {*})
            </summary>
            <param name="fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Construct``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type.
            <para />
            sig: (* -> {*}) -> (* -> {*})
            </summary>
            <param name="fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Construct``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type.
            <para />
            sig: (* -> {*}) -> (* -> {*})
            </summary>
            <param name="fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Construct``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type.
            <para />
            sig: (* -> {*}) -> (* -> {*})
            </summary>
            <param name="fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Construct``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type.
            <para />
            sig: (* -> {*}) -> (* -> {*})
            </summary>
            <param name="fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.ConstructN(System.Int32,System.Delegate)">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type. The arity of the functionreturned is specified to allow using variadic constructor functions.
            <para />
            sig: Number -> (* -> {*}) -> (* -> {*})
            </summary>
            <param name="n">The arity of the constructor function.</param>
            <param name="Fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.ConstructN(Ramda.NET.RamdaPlaceholder,System.Delegate)">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type. The arity of the functionreturned is specified to allow using variadic constructor functions.
            <para />
            sig: Number -> (* -> {*}) -> (* -> {*})
            </summary>
            <param name="n">The arity of the constructor function.</param>
            <param name="Fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.ConstructN(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type. The arity of the functionreturned is specified to allow using variadic constructor functions.
            <para />
            sig: Number -> (* -> {*}) -> (* -> {*})
            </summary>
            <param name="n">The arity of the constructor function.</param>
            <param name="Fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.ConstructN(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type. The arity of the functionreturned is specified to allow using variadic constructor functions.
            <para />
            sig: Number -> (* -> {*}) -> (* -> {*})
            </summary>
            <param name="n">The arity of the constructor function.</param>
            <param name="Fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.ConstructN(System.Int32,System.Object)">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type. The arity of the functionreturned is specified to allow using variadic constructor functions.
            <para />
            sig: Number -> (* -> {*}) -> (* -> {*})
            </summary>
            <param name="n">The arity of the constructor function.</param>
            <param name="Fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.ConstructN(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type. The arity of the functionreturned is specified to allow using variadic constructor functions.
            <para />
            sig: Number -> (* -> {*}) -> (* -> {*})
            </summary>
            <param name="n">The arity of the constructor function.</param>
            <param name="Fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.ConstructN``1(System.Int32)">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type. The arity of the functionreturned is specified to allow using variadic constructor functions.
            <para />
            sig: Number -> (* -> {*}) -> (* -> {*})
            </summary>
            <param name="n">The arity of the constructor function.</param>
            <param name="Fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.ConstructN``1(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Wraps a constructor function inside a curried function that can be calledwith the same arguments and returns the same type. The arity of the functionreturned is specified to allow using variadic constructor functions.
            <para />
            sig: Number -> (* -> {*}) -> (* -> {*})
            </summary>
            <param name="n">The arity of the constructor function.</param>
            <param name="Fn">The constructor function to wrap.</param>
            <returns>A wrapped, curried constructor function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Contains``1(``0,System.Collections.Generic.IList{``0})">
            <summary>
            Returns `true` if the specified value is equal, in `R.equals` terms, to atleast one element of the given list; `false` otherwise.
            <para />
            sig: a -> [a] -> Boolean
            </summary>
            <param name="a">The item to compare against.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if an equivalent item is in the list, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Contains``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns `true` if the specified value is equal, in `R.equals` terms, to atleast one element of the given list; `false` otherwise.
            <para />
            sig: a -> [a] -> Boolean
            </summary>
            <param name="a">The item to compare against.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if an equivalent item is in the list, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Contains``1(``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified value is equal, in `R.equals` terms, to atleast one element of the given list; `false` otherwise.
            <para />
            sig: a -> [a] -> Boolean
            </summary>
            <param name="a">The item to compare against.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if an equivalent item is in the list, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Contains(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified value is equal, in `R.equals` terms, to atleast one element of the given list; `false` otherwise.
            <para />
            sig: a -> [a] -> Boolean
            </summary>
            <param name="a">The item to compare against.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if an equivalent item is in the list, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Converge(System.Delegate,System.Collections.Generic.IList{System.Delegate})">
            <summary>
            Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="after">A function. `after` will be invoked with the return values of       `fn1` and `fn2` as its arguments.</param>
            <param name="functions">A list of functions.</param>
            <returns>A new function.</returns>
            <see cref="M:Ramda.NET.R.UseWith(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{System.Object})"/>
        </member>
        <member name="M:Ramda.NET.R.Converge(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{System.Delegate})">
            <summary>
            Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="after">A function. `after` will be invoked with the return values of       `fn1` and `fn2` as its arguments.</param>
            <param name="functions">A list of functions.</param>
            <returns>A new function.</returns>
            <see cref="M:Ramda.NET.R.UseWith(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{System.Object})"/>
        </member>
        <member name="M:Ramda.NET.R.Converge(System.Delegate,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="after">A function. `after` will be invoked with the return values of       `fn1` and `fn2` as its arguments.</param>
            <param name="functions">A list of functions.</param>
            <returns>A new function.</returns>
            <see cref="M:Ramda.NET.R.UseWith(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{System.Object})"/>
        </member>
        <member name="M:Ramda.NET.R.Converge(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="after">A function. `after` will be invoked with the return values of       `fn1` and `fn2` as its arguments.</param>
            <param name="functions">A list of functions.</param>
            <returns>A new function.</returns>
            <see cref="M:Ramda.NET.R.UseWith(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{System.Object})"/>
        </member>
        <member name="M:Ramda.NET.R.Converge(System.Object,System.Collections.Generic.IList{System.Delegate})">
            <summary>
            Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="after">A function. `after` will be invoked with the return values of       `fn1` and `fn2` as its arguments.</param>
            <param name="functions">A list of functions.</param>
            <returns>A new function.</returns>
            <see cref="M:Ramda.NET.R.UseWith(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{System.Object})"/>
        </member>
        <member name="M:Ramda.NET.R.Converge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="after">A function. `after` will be invoked with the return values of       `fn1` and `fn2` as its arguments.</param>
            <param name="functions">A list of functions.</param>
            <returns>A new function.</returns>
            <see cref="M:Ramda.NET.R.UseWith(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{System.Object})"/>
        </member>
        <member name="M:Ramda.NET.R.Converge(System.Delegate,System.Collections.Generic.IList{System.Object})">
            <summary>
            Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="after">A function. `after` will be invoked with the return values of       `fn1` and `fn2` as its arguments.</param>
            <param name="functions">A list of functions.</param>
            <returns>A new function.</returns>
            <see cref="M:Ramda.NET.R.UseWith(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{System.Object})"/>
        </member>
        <member name="M:Ramda.NET.R.Converge(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{System.Object})">
            <summary>
            Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="after">A function. `after` will be invoked with the return values of       `fn1` and `fn2` as its arguments.</param>
            <param name="functions">A list of functions.</param>
            <returns>A new function.</returns>
            <see cref="M:Ramda.NET.R.UseWith(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{System.Object})"/>
        </member>
        <member name="M:Ramda.NET.R.CountBy``1(System.Func{``0,System.String},System.Collections.Generic.IList{``0})">
            <summary>
            Counts the elements of a list according to how many match each value of akey generated by the supplied function. Returns an object mapping the keysproduced by `fn` to the number of occurrences in the list. Note that allkeys are coerced to strings because of how JavaScript objects work.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {*}
            </summary>
            <param name="fn">The function used to map values to keys.</param>
            <param name="list">The list to count elements from.</param>
            <returns>An object mapping keys to number of occurrences in the list.</returns>
        </member>
        <member name="M:Ramda.NET.R.CountBy``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Counts the elements of a list according to how many match each value of akey generated by the supplied function. Returns an object mapping the keysproduced by `fn` to the number of occurrences in the list. Note that allkeys are coerced to strings because of how JavaScript objects work.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {*}
            </summary>
            <param name="fn">The function used to map values to keys.</param>
            <param name="list">The list to count elements from.</param>
            <returns>An object mapping keys to number of occurrences in the list.</returns>
        </member>
        <member name="M:Ramda.NET.R.CountBy``1(System.Func{``0,System.String},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Counts the elements of a list according to how many match each value of akey generated by the supplied function. Returns an object mapping the keysproduced by `fn` to the number of occurrences in the list. Note that allkeys are coerced to strings because of how JavaScript objects work.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {*}
            </summary>
            <param name="fn">The function used to map values to keys.</param>
            <param name="list">The list to count elements from.</param>
            <returns>An object mapping keys to number of occurrences in the list.</returns>
        </member>
        <member name="M:Ramda.NET.R.CountBy(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Counts the elements of a list according to how many match each value of akey generated by the supplied function. Returns an object mapping the keysproduced by `fn` to the number of occurrences in the list. Note that allkeys are coerced to strings because of how JavaScript objects work.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {*}
            </summary>
            <param name="fn">The function used to map values to keys.</param>
            <param name="list">The list to count elements from.</param>
            <returns>An object mapping keys to number of occurrences in the list.</returns>
        </member>
        <member name="M:Ramda.NET.R.CountBy``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Counts the elements of a list according to how many match each value of akey generated by the supplied function. Returns an object mapping the keysproduced by `fn` to the number of occurrences in the list. Note that allkeys are coerced to strings because of how JavaScript objects work.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {*}
            </summary>
            <param name="fn">The function used to map values to keys.</param>
            <param name="list">The list to count elements from.</param>
            <returns>An object mapping keys to number of occurrences in the list.</returns>
        </member>
        <member name="M:Ramda.NET.R.CountBy(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Counts the elements of a list according to how many match each value of akey generated by the supplied function. Returns an object mapping the keysproduced by `fn` to the number of occurrences in the list. Note that allkeys are coerced to strings because of how JavaScript objects work.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {*}
            </summary>
            <param name="fn">The function used to map values to keys.</param>
            <param name="list">The list to count elements from.</param>
            <returns>An object mapping keys to number of occurrences in the list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Curry(System.Delegate)">
            <summary>
            Returns a curried equivalent of the provided function. The curried functionhas two unusual capabilities. First, its arguments needn't be provided oneat a time. If `f` is a ternary function and `g` is `R.curry(f)`, thefollowing are equivalent:  - `g(1)(2)(3)`  - `g(1)(2, 3)`  - `g(1, 2)(3)`  - `g(1, 2, 3)`Secondly, the special placeholder value `R.__` may be used to specify"gaps", allowing partial application of any combination of arguments,regardless of their positions. If `g` is as above and `_` is `R.__`, thefollowing are equivalent:  - `g(1, 2, 3)`  - `g(_, 2, 3)(1)`  - `g(_, _, 3)(1)(2)`  - `g(_, _, 3)(1, 2)`  - `g(_, 2)(1)(3)`  - `g(_, 2)(1, 3)`  - `g(_, 2)(_, 3)(1)`
            <para />
            sig: (* -> a) -> (* -> a)
            </summary>
            <param name="fn">The function to curry.</param>
            <returns>A new, curried function.</returns>
            <see cref="M:Ramda.NET.R.CurryN(System.Int32,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Curry(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a curried equivalent of the provided function. The curried functionhas two unusual capabilities. First, its arguments needn't be provided oneat a time. If `f` is a ternary function and `g` is `R.curry(f)`, thefollowing are equivalent:  - `g(1)(2)(3)`  - `g(1)(2, 3)`  - `g(1, 2)(3)`  - `g(1, 2, 3)`Secondly, the special placeholder value `R.__` may be used to specify"gaps", allowing partial application of any combination of arguments,regardless of their positions. If `g` is as above and `_` is `R.__`, thefollowing are equivalent:  - `g(1, 2, 3)`  - `g(_, 2, 3)(1)`  - `g(_, _, 3)(1)(2)`  - `g(_, _, 3)(1, 2)`  - `g(_, 2)(1)(3)`  - `g(_, 2)(1, 3)`  - `g(_, 2)(_, 3)(1)`
            <para />
            sig: (* -> a) -> (* -> a)
            </summary>
            <param name="fn">The function to curry.</param>
            <returns>A new, curried function.</returns>
            <see cref="M:Ramda.NET.R.CurryN(System.Int32,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Curry(System.Object)">
            <summary>
            Returns a curried equivalent of the provided function. The curried functionhas two unusual capabilities. First, its arguments needn't be provided oneat a time. If `f` is a ternary function and `g` is `R.curry(f)`, thefollowing are equivalent:  - `g(1)(2)(3)`  - `g(1)(2, 3)`  - `g(1, 2)(3)`  - `g(1, 2, 3)`Secondly, the special placeholder value `R.__` may be used to specify"gaps", allowing partial application of any combination of arguments,regardless of their positions. If `g` is as above and `_` is `R.__`, thefollowing are equivalent:  - `g(1, 2, 3)`  - `g(_, 2, 3)(1)`  - `g(_, _, 3)(1)(2)`  - `g(_, _, 3)(1, 2)`  - `g(_, 2)(1)(3)`  - `g(_, 2)(1, 3)`  - `g(_, 2)(_, 3)(1)`
            <para />
            sig: (* -> a) -> (* -> a)
            </summary>
            <param name="fn">The function to curry.</param>
            <returns>A new, curried function.</returns>
            <see cref="M:Ramda.NET.R.CurryN(System.Int32,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.CurryN(System.Int32,System.Delegate)">
            <summary>
            Returns a curried equivalent of the provided function, with the specifiedarity. The curried function has two unusual capabilities. First, itsarguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, thefollowing are equivalent:  - `g(1)(2)(3)`  - `g(1)(2, 3)`  - `g(1, 2)(3)`  - `g(1, 2, 3)`Secondly, the special placeholder value `R.__` may be used to specify"gaps", allowing partial application of any combination of arguments,regardless of their positions. If `g` is as above and `_` is `R.__`, thefollowing are equivalent:  - `g(1, 2, 3)`  - `g(_, 2, 3)(1)`  - `g(_, _, 3)(1)(2)`  - `g(_, _, 3)(1, 2)`  - `g(_, 2)(1)(3)`  - `g(_, 2)(1, 3)`  - `g(_, 2)(_, 3)(1)`
            <para />
            sig: Number -> (* -> a) -> (* -> a)
            </summary>
            <param name="length">The arity for the returned function.</param>
            <param name="fn">The function to curry.</param>
            <returns>A new, curried function.</returns>
            <see cref="M:Ramda.NET.R.Curry(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.CurryN(Ramda.NET.RamdaPlaceholder,System.Delegate)">
            <summary>
            Returns a curried equivalent of the provided function, with the specifiedarity. The curried function has two unusual capabilities. First, itsarguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, thefollowing are equivalent:  - `g(1)(2)(3)`  - `g(1)(2, 3)`  - `g(1, 2)(3)`  - `g(1, 2, 3)`Secondly, the special placeholder value `R.__` may be used to specify"gaps", allowing partial application of any combination of arguments,regardless of their positions. If `g` is as above and `_` is `R.__`, thefollowing are equivalent:  - `g(1, 2, 3)`  - `g(_, 2, 3)(1)`  - `g(_, _, 3)(1)(2)`  - `g(_, _, 3)(1, 2)`  - `g(_, 2)(1)(3)`  - `g(_, 2)(1, 3)`  - `g(_, 2)(_, 3)(1)`
            <para />
            sig: Number -> (* -> a) -> (* -> a)
            </summary>
            <param name="length">The arity for the returned function.</param>
            <param name="fn">The function to curry.</param>
            <returns>A new, curried function.</returns>
            <see cref="M:Ramda.NET.R.Curry(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.CurryN(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a curried equivalent of the provided function, with the specifiedarity. The curried function has two unusual capabilities. First, itsarguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, thefollowing are equivalent:  - `g(1)(2)(3)`  - `g(1)(2, 3)`  - `g(1, 2)(3)`  - `g(1, 2, 3)`Secondly, the special placeholder value `R.__` may be used to specify"gaps", allowing partial application of any combination of arguments,regardless of their positions. If `g` is as above and `_` is `R.__`, thefollowing are equivalent:  - `g(1, 2, 3)`  - `g(_, 2, 3)(1)`  - `g(_, _, 3)(1)(2)`  - `g(_, _, 3)(1, 2)`  - `g(_, 2)(1)(3)`  - `g(_, 2)(1, 3)`  - `g(_, 2)(_, 3)(1)`
            <para />
            sig: Number -> (* -> a) -> (* -> a)
            </summary>
            <param name="length">The arity for the returned function.</param>
            <param name="fn">The function to curry.</param>
            <returns>A new, curried function.</returns>
            <see cref="M:Ramda.NET.R.Curry(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.CurryN(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Returns a curried equivalent of the provided function, with the specifiedarity. The curried function has two unusual capabilities. First, itsarguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, thefollowing are equivalent:  - `g(1)(2)(3)`  - `g(1)(2, 3)`  - `g(1, 2)(3)`  - `g(1, 2, 3)`Secondly, the special placeholder value `R.__` may be used to specify"gaps", allowing partial application of any combination of arguments,regardless of their positions. If `g` is as above and `_` is `R.__`, thefollowing are equivalent:  - `g(1, 2, 3)`  - `g(_, 2, 3)(1)`  - `g(_, _, 3)(1)(2)`  - `g(_, _, 3)(1, 2)`  - `g(_, 2)(1)(3)`  - `g(_, 2)(1, 3)`  - `g(_, 2)(_, 3)(1)`
            <para />
            sig: Number -> (* -> a) -> (* -> a)
            </summary>
            <param name="length">The arity for the returned function.</param>
            <param name="fn">The function to curry.</param>
            <returns>A new, curried function.</returns>
            <see cref="M:Ramda.NET.R.Curry(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.CurryN(System.Int32,System.Object)">
            <summary>
            Returns a curried equivalent of the provided function, with the specifiedarity. The curried function has two unusual capabilities. First, itsarguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, thefollowing are equivalent:  - `g(1)(2)(3)`  - `g(1)(2, 3)`  - `g(1, 2)(3)`  - `g(1, 2, 3)`Secondly, the special placeholder value `R.__` may be used to specify"gaps", allowing partial application of any combination of arguments,regardless of their positions. If `g` is as above and `_` is `R.__`, thefollowing are equivalent:  - `g(1, 2, 3)`  - `g(_, 2, 3)(1)`  - `g(_, _, 3)(1)(2)`  - `g(_, _, 3)(1, 2)`  - `g(_, 2)(1)(3)`  - `g(_, 2)(1, 3)`  - `g(_, 2)(_, 3)(1)`
            <para />
            sig: Number -> (* -> a) -> (* -> a)
            </summary>
            <param name="length">The arity for the returned function.</param>
            <param name="fn">The function to curry.</param>
            <returns>A new, curried function.</returns>
            <see cref="M:Ramda.NET.R.Curry(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.CurryN(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a curried equivalent of the provided function, with the specifiedarity. The curried function has two unusual capabilities. First, itsarguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, thefollowing are equivalent:  - `g(1)(2)(3)`  - `g(1)(2, 3)`  - `g(1, 2)(3)`  - `g(1, 2, 3)`Secondly, the special placeholder value `R.__` may be used to specify"gaps", allowing partial application of any combination of arguments,regardless of their positions. If `g` is as above and `_` is `R.__`, thefollowing are equivalent:  - `g(1, 2, 3)`  - `g(_, 2, 3)(1)`  - `g(_, _, 3)(1)(2)`  - `g(_, _, 3)(1, 2)`  - `g(_, 2)(1)(3)`  - `g(_, 2)(1, 3)`  - `g(_, 2)(_, 3)(1)`
            <para />
            sig: Number -> (* -> a) -> (* -> a)
            </summary>
            <param name="length">The arity for the returned function.</param>
            <param name="fn">The function to curry.</param>
            <returns>A new, curried function.</returns>
            <see cref="M:Ramda.NET.R.Curry(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Dec(System.Double)">
            <summary>
            Decrements its argument.
            <para />
            sig: Number -> Number
            </summary>
            <param name="n">first</param>
            <returns>n - 1</returns>
            <see cref="M:Ramda.NET.R.Inc(System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Dec(System.Int32)">
            <summary>
            Decrements its argument.
            <para />
            sig: Number -> Number
            </summary>
            <param name="n">first</param>
            <returns>n - 1</returns>
            <see cref="M:Ramda.NET.R.Inc(System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Dec(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Decrements its argument.
            <para />
            sig: Number -> Number
            </summary>
            <param name="n">first</param>
            <returns>n - 1</returns>
            <see cref="M:Ramda.NET.R.Inc(System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.DefaultTo``2(``0,``1)">
            <summary>
            Returns the second argument if it is not `null`, `undefined` or `NaN`otherwise the first argument is returned.
            <para />
            sig: a -> b -> a | b
            </summary>
            <param name="default">The default value.</param>
            <param name="val">`val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.</param>
            <returns>The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value</returns>
        </member>
        <member name="M:Ramda.NET.R.DefaultTo``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns the second argument if it is not `null`, `undefined` or `NaN`otherwise the first argument is returned.
            <para />
            sig: a -> b -> a | b
            </summary>
            <param name="default">The default value.</param>
            <param name="val">`val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.</param>
            <returns>The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value</returns>
        </member>
        <member name="M:Ramda.NET.R.DefaultTo``1(``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the second argument if it is not `null`, `undefined` or `NaN`otherwise the first argument is returned.
            <para />
            sig: a -> b -> a | b
            </summary>
            <param name="default">The default value.</param>
            <param name="val">`val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.</param>
            <returns>The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value</returns>
        </member>
        <member name="M:Ramda.NET.R.DefaultTo(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the second argument if it is not `null`, `undefined` or `NaN`otherwise the first argument is returned.
            <para />
            sig: a -> b -> a | b
            </summary>
            <param name="default">The default value.</param>
            <param name="val">`val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.</param>
            <returns>The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value</returns>
        </member>
        <member name="M:Ramda.NET.R.Descend``1(System.Func{``0,System.Int32},``0,``0)">
            <summary>
            Makes a descending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[>]]> fn(b), `1` if fn(b) <![CDATA[>]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Descend``1(Ramda.NET.RamdaPlaceholder,``0,``0)">
            <summary>
            Makes a descending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[>]]> fn(b), `1` if fn(b) <![CDATA[>]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Descend``1(System.Func{``0,System.Int32},Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Makes a descending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[>]]> fn(b), `1` if fn(b) <![CDATA[>]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Descend``1(System.Func{``0,System.Int32},``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes a descending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[>]]> fn(b), `1` if fn(b) <![CDATA[>]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Descend``1(System.Func{``0,System.Int32},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes a descending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[>]]> fn(b), `1` if fn(b) <![CDATA[>]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Descend``1(System.Object,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Makes a descending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[>]]> fn(b), `1` if fn(b) <![CDATA[>]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Descend``1(System.Object,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes a descending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[>]]> fn(b), `1` if fn(b) <![CDATA[>]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Descend(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes a descending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[>]]> fn(b), `1` if fn(b) <![CDATA[>]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Descend``1(System.Object,``0,``0)">
            <summary>
            Makes a descending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[>]]> fn(b), `1` if fn(b) <![CDATA[>]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Descend(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes a descending comparator function out of a function that returns a valuethat can be compared with `<![CDATA[<]]>` and `<![CDATA[>]]>`.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> Number
            </summary>
            <param name="fn">A function of arity one that returns a value that can be compared</param>
            <param name="a">The first item to be compared.</param>
            <param name="b">The second item to be compared.</param>
            <returns>`-1` if fn(a) <![CDATA[>]]> fn(b), `1` if fn(b) <![CDATA[>]]> fn(a), otherwise `0`</returns>
        </member>
        <member name="M:Ramda.NET.R.Difference``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Objects and Arrays are compared are comparedin terms of value equality, not reference equality.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` that are not in `list2`.</returns>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Difference``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Objects and Arrays are compared are comparedin terms of value equality, not reference equality.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` that are not in `list2`.</returns>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Difference``1(System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Objects and Arrays are compared are comparedin terms of value equality, not reference equality.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` that are not in `list2`.</returns>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Objects and Arrays are compared are comparedin terms of value equality, not reference equality.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` that are not in `list2`.</returns>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DifferenceWith``1(System.Func{``0,``0,System.Boolean},System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` that are not in `list2`.</returns>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DifferenceWith``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` that are not in `list2`.</returns>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DifferenceWith``1(System.Func{``0,``0,System.Boolean},Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` that are not in `list2`.</returns>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DifferenceWith``1(System.Func{``0,``0,System.Boolean},System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` that are not in `list2`.</returns>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DifferenceWith``1(System.Func{``0,``0,System.Boolean},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` that are not in `list2`.</returns>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DifferenceWith``1(System.Object,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` that are not in `list2`.</returns>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DifferenceWith``1(System.Object,System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` that are not in `list2`.</returns>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` that are not in `list2`.</returns>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DifferenceWith``1(System.Object,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` that are not in `list2`.</returns>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DifferenceWith(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Finds the set (i.e. no duplicates) of all elements in the first list notcontained in the second list. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` that are not in `list2`.</returns>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Dissoc``1(System.String,``0)">
            <summary>
            Returns a new object that does not contain a `prop` property.
            <para />
            sig: String -> {k: v} -> {k: v}
            </summary>
            <param name="prop">The name of the property to dissociate</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original but without the specified property</returns>
            <see cref="M:Ramda.NET.R.Assoc(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Dissoc``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns a new object that does not contain a `prop` property.
            <para />
            sig: String -> {k: v} -> {k: v}
            </summary>
            <param name="prop">The name of the property to dissociate</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original but without the specified property</returns>
            <see cref="M:Ramda.NET.R.Assoc(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Dissoc(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new object that does not contain a `prop` property.
            <para />
            sig: String -> {k: v} -> {k: v}
            </summary>
            <param name="prop">The name of the property to dissociate</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original but without the specified property</returns>
            <see cref="M:Ramda.NET.R.Assoc(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Dissoc(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new object that does not contain a `prop` property.
            <para />
            sig: String -> {k: v} -> {k: v}
            </summary>
            <param name="prop">The name of the property to dissociate</param>
            <param name="obj">The object to clone</param>
            <returns>A new object equivalent to the original but without the specified property</returns>
            <see cref="M:Ramda.NET.R.Assoc(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DissocPath``1(System.Collections.Generic.IList{System.String},``0)">
            <summary>
            Makes a shallow clone of an object, omitting the property at the given path.Note that this copies and flattens prototype properties onto the new objectas well. All non-primitive properties are copied by reference.
            <para />
            sig: [String] -> {k: v} -> {k: v}
            </summary>
            <param name="path">The path to the value to omit</param>
            <param name="obj">The object to clone</param>
            <returns>A new object without the property at path</returns>
            <see cref="M:Ramda.NET.R.AssocPath(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DissocPath``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Makes a shallow clone of an object, omitting the property at the given path.Note that this copies and flattens prototype properties onto the new objectas well. All non-primitive properties are copied by reference.
            <para />
            sig: [String] -> {k: v} -> {k: v}
            </summary>
            <param name="path">The path to the value to omit</param>
            <param name="obj">The object to clone</param>
            <returns>A new object without the property at path</returns>
            <see cref="M:Ramda.NET.R.AssocPath(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DissocPath(System.Collections.Generic.IList{System.String},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes a shallow clone of an object, omitting the property at the given path.Note that this copies and flattens prototype properties onto the new objectas well. All non-primitive properties are copied by reference.
            <para />
            sig: [String] -> {k: v} -> {k: v}
            </summary>
            <param name="path">The path to the value to omit</param>
            <param name="obj">The object to clone</param>
            <returns>A new object without the property at path</returns>
            <see cref="M:Ramda.NET.R.AssocPath(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DissocPath(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Makes a shallow clone of an object, omitting the property at the given path.Note that this copies and flattens prototype properties onto the new objectas well. All non-primitive properties are copied by reference.
            <para />
            sig: [String] -> {k: v} -> {k: v}
            </summary>
            <param name="path">The path to the value to omit</param>
            <param name="obj">The object to clone</param>
            <returns>A new object without the property at path</returns>
            <see cref="M:Ramda.NET.R.AssocPath(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Divide(System.Double,System.Double)">
            <summary>
            Divides two numbers. Equivalent to `a / b`.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a / b`.</returns>
            <see cref="M:Ramda.NET.R.Multiply(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Divide(Ramda.NET.RamdaPlaceholder,System.Double)">
            <summary>
            Divides two numbers. Equivalent to `a / b`.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a / b`.</returns>
            <see cref="M:Ramda.NET.R.Multiply(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Divide(System.Double,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Divides two numbers. Equivalent to `a / b`.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a / b`.</returns>
            <see cref="M:Ramda.NET.R.Multiply(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Divide(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Divides two numbers. Equivalent to `a / b`.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a / b`.</returns>
            <see cref="M:Ramda.NET.R.Multiply(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Divide(System.Int32,System.Int32)">
            <summary>
            Divides two numbers. Equivalent to `a / b`.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a / b`.</returns>
            <see cref="M:Ramda.NET.R.Multiply(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Divide(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Divides two numbers. Equivalent to `a / b`.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a / b`.</returns>
            <see cref="M:Ramda.NET.R.Multiply(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Divide(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Divides two numbers. Equivalent to `a / b`.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a / b`.</returns>
            <see cref="M:Ramda.NET.R.Multiply(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Drop``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns all but the first `n` elements of the given list, string, ortransducer/transformer (or object with a `drop` method).Dispatches to the `drop` method of the second argument, if present.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>A copy of list without the first `n` elements</returns>
            <see cref="M:Ramda.NET.R.Take(System.Int32,System.String)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropLast(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Drop``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns all but the first `n` elements of the given list, string, ortransducer/transformer (or object with a `drop` method).Dispatches to the `drop` method of the second argument, if present.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>A copy of list without the first `n` elements</returns>
            <see cref="M:Ramda.NET.R.Take(System.Int32,System.String)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropLast(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns all but the first `n` elements of the given list, string, ortransducer/transformer (or object with a `drop` method).Dispatches to the `drop` method of the second argument, if present.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>A copy of list without the first `n` elements</returns>
            <see cref="M:Ramda.NET.R.Take(System.Int32,System.String)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropLast(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Drop(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns all but the first `n` elements of the given list, string, ortransducer/transformer (or object with a `drop` method).Dispatches to the `drop` method of the second argument, if present.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>A copy of list without the first `n` elements</returns>
            <see cref="M:Ramda.NET.R.Take(System.Int32,System.String)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropLast(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropLast``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a list containing all but the last `n` elements of the given `list`.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">The number of elements of `list` to skip.</param>
            <param name="list">The list of elements to consider.</param>
            <returns>A copy of the list with only the first `list.length - n` elements</returns>
            <see cref="M:Ramda.NET.R.TakeLast(System.Int32,System.String)"/>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropLastWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropLast``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a list containing all but the last `n` elements of the given `list`.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">The number of elements of `list` to skip.</param>
            <param name="list">The list of elements to consider.</param>
            <returns>A copy of the list with only the first `list.length - n` elements</returns>
            <see cref="M:Ramda.NET.R.TakeLast(System.Int32,System.String)"/>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropLastWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropLast(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a list containing all but the last `n` elements of the given `list`.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">The number of elements of `list` to skip.</param>
            <param name="list">The list of elements to consider.</param>
            <returns>A copy of the list with only the first `list.length - n` elements</returns>
            <see cref="M:Ramda.NET.R.TakeLast(System.Int32,System.String)"/>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropLastWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropLast(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a list containing all but the last `n` elements of the given `list`.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">The number of elements of `list` to skip.</param>
            <param name="list">The list of elements to consider.</param>
            <returns>A copy of the list with only the first `list.length - n` elements</returns>
            <see cref="M:Ramda.NET.R.TakeLast(System.Int32,System.String)"/>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropLastWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropLastWhile``1(System.Func{``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list excluding all the tailing elements of a given list whichsatisfy the supplied predicate function. It passes each value from the rightto the supplied predicate function, skipping elements until the predicatefunction returns a `falsy` value. The predicate function is applied to one argument:*(value)*.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="predicate">The function to be called on each element</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array without any trailing elements that return `falsy` values from the `predicate`.</returns>
            <see cref="M:Ramda.NET.R.TakeLastWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropLastWhile``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list excluding all the tailing elements of a given list whichsatisfy the supplied predicate function. It passes each value from the rightto the supplied predicate function, skipping elements until the predicatefunction returns a `falsy` value. The predicate function is applied to one argument:*(value)*.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="predicate">The function to be called on each element</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array without any trailing elements that return `falsy` values from the `predicate`.</returns>
            <see cref="M:Ramda.NET.R.TakeLastWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropLastWhile``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list excluding all the tailing elements of a given list whichsatisfy the supplied predicate function. It passes each value from the rightto the supplied predicate function, skipping elements until the predicatefunction returns a `falsy` value. The predicate function is applied to one argument:*(value)*.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="predicate">The function to be called on each element</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array without any trailing elements that return `falsy` values from the `predicate`.</returns>
            <see cref="M:Ramda.NET.R.TakeLastWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropLastWhile(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list excluding all the tailing elements of a given list whichsatisfy the supplied predicate function. It passes each value from the rightto the supplied predicate function, skipping elements until the predicatefunction returns a `falsy` value. The predicate function is applied to one argument:*(value)*.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="predicate">The function to be called on each element</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array without any trailing elements that return `falsy` values from the `predicate`.</returns>
            <see cref="M:Ramda.NET.R.TakeLastWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropLastWhile``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list excluding all the tailing elements of a given list whichsatisfy the supplied predicate function. It passes each value from the rightto the supplied predicate function, skipping elements until the predicatefunction returns a `falsy` value. The predicate function is applied to one argument:*(value)*.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="predicate">The function to be called on each element</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array without any trailing elements that return `falsy` values from the `predicate`.</returns>
            <see cref="M:Ramda.NET.R.TakeLastWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropLastWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list excluding all the tailing elements of a given list whichsatisfy the supplied predicate function. It passes each value from the rightto the supplied predicate function, skipping elements until the predicatefunction returns a `falsy` value. The predicate function is applied to one argument:*(value)*.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="predicate">The function to be called on each element</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array without any trailing elements that return `falsy` values from the `predicate`.</returns>
            <see cref="M:Ramda.NET.R.TakeLastWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropRepeats``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list without any consecutively repeating elements. `R.equals`is used to determine equality.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: [a] -> [a]
            </summary>
            <param name="list">The array to consider.</param>
            <returns>`list` without repeating elements.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropRepeats(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list without any consecutively repeating elements. `R.equals`is used to determine equality.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: [a] -> [a]
            </summary>
            <param name="list">The array to consider.</param>
            <returns>`list` without repeating elements.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropRepeatsWith``1(System.Func{``0,``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list without any consecutively repeating elements. Equality isdetermined by applying the supplied predicate to each pair of consecutive elements. Thefirst element in a series of equal elements will be preserved.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a, a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list">The array to consider.</param>
            <returns>`list` without repeating elements.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropRepeatsWith``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list without any consecutively repeating elements. Equality isdetermined by applying the supplied predicate to each pair of consecutive elements. Thefirst element in a series of equal elements will be preserved.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a, a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list">The array to consider.</param>
            <returns>`list` without repeating elements.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropRepeatsWith``1(System.Func{``0,``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list without any consecutively repeating elements. Equality isdetermined by applying the supplied predicate to each pair of consecutive elements. Thefirst element in a series of equal elements will be preserved.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a, a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list">The array to consider.</param>
            <returns>`list` without repeating elements.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropRepeatsWith(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list without any consecutively repeating elements. Equality isdetermined by applying the supplied predicate to each pair of consecutive elements. Thefirst element in a series of equal elements will be preserved.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a, a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list">The array to consider.</param>
            <returns>`list` without repeating elements.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropRepeatsWith``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list without any consecutively repeating elements. Equality isdetermined by applying the supplied predicate to each pair of consecutive elements. Thefirst element in a series of equal elements will be preserved.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a, a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list">The array to consider.</param>
            <returns>`list` without repeating elements.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropRepeatsWith(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list without any consecutively repeating elements. Equality isdetermined by applying the supplied predicate to each pair of consecutive elements. Thefirst element in a series of equal elements will be preserved.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a, a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list">The array to consider.</param>
            <returns>`list` without repeating elements.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.DropWhile``1(System.Func{``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list excluding the leading elements of a given list whichsatisfy the supplied predicate function. It passes each value to the suppliedpredicate function, skipping elements while the predicate function returns`true`. The predicate function is applied to one argument: *(value)*.Dispatches to the `dropWhile` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="fn">The function called per iteration.</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.TakeWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.DropWhile``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list excluding the leading elements of a given list whichsatisfy the supplied predicate function. It passes each value to the suppliedpredicate function, skipping elements while the predicate function returns`true`. The predicate function is applied to one argument: *(value)*.Dispatches to the `dropWhile` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="fn">The function called per iteration.</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.TakeWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.DropWhile``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list excluding the leading elements of a given list whichsatisfy the supplied predicate function. It passes each value to the suppliedpredicate function, skipping elements while the predicate function returns`true`. The predicate function is applied to one argument: *(value)*.Dispatches to the `dropWhile` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="fn">The function called per iteration.</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.TakeWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list excluding the leading elements of a given list whichsatisfy the supplied predicate function. It passes each value to the suppliedpredicate function, skipping elements while the predicate function returns`true`. The predicate function is applied to one argument: *(value)*.Dispatches to the `dropWhile` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="fn">The function called per iteration.</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.TakeWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.DropWhile``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list excluding the leading elements of a given list whichsatisfy the supplied predicate function. It passes each value to the suppliedpredicate function, skipping elements while the predicate function returns`true`. The predicate function is applied to one argument: *(value)*.Dispatches to the `dropWhile` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="fn">The function called per iteration.</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.TakeWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.DropWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list excluding the leading elements of a given list whichsatisfy the supplied predicate function. It passes each value to the suppliedpredicate function, skipping elements while the predicate function returns`true`. The predicate function is applied to one argument: *(value)*.Dispatches to the `dropWhile` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="fn">The function called per iteration.</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.TakeWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Either(System.Delegate,System.Delegate)">
            <summary>
            A function wrapping calls to the two functions in an `||` operation,returning the result of the first function if it is truth-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns atruth-y value.In addition to functions, `R.either` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">a predicate</param>
            <param name="g">another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `||`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.Or(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Either(System.Object,System.Delegate)">
            <summary>
            A function wrapping calls to the two functions in an `||` operation,returning the result of the first function if it is truth-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns atruth-y value.In addition to functions, `R.either` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">a predicate</param>
            <param name="g">another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `||`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.Or(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Either(System.Delegate,System.Object)">
            <summary>
            A function wrapping calls to the two functions in an `||` operation,returning the result of the first function if it is truth-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns atruth-y value.In addition to functions, `R.either` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">a predicate</param>
            <param name="g">another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `||`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.Or(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Either(System.Object,System.Object)">
            <summary>
            A function wrapping calls to the two functions in an `||` operation,returning the result of the first function if it is truth-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns atruth-y value.In addition to functions, `R.either` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">a predicate</param>
            <param name="g">another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `||`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.Or(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Either``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            A function wrapping calls to the two functions in an `||` operation,returning the result of the first function if it is truth-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns atruth-y value.In addition to functions, `R.either` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">a predicate</param>
            <param name="g">another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `||`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.Or(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Either``1(Ramda.NET.RamdaPlaceholder,System.Func{``0,System.Boolean})">
            <summary>
            A function wrapping calls to the two functions in an `||` operation,returning the result of the first function if it is truth-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns atruth-y value.In addition to functions, `R.either` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">a predicate</param>
            <param name="g">another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `||`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.Or(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Either``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            A function wrapping calls to the two functions in an `||` operation,returning the result of the first function if it is truth-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns atruth-y value.In addition to functions, `R.either` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">a predicate</param>
            <param name="g">another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `||`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.Or(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Either(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            A function wrapping calls to the two functions in an `||` operation,returning the result of the first function if it is truth-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns atruth-y value.In addition to functions, `R.either` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">a predicate</param>
            <param name="g">another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `||`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.Or(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Either(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            A function wrapping calls to the two functions in an `||` operation,returning the result of the first function if it is truth-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns atruth-y value.In addition to functions, `R.either` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">a predicate</param>
            <param name="g">another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `||`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.Or(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Either``1(System.Object,System.Func{``0,System.Boolean})">
            <summary>
            A function wrapping calls to the two functions in an `||` operation,returning the result of the first function if it is truth-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns atruth-y value.In addition to functions, `R.either` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">a predicate</param>
            <param name="g">another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `||`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.Or(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Either``1(System.Func{``0,System.Boolean},System.Object)">
            <summary>
            A function wrapping calls to the two functions in an `||` operation,returning the result of the first function if it is truth-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns atruth-y value.In addition to functions, `R.either` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">a predicate</param>
            <param name="g">another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `||`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.Or(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Either(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            A function wrapping calls to the two functions in an `||` operation,returning the result of the first function if it is truth-y and the resultof the second function otherwise. Note that this is short-circuited,meaning that the second function will not be invoked if the first returns atruth-y value.In addition to functions, `R.either` also accepts any fantasy-land compatibleapplicative functor.
            <para />
            sig: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
            </summary>
            <param name="f">a predicate</param>
            <param name="g">another predicate</param>
            <returns>a function that applies its arguments to `f` and `g` and `||`s their outputs together.</returns>
            <see cref="M:Ramda.NET.R.Or(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Empty``1(``0)">
            <summary>
            Returns the empty value of its argument's type. Ramda defines the emptyvalue of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Othertypes are supported if they define `<![CDATA[<]]>Type<![CDATA[>]]>.empty` and/or`<![CDATA[<]]>Type<![CDATA[>]]>.prototype.empty`.Dispatches to the `empty` method of the first argument, if present.
            <para />
            sig: a -> a
            </summary>
            <param name="x">first</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.Empty(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the empty value of its argument's type. Ramda defines the emptyvalue of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Othertypes are supported if they define `<![CDATA[<]]>Type<![CDATA[>]]>.empty` and/or`<![CDATA[<]]>Type<![CDATA[>]]>.prototype.empty`.Dispatches to the `empty` method of the first argument, if present.
            <para />
            sig: a -> a
            </summary>
            <param name="x">first</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.EqBy``1(System.Func{``0,``0},``0,``0)">
            <summary>
            Takes a function and two values in its domain and returns `true` if thevalues map to the same value in the codomain; `false` otherwise.
            <para />
            sig: (a -> b) -> a -> a -> Boolean
            </summary>
            <param name="f">first</param>
            <param name="x">second</param>
            <param name="y">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqBy``1(Ramda.NET.RamdaPlaceholder,``0,``0)">
            <summary>
            Takes a function and two values in its domain and returns `true` if thevalues map to the same value in the codomain; `false` otherwise.
            <para />
            sig: (a -> b) -> a -> a -> Boolean
            </summary>
            <param name="f">first</param>
            <param name="x">second</param>
            <param name="y">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqBy``1(System.Func{``0,``0},Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Takes a function and two values in its domain and returns `true` if thevalues map to the same value in the codomain; `false` otherwise.
            <para />
            sig: (a -> b) -> a -> a -> Boolean
            </summary>
            <param name="f">first</param>
            <param name="x">second</param>
            <param name="y">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqBy``1(System.Func{``0,``0},``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values in its domain and returns `true` if thevalues map to the same value in the codomain; `false` otherwise.
            <para />
            sig: (a -> b) -> a -> a -> Boolean
            </summary>
            <param name="f">first</param>
            <param name="x">second</param>
            <param name="y">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqBy``1(System.Func{``0,``0},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values in its domain and returns `true` if thevalues map to the same value in the codomain; `false` otherwise.
            <para />
            sig: (a -> b) -> a -> a -> Boolean
            </summary>
            <param name="f">first</param>
            <param name="x">second</param>
            <param name="y">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqBy``1(System.Object,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Takes a function and two values in its domain and returns `true` if thevalues map to the same value in the codomain; `false` otherwise.
            <para />
            sig: (a -> b) -> a -> a -> Boolean
            </summary>
            <param name="f">first</param>
            <param name="x">second</param>
            <param name="y">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqBy``1(System.Object,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values in its domain and returns `true` if thevalues map to the same value in the codomain; `false` otherwise.
            <para />
            sig: (a -> b) -> a -> a -> Boolean
            </summary>
            <param name="f">first</param>
            <param name="x">second</param>
            <param name="y">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values in its domain and returns `true` if thevalues map to the same value in the codomain; `false` otherwise.
            <para />
            sig: (a -> b) -> a -> a -> Boolean
            </summary>
            <param name="f">first</param>
            <param name="x">second</param>
            <param name="y">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqBy``1(System.Object,``0,``0)">
            <summary>
            Takes a function and two values in its domain and returns `true` if thevalues map to the same value in the codomain; `false` otherwise.
            <para />
            sig: (a -> b) -> a -> a -> Boolean
            </summary>
            <param name="f">first</param>
            <param name="x">second</param>
            <param name="y">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqBy(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values in its domain and returns `true` if thevalues map to the same value in the codomain; `false` otherwise.
            <para />
            sig: (a -> b) -> a -> a -> Boolean
            </summary>
            <param name="f">first</param>
            <param name="x">second</param>
            <param name="y">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqProps``2(System.String,``0,``1)">
            <summary>
            Reports whether two objects have the same value, in `R.equals` terms, forthe specified property. Useful as a curried predicate.
            <para />
            sig: k -> {k: v} -> {k: v} -> Boolean
            </summary>
            <param name="prop">The name of the property to compare</param>
            <param name="obj1">second</param>
            <param name="obj2">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqProps``2(Ramda.NET.RamdaPlaceholder,``0,``1)">
            <summary>
            Reports whether two objects have the same value, in `R.equals` terms, forthe specified property. Useful as a curried predicate.
            <para />
            sig: k -> {k: v} -> {k: v} -> Boolean
            </summary>
            <param name="prop">The name of the property to compare</param>
            <param name="obj1">second</param>
            <param name="obj2">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqProps``1(System.String,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Reports whether two objects have the same value, in `R.equals` terms, forthe specified property. Useful as a curried predicate.
            <para />
            sig: k -> {k: v} -> {k: v} -> Boolean
            </summary>
            <param name="prop">The name of the property to compare</param>
            <param name="obj1">second</param>
            <param name="obj2">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqProps``1(System.String,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Reports whether two objects have the same value, in `R.equals` terms, forthe specified property. Useful as a curried predicate.
            <para />
            sig: k -> {k: v} -> {k: v} -> Boolean
            </summary>
            <param name="prop">The name of the property to compare</param>
            <param name="obj1">second</param>
            <param name="obj2">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqProps(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Reports whether two objects have the same value, in `R.equals` terms, forthe specified property. Useful as a curried predicate.
            <para />
            sig: k -> {k: v} -> {k: v} -> Boolean
            </summary>
            <param name="prop">The name of the property to compare</param>
            <param name="obj1">second</param>
            <param name="obj2">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.EqProps(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Reports whether two objects have the same value, in `R.equals` terms, forthe specified property. Useful as a curried predicate.
            <para />
            sig: k -> {k: v} -> {k: v} -> Boolean
            </summary>
            <param name="prop">The name of the property to compare</param>
            <param name="obj1">second</param>
            <param name="obj2">third</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Equals``2(``0,``1)">
            <summary>
            Returns `true` if its arguments are equivalent, `false` otherwise. Handlescyclical data structures.Dispatches symmetrically to the `equals` methods of both arguments, ifpresent.
            <para />
            sig: a -> b -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Equals``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns `true` if its arguments are equivalent, `false` otherwise. Handlescyclical data structures.Dispatches symmetrically to the `equals` methods of both arguments, ifpresent.
            <para />
            sig: a -> b -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Equals``1(``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if its arguments are equivalent, `false` otherwise. Handlescyclical data structures.Dispatches symmetrically to the `equals` methods of both arguments, ifpresent.
            <para />
            sig: a -> b -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Equals(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if its arguments are equivalent, `false` otherwise. Handlescyclical data structures.Dispatches symmetrically to the `equals` methods of both arguments, ifpresent.
            <para />
            sig: a -> b -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Evolve``1(System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
            <summary>
            Creates a new object by recursively evolving a shallow copy of `object`,according to the `transformation` functions. All non-primitive propertiesare copied by reference.A `transformation` function will not be invoked if its corresponding keydoes not exist in the evolved object.
            <para />
            sig: {k: (v -> v)} -> {k: v} -> {k: v}
            </summary>
            <param name="transformations">The object specifying transformation functions to apply       to the object.</param>
            <param name="object">The object to be transformed.</param>
            <returns>The transformed object.</returns>
        </member>
        <member name="M:Ramda.NET.R.Evolve``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Creates a new object by recursively evolving a shallow copy of `object`,according to the `transformation` functions. All non-primitive propertiesare copied by reference.A `transformation` function will not be invoked if its corresponding keydoes not exist in the evolved object.
            <para />
            sig: {k: (v -> v)} -> {k: v} -> {k: v}
            </summary>
            <param name="transformations">The object specifying transformation functions to apply       to the object.</param>
            <param name="object">The object to be transformed.</param>
            <returns>The transformed object.</returns>
        </member>
        <member name="M:Ramda.NET.R.Evolve(System.Collections.Generic.IDictionary{System.String,System.Object},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object by recursively evolving a shallow copy of `object`,according to the `transformation` functions. All non-primitive propertiesare copied by reference.A `transformation` function will not be invoked if its corresponding keydoes not exist in the evolved object.
            <para />
            sig: {k: (v -> v)} -> {k: v} -> {k: v}
            </summary>
            <param name="transformations">The object specifying transformation functions to apply       to the object.</param>
            <param name="object">The object to be transformed.</param>
            <returns>The transformed object.</returns>
        </member>
        <member name="M:Ramda.NET.R.Evolve(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object by recursively evolving a shallow copy of `object`,according to the `transformation` functions. All non-primitive propertiesare copied by reference.A `transformation` function will not be invoked if its corresponding keydoes not exist in the evolved object.
            <para />
            sig: {k: (v -> v)} -> {k: v} -> {k: v}
            </summary>
            <param name="transformations">The object specifying transformation functions to apply       to the object.</param>
            <param name="object">The object to be transformed.</param>
            <returns>The transformed object.</returns>
        </member>
        <member name="M:Ramda.NET.R.Evolve``1(System.Object,``0)">
            <summary>
            Creates a new object by recursively evolving a shallow copy of `object`,according to the `transformation` functions. All non-primitive propertiesare copied by reference.A `transformation` function will not be invoked if its corresponding keydoes not exist in the evolved object.
            <para />
            sig: {k: (v -> v)} -> {k: v} -> {k: v}
            </summary>
            <param name="transformations">The object specifying transformation functions to apply       to the object.</param>
            <param name="object">The object to be transformed.</param>
            <returns>The transformed object.</returns>
        </member>
        <member name="M:Ramda.NET.R.Evolve(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object by recursively evolving a shallow copy of `object`,according to the `transformation` functions. All non-primitive propertiesare copied by reference.A `transformation` function will not be invoked if its corresponding keydoes not exist in the evolved object.
            <para />
            sig: {k: (v -> v)} -> {k: v} -> {k: v}
            </summary>
            <param name="transformations">The object specifying transformation functions to apply       to the object.</param>
            <param name="object">The object to be transformed.</param>
            <returns>The transformed object.</returns>
        </member>
        <member name="M:Ramda.NET.R.Filter``1(System.Func{``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Takes a predicate and a "filterable", and returns a new filterable of thesame type containing the members of the given filterable which satisfy thegiven predicate.Dispatches to the `filter` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Filter``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Takes a predicate and a "filterable", and returns a new filterable of thesame type containing the members of the given filterable which satisfy thegiven predicate.Dispatches to the `filter` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Filter``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a predicate and a "filterable", and returns a new filterable of thesame type containing the members of the given filterable which satisfy thegiven predicate.Dispatches to the `filter` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a predicate and a "filterable", and returns a new filterable of thesame type containing the members of the given filterable which satisfy thegiven predicate.Dispatches to the `filter` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Filter``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Takes a predicate and a "filterable", and returns a new filterable of thesame type containing the members of the given filterable which satisfy thegiven predicate.Dispatches to the `filter` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Filter(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a predicate and a "filterable", and returns a new filterable of thesame type containing the members of the given filterable which satisfy thegiven predicate.Dispatches to the `filter` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Filter``1(System.Func{``0,System.Boolean},System.Object)">
            <summary>
            Takes a predicate and a "filterable", and returns a new filterable of thesame type containing the members of the given filterable which satisfy thegiven predicate.Dispatches to the `filter` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Filter(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Takes a predicate and a "filterable", and returns a new filterable of thesame type containing the members of the given filterable which satisfy thegiven predicate.Dispatches to the `filter` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Filter(System.Object,System.Object)">
            <summary>
            Takes a predicate and a "filterable", and returns a new filterable of thesame type containing the members of the given filterable which satisfy thegiven predicate.Dispatches to the `filter` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Find``1(System.Func{``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Returns the first element of the list which matches the predicate, or`undefined` if no element matches.Dispatches to the `find` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> a | undefined
            </summary>
            <param name="fn">The predicate function used to determine if the element is the       desired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The element found, or `undefined`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Find``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the first element of the list which matches the predicate, or`undefined` if no element matches.Dispatches to the `find` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> a | undefined
            </summary>
            <param name="fn">The predicate function used to determine if the element is the       desired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The element found, or `undefined`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Find``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the first element of the list which matches the predicate, or`undefined` if no element matches.Dispatches to the `find` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> a | undefined
            </summary>
            <param name="fn">The predicate function used to determine if the element is the       desired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The element found, or `undefined`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Find(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the first element of the list which matches the predicate, or`undefined` if no element matches.Dispatches to the `find` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> a | undefined
            </summary>
            <param name="fn">The predicate function used to determine if the element is the       desired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The element found, or `undefined`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Find``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the first element of the list which matches the predicate, or`undefined` if no element matches.Dispatches to the `find` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> a | undefined
            </summary>
            <param name="fn">The predicate function used to determine if the element is the       desired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The element found, or `undefined`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Find(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the first element of the list which matches the predicate, or`undefined` if no element matches.Dispatches to the `find` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> a | undefined
            </summary>
            <param name="fn">The predicate function used to determine if the element is the       desired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The element found, or `undefined`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindIndex``1(System.Func{``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Returns the index of the first element of the list which matches thepredicate, or `-1` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Number
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The index of the element found, or `-1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindIndex``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the index of the first element of the list which matches thepredicate, or `-1` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Number
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The index of the element found, or `-1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindIndex``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the index of the first element of the list which matches thepredicate, or `-1` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Number
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The index of the element found, or `-1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindIndex(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the index of the first element of the list which matches thepredicate, or `-1` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Number
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The index of the element found, or `-1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindIndex``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the index of the first element of the list which matches thepredicate, or `-1` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Number
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The index of the element found, or `-1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindIndex(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the index of the first element of the list which matches thepredicate, or `-1` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Number
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The index of the element found, or `-1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindLast``1(System.Func{``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Returns the last element of the list which matches the predicate, or`undefined` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> a | undefined
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The element found, or `undefined`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindLast``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the last element of the list which matches the predicate, or`undefined` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> a | undefined
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The element found, or `undefined`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindLast``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the last element of the list which matches the predicate, or`undefined` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> a | undefined
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The element found, or `undefined`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindLast(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the last element of the list which matches the predicate, or`undefined` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> a | undefined
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The element found, or `undefined`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindLast``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the last element of the list which matches the predicate, or`undefined` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> a | undefined
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The element found, or `undefined`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindLast(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the last element of the list which matches the predicate, or`undefined` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> a | undefined
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The element found, or `undefined`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindLastIndex``1(System.Func{``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Returns the index of the last element of the list which matches thepredicate, or `-1` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Number
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The index of the element found, or `-1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindLastIndex``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the index of the last element of the list which matches thepredicate, or `-1` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Number
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The index of the element found, or `-1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindLastIndex``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the index of the last element of the list which matches thepredicate, or `-1` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Number
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The index of the element found, or `-1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindLastIndex(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the index of the last element of the list which matches thepredicate, or `-1` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Number
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The index of the element found, or `-1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindLastIndex``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the index of the last element of the list which matches thepredicate, or `-1` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Number
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The index of the element found, or `-1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FindLastIndex(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the index of the last element of the list which matches thepredicate, or `-1` if no element matches.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> Number
            </summary>
            <param name="fn">The predicate function used to determine if the element is thedesired one.</param>
            <param name="list">The array to consider.</param>
            <returns>The index of the element found, or `-1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Flatten(System.Collections.IDictionary)">
            <summary>
            Returns a new list by pulling every item out of it (and all its sub-arrays)and putting them in a new array, depth-first.
            <para />
            sig: [a] -> [b]
            </summary>
            <param name="list">The array to consider.</param>
            <returns>The flattened list.</returns>
            <see cref="M:Ramda.NET.R.Unnest(System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.Flatten(System.Dynamic.ExpandoObject)">
            <summary>
            Returns a new list by pulling every item out of it (and all its sub-arrays)and putting them in a new array, depth-first.
            <para />
            sig: [a] -> [b]
            </summary>
            <param name="list">The array to consider.</param>
            <returns>The flattened list.</returns>
            <see cref="M:Ramda.NET.R.Unnest(System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.Flatten``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list by pulling every item out of it (and all its sub-arrays)and putting them in a new array, depth-first.
            <para />
            sig: [a] -> [b]
            </summary>
            <param name="list">The array to consider.</param>
            <returns>The flattened list.</returns>
            <see cref="M:Ramda.NET.R.Unnest(System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.Flatten(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list by pulling every item out of it (and all its sub-arrays)and putting them in a new array, depth-first.
            <para />
            sig: [a] -> [b]
            </summary>
            <param name="list">The array to consider.</param>
            <returns>The flattened list.</returns>
            <see cref="M:Ramda.NET.R.Unnest(System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.Flip(System.Delegate)">
            <summary>
            Returns a new function much like the supplied one, except that the first twoarguments' order is reversed.
            <para />
            sig: (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)
            </summary>
            <param name="fn">The function to invoke with its first two parameters reversed.</param>
            <returns>The result of invoking `fn` with its first two parameters' order reversed.</returns>
        </member>
        <member name="M:Ramda.NET.R.Flip(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new function much like the supplied one, except that the first twoarguments' order is reversed.
            <para />
            sig: (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)
            </summary>
            <param name="fn">The function to invoke with its first two parameters reversed.</param>
            <returns>The result of invoking `fn` with its first two parameters' order reversed.</returns>
        </member>
        <member name="M:Ramda.NET.R.Flip(System.Object)">
            <summary>
            Returns a new function much like the supplied one, except that the first twoarguments' order is reversed.
            <para />
            sig: (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)
            </summary>
            <param name="fn">The function to invoke with its first two parameters reversed.</param>
            <returns>The result of invoking `fn` with its first two parameters' order reversed.</returns>
        </member>
        <member name="M:Ramda.NET.R.ForEach``1(System.Action{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Iterate over an input `list`, calling a provided function `fn` for eachelement in the list.`fn` receives one argument: *(value)*.Note: `R.forEach` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.forEach` method. For moredetails on this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#DescriptionAlso note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returnsthe original array. In some libraries this function is named `each`.Dispatches to the `forEach` method of the second argument, if present.
            <para />
            sig: (a -> *) -> [a] -> [a]
            </summary>
            <param name="fn">The function to invoke. Receives one argument, `value`.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The original list.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ForEach``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Iterate over an input `list`, calling a provided function `fn` for eachelement in the list.`fn` receives one argument: *(value)*.Note: `R.forEach` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.forEach` method. For moredetails on this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#DescriptionAlso note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returnsthe original array. In some libraries this function is named `each`.Dispatches to the `forEach` method of the second argument, if present.
            <para />
            sig: (a -> *) -> [a] -> [a]
            </summary>
            <param name="fn">The function to invoke. Receives one argument, `value`.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The original list.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ForEach``1(System.Action{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Iterate over an input `list`, calling a provided function `fn` for eachelement in the list.`fn` receives one argument: *(value)*.Note: `R.forEach` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.forEach` method. For moredetails on this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#DescriptionAlso note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returnsthe original array. In some libraries this function is named `each`.Dispatches to the `forEach` method of the second argument, if present.
            <para />
            sig: (a -> *) -> [a] -> [a]
            </summary>
            <param name="fn">The function to invoke. Receives one argument, `value`.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The original list.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ForEach(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Iterate over an input `list`, calling a provided function `fn` for eachelement in the list.`fn` receives one argument: *(value)*.Note: `R.forEach` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.forEach` method. For moredetails on this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#DescriptionAlso note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returnsthe original array. In some libraries this function is named `each`.Dispatches to the `forEach` method of the second argument, if present.
            <para />
            sig: (a -> *) -> [a] -> [a]
            </summary>
            <param name="fn">The function to invoke. Receives one argument, `value`.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The original list.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ForEach``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Iterate over an input `list`, calling a provided function `fn` for eachelement in the list.`fn` receives one argument: *(value)*.Note: `R.forEach` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.forEach` method. For moredetails on this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#DescriptionAlso note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returnsthe original array. In some libraries this function is named `each`.Dispatches to the `forEach` method of the second argument, if present.
            <para />
            sig: (a -> *) -> [a] -> [a]
            </summary>
            <param name="fn">The function to invoke. Receives one argument, `value`.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The original list.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ForEach(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Iterate over an input `list`, calling a provided function `fn` for eachelement in the list.`fn` receives one argument: *(value)*.Note: `R.forEach` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.forEach` method. For moredetails on this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#DescriptionAlso note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returnsthe original array. In some libraries this function is named `each`.Dispatches to the `forEach` method of the second argument, if present.
            <para />
            sig: (a -> *) -> [a] -> [a]
            </summary>
            <param name="fn">The function to invoke. Receives one argument, `value`.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The original list.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ForEach``1(System.Action{``0},System.Object)">
            <summary>
            Iterate over an input `list`, calling a provided function `fn` for eachelement in the list.`fn` receives one argument: *(value)*.Note: `R.forEach` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.forEach` method. For moredetails on this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#DescriptionAlso note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returnsthe original array. In some libraries this function is named `each`.Dispatches to the `forEach` method of the second argument, if present.
            <para />
            sig: (a -> *) -> [a] -> [a]
            </summary>
            <param name="fn">The function to invoke. Receives one argument, `value`.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The original list.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ForEach(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Iterate over an input `list`, calling a provided function `fn` for eachelement in the list.`fn` receives one argument: *(value)*.Note: `R.forEach` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.forEach` method. For moredetails on this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#DescriptionAlso note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returnsthe original array. In some libraries this function is named `each`.Dispatches to the `forEach` method of the second argument, if present.
            <para />
            sig: (a -> *) -> [a] -> [a]
            </summary>
            <param name="fn">The function to invoke. Receives one argument, `value`.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The original list.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ForEach(System.Object,System.Object)">
            <summary>
            Iterate over an input `list`, calling a provided function `fn` for eachelement in the list.`fn` receives one argument: *(value)*.Note: `R.forEach` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.forEach` method. For moredetails on this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#DescriptionAlso note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returnsthe original array. In some libraries this function is named `each`.Dispatches to the `forEach` method of the second argument, if present.
            <para />
            sig: (a -> *) -> [a] -> [a]
            </summary>
            <param name="fn">The function to invoke. Receives one argument, `value`.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The original list.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ForEachObjIndexed``1(System.Action{System.Object,System.String,``0},``0)">
            <summary>
            Iterate over an input `object`, calling a provided function `fn` for eachkey and value in the object.`fn` receives three argument: *(value, key, obj)*.
            <para />
            sig: ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a
            </summary>
            <param name="fn">The function to invoke. Receives three argument, `value`, `key`, `obj`.</param>
            <param name="obj">The object to iterate over.</param>
            <returns>The original object.</returns>
        </member>
        <member name="M:Ramda.NET.R.ForEachObjIndexed``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Iterate over an input `object`, calling a provided function `fn` for eachkey and value in the object.`fn` receives three argument: *(value, key, obj)*.
            <para />
            sig: ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a
            </summary>
            <param name="fn">The function to invoke. Receives three argument, `value`, `key`, `obj`.</param>
            <param name="obj">The object to iterate over.</param>
            <returns>The original object.</returns>
        </member>
        <member name="M:Ramda.NET.R.ForEachObjIndexed``1(System.Action{System.Object,System.String,``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Iterate over an input `object`, calling a provided function `fn` for eachkey and value in the object.`fn` receives three argument: *(value, key, obj)*.
            <para />
            sig: ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a
            </summary>
            <param name="fn">The function to invoke. Receives three argument, `value`, `key`, `obj`.</param>
            <param name="obj">The object to iterate over.</param>
            <returns>The original object.</returns>
        </member>
        <member name="M:Ramda.NET.R.ForEachObjIndexed(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Iterate over an input `object`, calling a provided function `fn` for eachkey and value in the object.`fn` receives three argument: *(value, key, obj)*.
            <para />
            sig: ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a
            </summary>
            <param name="fn">The function to invoke. Receives three argument, `value`, `key`, `obj`.</param>
            <param name="obj">The object to iterate over.</param>
            <returns>The original object.</returns>
        </member>
        <member name="M:Ramda.NET.R.ForEachObjIndexed``1(System.Object,``0)">
            <summary>
            Iterate over an input `object`, calling a provided function `fn` for eachkey and value in the object.`fn` receives three argument: *(value, key, obj)*.
            <para />
            sig: ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a
            </summary>
            <param name="fn">The function to invoke. Receives three argument, `value`, `key`, `obj`.</param>
            <param name="obj">The object to iterate over.</param>
            <returns>The original object.</returns>
        </member>
        <member name="M:Ramda.NET.R.ForEachObjIndexed(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Iterate over an input `object`, calling a provided function `fn` for eachkey and value in the object.`fn` receives three argument: *(value, key, obj)*.
            <para />
            sig: ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a
            </summary>
            <param name="fn">The function to invoke. Receives three argument, `value`, `key`, `obj`.</param>
            <param name="obj">The object to iterate over.</param>
            <returns>The original object.</returns>
        </member>
        <member name="M:Ramda.NET.R.FromPairs(System.Object[][])">
            <summary>
            Creates a new object from a list key-value pairs. If a key appears inmultiple pairs, the rightmost pair is included in the object.
            <para />
            sig: [[k,v]] -> {k: v}
            </summary>
            <param name="pairs">An array of two-element arrays that will be the keys and values of the output object.</param>
            <returns>The object made by pairing up `keys` and `values`.</returns>
            <see cref="M:Ramda.NET.R.ToPairs(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Pair(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FromPairs(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object from a list key-value pairs. If a key appears inmultiple pairs, the rightmost pair is included in the object.
            <para />
            sig: [[k,v]] -> {k: v}
            </summary>
            <param name="pairs">An array of two-element arrays that will be the keys and values of the output object.</param>
            <returns>The object made by pairing up `keys` and `values`.</returns>
            <see cref="M:Ramda.NET.R.ToPairs(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Pair(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.FromPairs``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}})">
            <summary>
            Creates a new object from a list key-value pairs. If a key appears inmultiple pairs, the rightmost pair is included in the object.
            <para />
            sig: [[k,v]] -> {k: v}
            </summary>
            <param name="pairs">An array of two-element arrays that will be the keys and values of the output object.</param>
            <returns>The object made by pairing up `keys` and `values`.</returns>
            <see cref="M:Ramda.NET.R.ToPairs(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Pair(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.GroupBy``1(System.Func{``0,System.String},System.Collections.Generic.IList{``0})">
            <summary>
            Splits a list into sub-lists stored in an object, based on the result ofcalling a String-returning function on each element, and grouping theresults according to values returned.Dispatches to the `groupBy` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {String: [a]}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="list">The array to group</param>
            <returns>An object with the output of `fn` for keys, mapped to arrays of elements that produced that key when passed to `fn`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.GroupBy``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Splits a list into sub-lists stored in an object, based on the result ofcalling a String-returning function on each element, and grouping theresults according to values returned.Dispatches to the `groupBy` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {String: [a]}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="list">The array to group</param>
            <returns>An object with the output of `fn` for keys, mapped to arrays of elements that produced that key when passed to `fn`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.GroupBy``1(System.Func{``0,System.String},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Splits a list into sub-lists stored in an object, based on the result ofcalling a String-returning function on each element, and grouping theresults according to values returned.Dispatches to the `groupBy` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {String: [a]}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="list">The array to group</param>
            <returns>An object with the output of `fn` for keys, mapped to arrays of elements that produced that key when passed to `fn`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Splits a list into sub-lists stored in an object, based on the result ofcalling a String-returning function on each element, and grouping theresults according to values returned.Dispatches to the `groupBy` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {String: [a]}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="list">The array to group</param>
            <returns>An object with the output of `fn` for keys, mapped to arrays of elements that produced that key when passed to `fn`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.GroupBy``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Splits a list into sub-lists stored in an object, based on the result ofcalling a String-returning function on each element, and grouping theresults according to values returned.Dispatches to the `groupBy` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {String: [a]}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="list">The array to group</param>
            <returns>An object with the output of `fn` for keys, mapped to arrays of elements that produced that key when passed to `fn`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.GroupBy(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Splits a list into sub-lists stored in an object, based on the result ofcalling a String-returning function on each element, and grouping theresults according to values returned.Dispatches to the `groupBy` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {String: [a]}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="list">The array to group</param>
            <returns>An object with the output of `fn` for keys, mapped to arrays of elements that produced that key when passed to `fn`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.GroupBy``1(System.Func{``0,System.String},Ramda.NET.ITransformer)">
            <summary>
            Splits a list into sub-lists stored in an object, based on the result ofcalling a String-returning function on each element, and grouping theresults according to values returned.Dispatches to the `groupBy` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {String: [a]}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="list">The array to group</param>
            <returns>An object with the output of `fn` for keys, mapped to arrays of elements that produced that key when passed to `fn`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.GroupBy(Ramda.NET.RamdaPlaceholder,Ramda.NET.ITransformer)">
            <summary>
            Splits a list into sub-lists stored in an object, based on the result ofcalling a String-returning function on each element, and grouping theresults according to values returned.Dispatches to the `groupBy` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {String: [a]}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="list">The array to group</param>
            <returns>An object with the output of `fn` for keys, mapped to arrays of elements that produced that key when passed to `fn`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.ITransformer)">
            <summary>
            Splits a list into sub-lists stored in an object, based on the result ofcalling a String-returning function on each element, and grouping theresults according to values returned.Dispatches to the `groupBy` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [a] -> {String: [a]}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="list">The array to group</param>
            <returns>An object with the output of `fn` for keys, mapped to arrays of elements that produced that key when passed to `fn`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.GroupWith``1(System.Func{``0,``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Takes a list and returns a list of lists where each sublist's elements areall "equal" according to the provided equality function.
            <para />
            sig: ((a, a) → Boolean) → [a] → [[a]]
            </summary>
            <param name="fn">Function for determining whether two given (adjacent)       elements should be in the same group</param>
            <param name="list">The array to group. Also accepts a string, which will be       treated as a list of characters.</param>
            <returns>A list that contains sublists of equal elements, whose concatenations are equal to the original list.</returns>
        </member>
        <member name="M:Ramda.NET.R.GroupWith``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Takes a list and returns a list of lists where each sublist's elements areall "equal" according to the provided equality function.
            <para />
            sig: ((a, a) → Boolean) → [a] → [[a]]
            </summary>
            <param name="fn">Function for determining whether two given (adjacent)       elements should be in the same group</param>
            <param name="list">The array to group. Also accepts a string, which will be       treated as a list of characters.</param>
            <returns>A list that contains sublists of equal elements, whose concatenations are equal to the original list.</returns>
        </member>
        <member name="M:Ramda.NET.R.GroupWith``1(System.Func{``0,``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a list and returns a list of lists where each sublist's elements areall "equal" according to the provided equality function.
            <para />
            sig: ((a, a) → Boolean) → [a] → [[a]]
            </summary>
            <param name="fn">Function for determining whether two given (adjacent)       elements should be in the same group</param>
            <param name="list">The array to group. Also accepts a string, which will be       treated as a list of characters.</param>
            <returns>A list that contains sublists of equal elements, whose concatenations are equal to the original list.</returns>
        </member>
        <member name="M:Ramda.NET.R.GroupWith(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a list and returns a list of lists where each sublist's elements areall "equal" according to the provided equality function.
            <para />
            sig: ((a, a) → Boolean) → [a] → [[a]]
            </summary>
            <param name="fn">Function for determining whether two given (adjacent)       elements should be in the same group</param>
            <param name="list">The array to group. Also accepts a string, which will be       treated as a list of characters.</param>
            <returns>A list that contains sublists of equal elements, whose concatenations are equal to the original list.</returns>
        </member>
        <member name="M:Ramda.NET.R.GroupWith``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Takes a list and returns a list of lists where each sublist's elements areall "equal" according to the provided equality function.
            <para />
            sig: ((a, a) → Boolean) → [a] → [[a]]
            </summary>
            <param name="fn">Function for determining whether two given (adjacent)       elements should be in the same group</param>
            <param name="list">The array to group. Also accepts a string, which will be       treated as a list of characters.</param>
            <returns>A list that contains sublists of equal elements, whose concatenations are equal to the original list.</returns>
        </member>
        <member name="M:Ramda.NET.R.GroupWith(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a list and returns a list of lists where each sublist's elements areall "equal" according to the provided equality function.
            <para />
            sig: ((a, a) → Boolean) → [a] → [[a]]
            </summary>
            <param name="fn">Function for determining whether two given (adjacent)       elements should be in the same group</param>
            <param name="list">The array to group. Also accepts a string, which will be       treated as a list of characters.</param>
            <returns>A list that contains sublists of equal elements, whose concatenations are equal to the original list.</returns>
        </member>
        <member name="M:Ramda.NET.R.GroupWith(System.Func{System.String,System.String,System.Boolean},System.String)">
            <summary>
            Takes a list and returns a list of lists where each sublist's elements areall "equal" according to the provided equality function.
            <para />
            sig: ((a, a) → Boolean) → [a] → [[a]]
            </summary>
            <param name="fn">Function for determining whether two given (adjacent)       elements should be in the same group</param>
            <param name="list">The array to group. Also accepts a string, which will be       treated as a list of characters.</param>
            <returns>A list that contains sublists of equal elements, whose concatenations are equal to the original list.</returns>
        </member>
        <member name="M:Ramda.NET.R.GroupWith(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Takes a list and returns a list of lists where each sublist's elements areall "equal" according to the provided equality function.
            <para />
            sig: ((a, a) → Boolean) → [a] → [[a]]
            </summary>
            <param name="fn">Function for determining whether two given (adjacent)       elements should be in the same group</param>
            <param name="list">The array to group. Also accepts a string, which will be       treated as a list of characters.</param>
            <returns>A list that contains sublists of equal elements, whose concatenations are equal to the original list.</returns>
        </member>
        <member name="M:Ramda.NET.R.GroupWith(System.Object,System.String)">
            <summary>
            Takes a list and returns a list of lists where each sublist's elements areall "equal" according to the provided equality function.
            <para />
            sig: ((a, a) → Boolean) → [a] → [[a]]
            </summary>
            <param name="fn">Function for determining whether two given (adjacent)       elements should be in the same group</param>
            <param name="list">The array to group. Also accepts a string, which will be       treated as a list of characters.</param>
            <returns>A list that contains sublists of equal elements, whose concatenations are equal to the original list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Gt(System.Double,System.Double)">
            <summary>
            Returns `true` if the first argument is greater than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gt(Ramda.NET.RamdaPlaceholder,System.Double)">
            <summary>
            Returns `true` if the first argument is greater than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gt(System.Double,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is greater than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gt(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is greater than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gt(System.Int32,System.Int32)">
            <summary>
            Returns `true` if the first argument is greater than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gt(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Returns `true` if the first argument is greater than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gt(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is greater than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gt(System.String,System.String)">
            <summary>
            Returns `true` if the first argument is greater than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gt(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Returns `true` if the first argument is greater than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gt(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is greater than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gte(System.Double,System.Double)">
            <summary>
            Returns `true` if the first argument is greater than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gte(Ramda.NET.RamdaPlaceholder,System.Double)">
            <summary>
            Returns `true` if the first argument is greater than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gte(System.Double,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is greater than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gte(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is greater than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gte(System.Int32,System.Int32)">
            <summary>
            Returns `true` if the first argument is greater than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gte(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Returns `true` if the first argument is greater than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gte(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is greater than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gte(System.String,System.String)">
            <summary>
            Returns `true` if the first argument is greater than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gte(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Returns `true` if the first argument is greater than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Gte(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is greater than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Lte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.HasIn``1(System.String,``0)">
            <summary>
            Returns whether or not an object or its prototype chain has a property withthe specified name
            <para />
            sig: s -> {s: x} -> Boolean
            </summary>
            <param name="prop">The name of the property to check for.</param>
            <param name="obj">The object to query.</param>
            <returns>Whether the property exists.</returns>
        </member>
        <member name="M:Ramda.NET.R.HasIn``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns whether or not an object or its prototype chain has a property withthe specified name
            <para />
            sig: s -> {s: x} -> Boolean
            </summary>
            <param name="prop">The name of the property to check for.</param>
            <param name="obj">The object to query.</param>
            <returns>Whether the property exists.</returns>
        </member>
        <member name="M:Ramda.NET.R.HasIn(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns whether or not an object or its prototype chain has a property withthe specified name
            <para />
            sig: s -> {s: x} -> Boolean
            </summary>
            <param name="prop">The name of the property to check for.</param>
            <param name="obj">The object to query.</param>
            <returns>Whether the property exists.</returns>
        </member>
        <member name="M:Ramda.NET.R.HasIn(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns whether or not an object or its prototype chain has a property withthe specified name
            <para />
            sig: s -> {s: x} -> Boolean
            </summary>
            <param name="prop">The name of the property to check for.</param>
            <param name="obj">The object to query.</param>
            <returns>Whether the property exists.</returns>
        </member>
        <member name="M:Ramda.NET.R.Has``1(System.String,``0)">
            <summary>
            Returns whether or not an object has an own property with the specified name
            <para />
            sig: s -> {s: x} -> Boolean
            </summary>
            <param name="prop">The name of the property to check for.</param>
            <param name="obj">The object to query.</param>
            <returns>Whether the property exists.</returns>
        </member>
        <member name="M:Ramda.NET.R.Has``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns whether or not an object has an own property with the specified name
            <para />
            sig: s -> {s: x} -> Boolean
            </summary>
            <param name="prop">The name of the property to check for.</param>
            <param name="obj">The object to query.</param>
            <returns>Whether the property exists.</returns>
        </member>
        <member name="M:Ramda.NET.R.Has(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns whether or not an object has an own property with the specified name
            <para />
            sig: s -> {s: x} -> Boolean
            </summary>
            <param name="prop">The name of the property to check for.</param>
            <param name="obj">The object to query.</param>
            <returns>Whether the property exists.</returns>
        </member>
        <member name="M:Ramda.NET.R.Has(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns whether or not an object has an own property with the specified name
            <para />
            sig: s -> {s: x} -> Boolean
            </summary>
            <param name="prop">The name of the property to check for.</param>
            <param name="obj">The object to query.</param>
            <returns>Whether the property exists.</returns>
        </member>
        <member name="M:Ramda.NET.R.Head``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the first element of the given list or string. In some librariesthis function is named `first`.
            <para />
            sig: [a] -> a | Undefined
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Tail(System.String)"/>
            <see cref="M:Ramda.NET.R.Init(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Last(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Head(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the first element of the given list or string. In some librariesthis function is named `first`.
            <para />
            sig: [a] -> a | Undefined
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Tail(System.String)"/>
            <see cref="M:Ramda.NET.R.Init(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Last(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Head(System.String)">
            <summary>
            Returns the first element of the given list or string. In some librariesthis function is named `first`.
            <para />
            sig: [a] -> a | Undefined
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Tail(System.String)"/>
            <see cref="M:Ramda.NET.R.Init(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Last(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Identical``1(``0,``0)">
            <summary>
            Returns true if its arguments are identical, false otherwise. Values areidentical if they reference the same memory. `NaN` is identical to `NaN`;`0` and `-0` are not identical.
            <para />
            sig: a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Identical``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns true if its arguments are identical, false otherwise. Values areidentical if they reference the same memory. `NaN` is identical to `NaN`;`0` and `-0` are not identical.
            <para />
            sig: a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Identical``1(``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns true if its arguments are identical, false otherwise. Values areidentical if they reference the same memory. `NaN` is identical to `NaN`;`0` and `-0` are not identical.
            <para />
            sig: a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Identical(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns true if its arguments are identical, false otherwise. Values areidentical if they reference the same memory. `NaN` is identical to `NaN`;`0` and `-0` are not identical.
            <para />
            sig: a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Identity``1(``0)">
            <summary>
            A function that does nothing but return the parameter supplied to it. Goodas a default or placeholder function.
            <para />
            sig: a -> a
            </summary>
            <param name="x">The value to return.</param>
            <returns>The input value, `x`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Identity(Ramda.NET.RamdaPlaceholder)">
            <summary>
            A function that does nothing but return the parameter supplied to it. Goodas a default or placeholder function.
            <para />
            sig: a -> a
            </summary>
            <param name="x">The value to return.</param>
            <returns>The input value, `x`.</returns>
        </member>
        <member name="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)">
            <summary>
            Creates a function that will process either the `onTrue` or the `onFalse`function depending upon the result of the `condition` predicate.
            <para />
            sig: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
            </summary>
            <param name="condition">A predicate function</param>
            <param name="onTrue">A function to invoke when the `condition` evaluates to a truthy value.</param>
            <param name="onFalse">A function to invoke when the `condition` evaluates to a falsy value.</param>
            <returns>A new unary function that will process either the `onTrue` or the `onFalse`     function depending upon the result of the `condition` predicate.</returns>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IfElse(Ramda.NET.RamdaPlaceholder,System.Delegate,System.Delegate)">
            <summary>
            Creates a function that will process either the `onTrue` or the `onFalse`function depending upon the result of the `condition` predicate.
            <para />
            sig: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
            </summary>
            <param name="condition">A predicate function</param>
            <param name="onTrue">A function to invoke when the `condition` evaluates to a truthy value.</param>
            <param name="onFalse">A function to invoke when the `condition` evaluates to a falsy value.</param>
            <returns>A new unary function that will process either the `onTrue` or the `onFalse`     function depending upon the result of the `condition` predicate.</returns>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IfElse(System.Delegate,Ramda.NET.RamdaPlaceholder,System.Delegate)">
            <summary>
            Creates a function that will process either the `onTrue` or the `onFalse`function depending upon the result of the `condition` predicate.
            <para />
            sig: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
            </summary>
            <param name="condition">A predicate function</param>
            <param name="onTrue">A function to invoke when the `condition` evaluates to a truthy value.</param>
            <param name="onFalse">A function to invoke when the `condition` evaluates to a falsy value.</param>
            <returns>A new unary function that will process either the `onTrue` or the `onFalse`     function depending upon the result of the `condition` predicate.</returns>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a function that will process either the `onTrue` or the `onFalse`function depending upon the result of the `condition` predicate.
            <para />
            sig: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
            </summary>
            <param name="condition">A predicate function</param>
            <param name="onTrue">A function to invoke when the `condition` evaluates to a truthy value.</param>
            <param name="onFalse">A function to invoke when the `condition` evaluates to a falsy value.</param>
            <returns>A new unary function that will process either the `onTrue` or the `onFalse`     function depending upon the result of the `condition` predicate.</returns>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IfElse(System.Delegate,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a function that will process either the `onTrue` or the `onFalse`function depending upon the result of the `condition` predicate.
            <para />
            sig: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
            </summary>
            <param name="condition">A predicate function</param>
            <param name="onTrue">A function to invoke when the `condition` evaluates to a truthy value.</param>
            <param name="onFalse">A function to invoke when the `condition` evaluates to a falsy value.</param>
            <returns>A new unary function that will process either the `onTrue` or the `onFalse`     function depending upon the result of the `condition` predicate.</returns>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Object)">
            <summary>
            Creates a function that will process either the `onTrue` or the `onFalse`function depending upon the result of the `condition` predicate.
            <para />
            sig: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
            </summary>
            <param name="condition">A predicate function</param>
            <param name="onTrue">A function to invoke when the `condition` evaluates to a truthy value.</param>
            <param name="onFalse">A function to invoke when the `condition` evaluates to a falsy value.</param>
            <returns>A new unary function that will process either the `onTrue` or the `onFalse`     function depending upon the result of the `condition` predicate.</returns>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IfElse(System.Delegate,System.Object,System.Delegate)">
            <summary>
            Creates a function that will process either the `onTrue` or the `onFalse`function depending upon the result of the `condition` predicate.
            <para />
            sig: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
            </summary>
            <param name="condition">A predicate function</param>
            <param name="onTrue">A function to invoke when the `condition` evaluates to a truthy value.</param>
            <param name="onFalse">A function to invoke when the `condition` evaluates to a falsy value.</param>
            <returns>A new unary function that will process either the `onTrue` or the `onFalse`     function depending upon the result of the `condition` predicate.</returns>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IfElse(System.Delegate,System.Object,System.Object)">
            <summary>
            Creates a function that will process either the `onTrue` or the `onFalse`function depending upon the result of the `condition` predicate.
            <para />
            sig: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
            </summary>
            <param name="condition">A predicate function</param>
            <param name="onTrue">A function to invoke when the `condition` evaluates to a truthy value.</param>
            <param name="onFalse">A function to invoke when the `condition` evaluates to a falsy value.</param>
            <returns>A new unary function that will process either the `onTrue` or the `onFalse`     function depending upon the result of the `condition` predicate.</returns>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IfElse(System.Object,System.Delegate,System.Delegate)">
            <summary>
            Creates a function that will process either the `onTrue` or the `onFalse`function depending upon the result of the `condition` predicate.
            <para />
            sig: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
            </summary>
            <param name="condition">A predicate function</param>
            <param name="onTrue">A function to invoke when the `condition` evaluates to a truthy value.</param>
            <param name="onFalse">A function to invoke when the `condition` evaluates to a falsy value.</param>
            <returns>A new unary function that will process either the `onTrue` or the `onFalse`     function depending upon the result of the `condition` predicate.</returns>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IfElse(System.Object,System.Delegate,System.Object)">
            <summary>
            Creates a function that will process either the `onTrue` or the `onFalse`function depending upon the result of the `condition` predicate.
            <para />
            sig: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
            </summary>
            <param name="condition">A predicate function</param>
            <param name="onTrue">A function to invoke when the `condition` evaluates to a truthy value.</param>
            <param name="onFalse">A function to invoke when the `condition` evaluates to a falsy value.</param>
            <returns>A new unary function that will process either the `onTrue` or the `onFalse`     function depending upon the result of the `condition` predicate.</returns>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IfElse(System.Object,System.Object,System.Delegate)">
            <summary>
            Creates a function that will process either the `onTrue` or the `onFalse`function depending upon the result of the `condition` predicate.
            <para />
            sig: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
            </summary>
            <param name="condition">A predicate function</param>
            <param name="onTrue">A function to invoke when the `condition` evaluates to a truthy value.</param>
            <param name="onFalse">A function to invoke when the `condition` evaluates to a falsy value.</param>
            <returns>A new unary function that will process either the `onTrue` or the `onFalse`     function depending upon the result of the `condition` predicate.</returns>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IfElse(System.Object,System.Object,System.Object)">
            <summary>
            Creates a function that will process either the `onTrue` or the `onFalse`function depending upon the result of the `condition` predicate.
            <para />
            sig: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
            </summary>
            <param name="condition">A predicate function</param>
            <param name="onTrue">A function to invoke when the `condition` evaluates to a truthy value.</param>
            <param name="onFalse">A function to invoke when the `condition` evaluates to a falsy value.</param>
            <returns>A new unary function that will process either the `onTrue` or the `onFalse`     function depending upon the result of the `condition` predicate.</returns>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IfElse(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a function that will process either the `onTrue` or the `onFalse`function depending upon the result of the `condition` predicate.
            <para />
            sig: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
            </summary>
            <param name="condition">A predicate function</param>
            <param name="onTrue">A function to invoke when the `condition` evaluates to a truthy value.</param>
            <param name="onFalse">A function to invoke when the `condition` evaluates to a falsy value.</param>
            <returns>A new unary function that will process either the `onTrue` or the `onFalse`     function depending upon the result of the `condition` predicate.</returns>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Inc(System.Double)">
            <summary>
            Increments its argument.
            <para />
            sig: Number -> Number
            </summary>
            <param name="n">first</param>
            <returns>n + 1</returns>
            <see cref="M:Ramda.NET.R.Dec(System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Inc(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Increments its argument.
            <para />
            sig: Number -> Number
            </summary>
            <param name="n">first</param>
            <returns>n + 1</returns>
            <see cref="M:Ramda.NET.R.Dec(System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Inc(System.Int32)">
            <summary>
            Increments its argument.
            <para />
            sig: Number -> Number
            </summary>
            <param name="n">first</param>
            <returns>n + 1</returns>
            <see cref="M:Ramda.NET.R.Dec(System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.IndexBy``1(System.Func{``0,System.String},System.Collections.Generic.IList{``0})">
            <summary>
            Given a function that generates a key, turns a list of objects into anobject indexing the objects by the given key. Note that if multipleobjects generate the same value for the indexing key only the last valuewill be included in the generated object.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [{k: v}] -> {k: {k: v}}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="array">The array of objects to index</param>
            <returns>An object indexing each array element by the given property.</returns>
        </member>
        <member name="M:Ramda.NET.R.IndexBy``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Given a function that generates a key, turns a list of objects into anobject indexing the objects by the given key. Note that if multipleobjects generate the same value for the indexing key only the last valuewill be included in the generated object.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [{k: v}] -> {k: {k: v}}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="array">The array of objects to index</param>
            <returns>An object indexing each array element by the given property.</returns>
        </member>
        <member name="M:Ramda.NET.R.IndexBy``1(System.Func{``0,System.String},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Given a function that generates a key, turns a list of objects into anobject indexing the objects by the given key. Note that if multipleobjects generate the same value for the indexing key only the last valuewill be included in the generated object.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [{k: v}] -> {k: {k: v}}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="array">The array of objects to index</param>
            <returns>An object indexing each array element by the given property.</returns>
        </member>
        <member name="M:Ramda.NET.R.IndexBy(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Given a function that generates a key, turns a list of objects into anobject indexing the objects by the given key. Note that if multipleobjects generate the same value for the indexing key only the last valuewill be included in the generated object.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [{k: v}] -> {k: {k: v}}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="array">The array of objects to index</param>
            <returns>An object indexing each array element by the given property.</returns>
        </member>
        <member name="M:Ramda.NET.R.IndexBy``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Given a function that generates a key, turns a list of objects into anobject indexing the objects by the given key. Note that if multipleobjects generate the same value for the indexing key only the last valuewill be included in the generated object.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [{k: v}] -> {k: {k: v}}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="array">The array of objects to index</param>
            <returns>An object indexing each array element by the given property.</returns>
        </member>
        <member name="M:Ramda.NET.R.IndexBy(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Given a function that generates a key, turns a list of objects into anobject indexing the objects by the given key. Note that if multipleobjects generate the same value for the indexing key only the last valuewill be included in the generated object.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [{k: v}] -> {k: {k: v}}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="array">The array of objects to index</param>
            <returns>An object indexing each array element by the given property.</returns>
        </member>
        <member name="M:Ramda.NET.R.IndexBy(System.Func{System.Object,System.String},System.Object)">
            <summary>
            Given a function that generates a key, turns a list of objects into anobject indexing the objects by the given key. Note that if multipleobjects generate the same value for the indexing key only the last valuewill be included in the generated object.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [{k: v}] -> {k: {k: v}}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="array">The array of objects to index</param>
            <returns>An object indexing each array element by the given property.</returns>
        </member>
        <member name="M:Ramda.NET.R.IndexBy(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Given a function that generates a key, turns a list of objects into anobject indexing the objects by the given key. Note that if multipleobjects generate the same value for the indexing key only the last valuewill be included in the generated object.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [{k: v}] -> {k: {k: v}}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="array">The array of objects to index</param>
            <returns>An object indexing each array element by the given property.</returns>
        </member>
        <member name="M:Ramda.NET.R.IndexBy(System.Func{System.Object,System.String},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Given a function that generates a key, turns a list of objects into anobject indexing the objects by the given key. Note that if multipleobjects generate the same value for the indexing key only the last valuewill be included in the generated object.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [{k: v}] -> {k: {k: v}}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="array">The array of objects to index</param>
            <returns>An object indexing each array element by the given property.</returns>
        </member>
        <member name="M:Ramda.NET.R.IndexBy(System.Object,System.Object)">
            <summary>
            Given a function that generates a key, turns a list of objects into anobject indexing the objects by the given key. Note that if multipleobjects generate the same value for the indexing key only the last valuewill be included in the generated object.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> String) -> [{k: v}] -> {k: {k: v}}
            </summary>
            <param name="fn">Function :: a -<![CDATA[>]]> String</param>
            <param name="array">The array of objects to index</param>
            <returns>An object indexing each array element by the given property.</returns>
        </member>
        <member name="M:Ramda.NET.R.IndexOf``1(``0,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the position of the first occurrence of an item in an array, or -1if the item is not included in the array. `R.equals` is used to determineequality.
            <para />
            sig: a -> [a] -> Number
            </summary>
            <param name="target">The item to find.</param>
            <param name="xs">The array to search in.</param>
            <returns>the index of the target, or -1 if the target is not found.</returns>
            <see cref="M:Ramda.NET.R.LastIndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IndexOf``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the position of the first occurrence of an item in an array, or -1if the item is not included in the array. `R.equals` is used to determineequality.
            <para />
            sig: a -> [a] -> Number
            </summary>
            <param name="target">The item to find.</param>
            <param name="xs">The array to search in.</param>
            <returns>the index of the target, or -1 if the target is not found.</returns>
            <see cref="M:Ramda.NET.R.LastIndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IndexOf``1(``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the position of the first occurrence of an item in an array, or -1if the item is not included in the array. `R.equals` is used to determineequality.
            <para />
            sig: a -> [a] -> Number
            </summary>
            <param name="target">The item to find.</param>
            <param name="xs">The array to search in.</param>
            <returns>the index of the target, or -1 if the target is not found.</returns>
            <see cref="M:Ramda.NET.R.LastIndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the position of the first occurrence of an item in an array, or -1if the item is not included in the array. `R.equals` is used to determineequality.
            <para />
            sig: a -> [a] -> Number
            </summary>
            <param name="target">The item to find.</param>
            <param name="xs">The array to search in.</param>
            <returns>the index of the target, or -1 if the target is not found.</returns>
            <see cref="M:Ramda.NET.R.LastIndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IndexOf(System.Object,System.Object)">
            <summary>
            Returns the position of the first occurrence of an item in an array, or -1if the item is not included in the array. `R.equals` is used to determineequality.
            <para />
            sig: a -> [a] -> Number
            </summary>
            <param name="target">The item to find.</param>
            <param name="xs">The array to search in.</param>
            <returns>the index of the target, or -1 if the target is not found.</returns>
            <see cref="M:Ramda.NET.R.LastIndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IndexOf(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Returns the position of the first occurrence of an item in an array, or -1if the item is not included in the array. `R.equals` is used to determineequality.
            <para />
            sig: a -> [a] -> Number
            </summary>
            <param name="target">The item to find.</param>
            <param name="xs">The array to search in.</param>
            <returns>the index of the target, or -1 if the target is not found.</returns>
            <see cref="M:Ramda.NET.R.LastIndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IndexOf(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the position of the first occurrence of an item in an array, or -1if the item is not included in the array. `R.equals` is used to determineequality.
            <para />
            sig: a -> [a] -> Number
            </summary>
            <param name="target">The item to find.</param>
            <param name="xs">The array to search in.</param>
            <returns>the index of the target, or -1 if the target is not found.</returns>
            <see cref="M:Ramda.NET.R.LastIndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Init``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns all but the last element of the given list or string.
            <para />
            sig: [a] -> [a]
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Last(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Head(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Tail(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Init(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns all but the last element of the given list or string.
            <para />
            sig: [a] -> [a]
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Last(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Head(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Tail(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Init(System.String)">
            <summary>
            Returns all but the last element of the given list or string.
            <para />
            sig: [a] -> [a]
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Last(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Head(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Tail(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Insert``1(System.Int32,``0,System.Collections.Generic.IList{``0})">
            <summary>
            Inserts the supplied element into the list, at index `index`. _Note thatthis is not destructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the element</param>
            <param name="elt">The element to insert into the Array</param>
            <param name="list">The list to insert into</param>
            <returns>A new Array with `elt` inserted at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Insert``1(Ramda.NET.RamdaPlaceholder,``0,System.Collections.Generic.IList{``0})">
            <summary>
            Inserts the supplied element into the list, at index `index`. _Note thatthis is not destructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the element</param>
            <param name="elt">The element to insert into the Array</param>
            <param name="list">The list to insert into</param>
            <returns>A new Array with `elt` inserted at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Insert``1(System.Int32,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Inserts the supplied element into the list, at index `index`. _Note thatthis is not destructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the element</param>
            <param name="elt">The element to insert into the Array</param>
            <param name="list">The list to insert into</param>
            <returns>A new Array with `elt` inserted at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Insert``1(System.Int32,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Inserts the supplied element into the list, at index `index`. _Note thatthis is not destructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the element</param>
            <param name="elt">The element to insert into the Array</param>
            <param name="list">The list to insert into</param>
            <returns>A new Array with `elt` inserted at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Insert(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Inserts the supplied element into the list, at index `index`. _Note thatthis is not destructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the element</param>
            <param name="elt">The element to insert into the Array</param>
            <param name="list">The list to insert into</param>
            <returns>A new Array with `elt` inserted at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Insert(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Inserts the supplied element into the list, at index `index`. _Note thatthis is not destructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the element</param>
            <param name="elt">The element to insert into the Array</param>
            <param name="list">The list to insert into</param>
            <returns>A new Array with `elt` inserted at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Insert``2(System.Int32,``1,System.Collections.Generic.IList{``0})">
            <summary>
            Inserts the supplied element into the list, at index `index`. _Note thatthis is not destructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the element</param>
            <param name="elt">The element to insert into the Array</param>
            <param name="list">The list to insert into</param>
            <returns>A new Array with `elt` inserted at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Insert``2(Ramda.NET.RamdaPlaceholder,``1,System.Collections.Generic.IList{``0})">
            <summary>
            Inserts the supplied element into the list, at index `index`. _Note thatthis is not destructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the element</param>
            <param name="elt">The element to insert into the Array</param>
            <param name="list">The list to insert into</param>
            <returns>A new Array with `elt` inserted at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Insert``2(System.Int32,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Inserts the supplied element into the list, at index `index`. _Note thatthis is not destructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the element</param>
            <param name="elt">The element to insert into the Array</param>
            <param name="list">The list to insert into</param>
            <returns>A new Array with `elt` inserted at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Insert``2(System.Int32,``1,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Inserts the supplied element into the list, at index `index`. _Note thatthis is not destructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the element</param>
            <param name="elt">The element to insert into the Array</param>
            <param name="list">The list to insert into</param>
            <returns>A new Array with `elt` inserted at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Insert``2(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Inserts the supplied element into the list, at index `index`. _Note thatthis is not destructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the element</param>
            <param name="elt">The element to insert into the Array</param>
            <param name="list">The list to insert into</param>
            <returns>A new Array with `elt` inserted at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.InsertAll``1(System.Int32,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Inserts the sub-list into the list, at index `index`. _Note that this is notdestructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> [a] -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the sub-list</param>
            <param name="elts">The sub-list to insert into the Array</param>
            <param name="list">The list to insert the sub-list into</param>
            <returns>A new Array with `elts` inserted starting at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.InsertAll``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Inserts the sub-list into the list, at index `index`. _Note that this is notdestructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> [a] -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the sub-list</param>
            <param name="elts">The sub-list to insert into the Array</param>
            <param name="list">The list to insert the sub-list into</param>
            <returns>A new Array with `elts` inserted starting at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.InsertAll``1(System.Int32,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Inserts the sub-list into the list, at index `index`. _Note that this is notdestructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> [a] -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the sub-list</param>
            <param name="elts">The sub-list to insert into the Array</param>
            <param name="list">The list to insert the sub-list into</param>
            <returns>A new Array with `elts` inserted starting at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.InsertAll``1(System.Int32,System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Inserts the sub-list into the list, at index `index`. _Note that this is notdestructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> [a] -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the sub-list</param>
            <param name="elts">The sub-list to insert into the Array</param>
            <param name="list">The list to insert the sub-list into</param>
            <returns>A new Array with `elts` inserted starting at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.InsertAll(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Inserts the sub-list into the list, at index `index`. _Note that this is notdestructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> [a] -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the sub-list</param>
            <param name="elts">The sub-list to insert into the Array</param>
            <param name="list">The list to insert the sub-list into</param>
            <returns>A new Array with `elts` inserted starting at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.InsertAll(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Inserts the sub-list into the list, at index `index`. _Note that this is notdestructive_: it returns a copy of the list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> [a] -> [a] -> [a]
            </summary>
            <param name="index">The position to insert the sub-list</param>
            <param name="elts">The sub-list to insert into the Array</param>
            <param name="list">The list to insert the sub-list into</param>
            <returns>A new Array with `elts` inserted starting at `index`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Intersection``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The list of elements found in both `list1` and `list2`.</returns>
            <see cref="M:Ramda.NET.R.IntersectionWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Intersection``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The list of elements found in both `list1` and `list2`.</returns>
            <see cref="M:Ramda.NET.R.IntersectionWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Intersection``1(System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The list of elements found in both `list1` and `list2`.</returns>
            <see cref="M:Ramda.NET.R.IntersectionWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Intersection(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The list of elements found in both `list1` and `list2`.</returns>
            <see cref="M:Ramda.NET.R.IntersectionWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IntersectionWith``1(System.Func{``0,``0,System.Boolean},System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate function that determines whether       the two supplied elements are equal.</param>
            <param name="list1">One list of items to compare</param>
            <param name="list2">A second list of items to compare</param>
            <returns>A new list containing those elements common to both lists.</returns>
            <see cref="M:Ramda.NET.R.Intersection(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IntersectionWith``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate function that determines whether       the two supplied elements are equal.</param>
            <param name="list1">One list of items to compare</param>
            <param name="list2">A second list of items to compare</param>
            <returns>A new list containing those elements common to both lists.</returns>
            <see cref="M:Ramda.NET.R.Intersection(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IntersectionWith``1(System.Func{``0,``0,System.Boolean},Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate function that determines whether       the two supplied elements are equal.</param>
            <param name="list1">One list of items to compare</param>
            <param name="list2">A second list of items to compare</param>
            <returns>A new list containing those elements common to both lists.</returns>
            <see cref="M:Ramda.NET.R.Intersection(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IntersectionWith``1(System.Func{``0,``0,System.Boolean},System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate function that determines whether       the two supplied elements are equal.</param>
            <param name="list1">One list of items to compare</param>
            <param name="list2">A second list of items to compare</param>
            <returns>A new list containing those elements common to both lists.</returns>
            <see cref="M:Ramda.NET.R.Intersection(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IntersectionWith``1(System.Func{``0,``0,System.Boolean},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate function that determines whether       the two supplied elements are equal.</param>
            <param name="list1">One list of items to compare</param>
            <param name="list2">A second list of items to compare</param>
            <returns>A new list containing those elements common to both lists.</returns>
            <see cref="M:Ramda.NET.R.Intersection(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IntersectionWith``1(System.Object,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate function that determines whether       the two supplied elements are equal.</param>
            <param name="list1">One list of items to compare</param>
            <param name="list2">A second list of items to compare</param>
            <returns>A new list containing those elements common to both lists.</returns>
            <see cref="M:Ramda.NET.R.Intersection(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IntersectionWith``1(System.Object,System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate function that determines whether       the two supplied elements are equal.</param>
            <param name="list1">One list of items to compare</param>
            <param name="list2">A second list of items to compare</param>
            <returns>A new list containing those elements common to both lists.</returns>
            <see cref="M:Ramda.NET.R.Intersection(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IntersectionWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate function that determines whether       the two supplied elements are equal.</param>
            <param name="list1">One list of items to compare</param>
            <param name="list2">A second list of items to compare</param>
            <returns>A new list containing those elements common to both lists.</returns>
            <see cref="M:Ramda.NET.R.Intersection(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IntersectionWith``1(System.Object,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate function that determines whether       the two supplied elements are equal.</param>
            <param name="list1">One list of items to compare</param>
            <param name="list2">A second list of items to compare</param>
            <returns>A new list containing those elements common to both lists.</returns>
            <see cref="M:Ramda.NET.R.Intersection(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IntersectionWith(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of thoseelements common to both lists. Duplication is determined according to thevalue returned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate function that determines whether       the two supplied elements are equal.</param>
            <param name="list1">One list of items to compare</param>
            <param name="list2">A second list of items to compare</param>
            <returns>A new list containing those elements common to both lists.</returns>
            <see cref="M:Ramda.NET.R.Intersection(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Intersperse``2(``1,System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new list with the separator interposed between elements.Dispatches to the `intersperse` method of the second argument, if present.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="separator">The element to add to the list.</param>
            <param name="list">The list to be interposed.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Intersperse``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new list with the separator interposed between elements.Dispatches to the `intersperse` method of the second argument, if present.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="separator">The element to add to the list.</param>
            <param name="list">The list to be interposed.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Intersperse``1(``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new list with the separator interposed between elements.Dispatches to the `intersperse` method of the second argument, if present.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="separator">The element to add to the list.</param>
            <param name="list">The list to be interposed.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Intersperse(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new list with the separator interposed between elements.Dispatches to the `intersperse` method of the second argument, if present.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="separator">The element to add to the list.</param>
            <param name="list">The list to be interposed.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Intersperse``2(``1,Ramda.NET.IDispersible{``1,``0})">
            <summary>
            Creates a new list with the separator interposed between elements.Dispatches to the `intersperse` method of the second argument, if present.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="separator">The element to add to the list.</param>
            <param name="list">The list to be interposed.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Intersperse``2(Ramda.NET.RamdaPlaceholder,Ramda.NET.IDispersible{``1,``0})">
            <summary>
            Creates a new list with the separator interposed between elements.Dispatches to the `intersperse` method of the second argument, if present.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="separator">The element to add to the list.</param>
            <param name="list">The list to be interposed.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(Ramda.NET.ITransformer,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},System.Collections.Generic.IList{``0})">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(Ramda.NET.ITransformer,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(Ramda.NET.ITransformer,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(Ramda.NET.ITransformer,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(Ramda.NET.ITransformer,System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(Ramda.NET.ITransformer,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``2(System.Collections.Generic.IList{``1},System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},System.Collections.Generic.IList{``0})">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},System.Collections.Generic.IList{``0})">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``2(System.Collections.Generic.IList{``1},Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(Ramda.NET.RamdaPlaceholder,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``2(System.Collections.Generic.IList{``1},System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(System.Collections.Generic.IList{``0},System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(System.Collections.Generic.IList{``0},System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Object,Ramda.NET.R.IReducible)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(System.Collections.Generic.IList{``0},System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(System.Collections.Generic.IList{``0},System.Object,Ramda.NET.R.IReducible)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(System.Object,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},System.Collections.Generic.IList{``0})">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(System.Object,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(System.Object,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(System.Object,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(System.Dynamic.ExpandoObject,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(System.Dynamic.ExpandoObject,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(System.Dynamic.ExpandoObject,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(System.Dynamic.ExpandoObject,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(System.Dynamic.ExpandoObject,System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(System.Dynamic.ExpandoObject,System.Object,Ramda.NET.R.IReducible)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(System.String,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},System.Collections.Generic.IList{``0})">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(System.String,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(System.String,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into(System.String,System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Into``1(System.String,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Transforms the items of the list with the transducer and appends thetransformed items to the accumulator using an appropriate iterator functionbased on the accumulator type.The accumulator can be an array, string, object or a transformer. Iterateditems will be appended to arrays and concatenated to strings. Objects willbe merged directly or 2-item arrays will be merged as key, value pairs.The accumulator can also be a transformer object that provides a 2-arityreducing iterator function, step, 0-arity initial value function, init, and1-arity result extraction function result. The step function is used as theiterator function in reduce. The result function is used to convert thefinal accumulator into the return type and in most cases is R.identity. Theinit function is used to provide the initial accumulator.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: a -> (b -> b) -> [c] -> a
            </summary>
            <param name="acc">The initial accumulator value.</param>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Invert``1(``0)">
            <summary>
            Same as R.invertObj, however this accounts for objects with duplicate valuesby putting the values into an array.
            <para />
            sig: {s: x} -> {x: [ s, ... ]}
            </summary>
            <param name="obj">The object or array to invert</param>
            <returns>out A new object with keysin an array.</returns>
        </member>
        <member name="M:Ramda.NET.R.Invert(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Same as R.invertObj, however this accounts for objects with duplicate valuesby putting the values into an array.
            <para />
            sig: {s: x} -> {x: [ s, ... ]}
            </summary>
            <param name="obj">The object or array to invert</param>
            <returns>out A new object with keysin an array.</returns>
        </member>
        <member name="M:Ramda.NET.R.InvertObj``1(``0)">
            <summary>
            Returns a new object with the keys of the given object as values, and thevalues of the given object, which are coerced to strings, as keys. Notethat the last key found is preferred when handling the same value.
            <para />
            sig: {s: x} -> {x: s}
            </summary>
            <param name="obj">The object or array to invert</param>
            <returns>out A new object</returns>
        </member>
        <member name="M:Ramda.NET.R.InvertObj(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new object with the keys of the given object as values, and thevalues of the given object, which are coerced to strings, as keys. Notethat the last key found is preferred when handling the same value.
            <para />
            sig: {s: x} -> {x: s}
            </summary>
            <param name="obj">The object or array to invert</param>
            <returns>out A new object</returns>
        </member>
        <member name="M:Ramda.NET.R.Invoker(System.Int32,System.String)">
            <summary>
            Turns a named method with a specified arity into a function that can becalled directly supplied with arguments and a target object.The returned function is curried and accepts `arity + 1` parameters wherethe final parameter is the target object.
            <para />
            sig: Number -> String -> (a -> b -> ... -> n -> Object -> *)
            </summary>
            <param name="arity">Number of arguments the returned function should take       before the target object.</param>
            <param name="method">Name of the method to call.</param>
            <returns>A new curried function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Invoker(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Turns a named method with a specified arity into a function that can becalled directly supplied with arguments and a target object.The returned function is curried and accepts `arity + 1` parameters wherethe final parameter is the target object.
            <para />
            sig: Number -> String -> (a -> b -> ... -> n -> Object -> *)
            </summary>
            <param name="arity">Number of arguments the returned function should take       before the target object.</param>
            <param name="method">Name of the method to call.</param>
            <returns>A new curried function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Invoker(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Turns a named method with a specified arity into a function that can becalled directly supplied with arguments and a target object.The returned function is curried and accepts `arity + 1` parameters wherethe final parameter is the target object.
            <para />
            sig: Number -> String -> (a -> b -> ... -> n -> Object -> *)
            </summary>
            <param name="arity">Number of arguments the returned function should take       before the target object.</param>
            <param name="method">Name of the method to call.</param>
            <returns>A new curried function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Invoker(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Turns a named method with a specified arity into a function that can becalled directly supplied with arguments and a target object.The returned function is curried and accepts `arity + 1` parameters wherethe final parameter is the target object.
            <para />
            sig: Number -> String -> (a -> b -> ... -> n -> Object -> *)
            </summary>
            <param name="arity">Number of arguments the returned function should take       before the target object.</param>
            <param name="method">Name of the method to call.</param>
            <returns>A new curried function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Is``1(System.Type,``0)">
            <summary>
            See if an object (`val`) is an instance of the supplied constructor. Thisfunction will check up the inheritance chain, if any.
            <para />
            sig: (* -> {*}) -> a -> Boolean
            </summary>
            <param name="ctor">A constructor</param>
            <param name="val">The value to test</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Is``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            See if an object (`val`) is an instance of the supplied constructor. Thisfunction will check up the inheritance chain, if any.
            <para />
            sig: (* -> {*}) -> a -> Boolean
            </summary>
            <param name="ctor">A constructor</param>
            <param name="val">The value to test</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Is(System.Type,Ramda.NET.RamdaPlaceholder)">
            <summary>
            See if an object (`val`) is an instance of the supplied constructor. Thisfunction will check up the inheritance chain, if any.
            <para />
            sig: (* -> {*}) -> a -> Boolean
            </summary>
            <param name="ctor">A constructor</param>
            <param name="val">The value to test</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Is(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            See if an object (`val`) is an instance of the supplied constructor. Thisfunction will check up the inheritance chain, if any.
            <para />
            sig: (* -> {*}) -> a -> Boolean
            </summary>
            <param name="ctor">A constructor</param>
            <param name="val">The value to test</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.IsArrayLike``1(``0)">
            <summary>
            Tests whether or not an object is similar to an array.
            <para />
            sig: * -> Boolean
            </summary>
            <param name="x">The object to test.</param>
            <returns>`true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.</returns>
        </member>
        <member name="M:Ramda.NET.R.IsArrayLike(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Tests whether or not an object is similar to an array.
            <para />
            sig: * -> Boolean
            </summary>
            <param name="x">The object to test.</param>
            <returns>`true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.</returns>
        </member>
        <member name="M:Ramda.NET.R.IsEmpty``1(``0)">
            <summary>
            Returns `true` if the given value is its type's empty value; `false`otherwise.
            <para />
            sig: a -> Boolean
            </summary>
            <param name="x">first</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Empty(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IsEmpty(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the given value is its type's empty value; `false`otherwise.
            <para />
            sig: a -> Boolean
            </summary>
            <param name="x">first</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Empty(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.IsNil``1(``0)">
            <summary>
            Checks if the input value is `null` or `undefined`.
            <para />
            sig: * -> Boolean
            </summary>
            <param name="x">The value to test.</param>
            <returns>`true` if `x` is `undefined` or `null`, otherwise `false`.</returns>
        </member>
        <member name="M:Ramda.NET.R.IsNil(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Checks if the input value is `null` or `undefined`.
            <para />
            sig: * -> Boolean
            </summary>
            <param name="x">The value to test.</param>
            <returns>`true` if `x` is `undefined` or `null`, otherwise `false`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Join``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a string made by inserting the `separator` between each element andconcatenating all the elements into a single string.
            <para />
            sig: String -> [a] -> String
            </summary>
            <param name="separator">The string used to separate the elements.</param>
            <param name="xs">The elements to join into a string.</param>
            <returns>str The string made by concatenating `xs` with `separator`.</returns>
            <see cref="M:Ramda.NET.R.Split(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Join``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a string made by inserting the `separator` between each element andconcatenating all the elements into a single string.
            <para />
            sig: String -> [a] -> String
            </summary>
            <param name="separator">The string used to separate the elements.</param>
            <param name="xs">The elements to join into a string.</param>
            <returns>str The string made by concatenating `xs` with `separator`.</returns>
            <see cref="M:Ramda.NET.R.Split(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Join(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a string made by inserting the `separator` between each element andconcatenating all the elements into a single string.
            <para />
            sig: String -> [a] -> String
            </summary>
            <param name="separator">The string used to separate the elements.</param>
            <param name="xs">The elements to join into a string.</param>
            <returns>str The string made by concatenating `xs` with `separator`.</returns>
            <see cref="M:Ramda.NET.R.Split(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Join(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a string made by inserting the `separator` between each element andconcatenating all the elements into a single string.
            <para />
            sig: String -> [a] -> String
            </summary>
            <param name="separator">The string used to separate the elements.</param>
            <param name="xs">The elements to join into a string.</param>
            <returns>str The string made by concatenating `xs` with `separator`.</returns>
            <see cref="M:Ramda.NET.R.Split(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Juxt``2(System.Collections.Generic.IList{System.Func{``0,``1}})">
            <summary>
            juxt applies a list of functions to a list of values.
            <para />
            sig: [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
            </summary>
            <param name="fns">An array of functions</param>
            <returns>A function that returns a list of values after applying each of the original `fns` to its parameters.</returns>
            <see cref="M:Ramda.NET.R.ApplySpec(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Juxt(Ramda.NET.RamdaPlaceholder)">
            <summary>
            juxt applies a list of functions to a list of values.
            <para />
            sig: [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
            </summary>
            <param name="fns">An array of functions</param>
            <returns>A function that returns a list of values after applying each of the original `fns` to its parameters.</returns>
            <see cref="M:Ramda.NET.R.ApplySpec(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Juxt(System.Collections.Generic.IList{System.Object})">
            <summary>
            juxt applies a list of functions to a list of values.
            <para />
            sig: [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
            </summary>
            <param name="fns">An array of functions</param>
            <returns>A function that returns a list of values after applying each of the original `fns` to its parameters.</returns>
            <see cref="M:Ramda.NET.R.ApplySpec(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.KeysIn``1(``0)">
            <summary>
            Returns a list containing the names of all the properties of the suppliedobject, including prototype properties.Note that the order of the output array is not guaranteed to be consistentacross different JS platforms.
            <para />
            sig: {k: v} -> [k]
            </summary>
            <param name="obj">The object to extract properties from</param>
            <returns>An array of the object's own and prototype properties.</returns>
        </member>
        <member name="M:Ramda.NET.R.KeysIn(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a list containing the names of all the properties of the suppliedobject, including prototype properties.Note that the order of the output array is not guaranteed to be consistentacross different JS platforms.
            <para />
            sig: {k: v} -> [k]
            </summary>
            <param name="obj">The object to extract properties from</param>
            <returns>An array of the object's own and prototype properties.</returns>
        </member>
        <member name="M:Ramda.NET.R.Keys``1(``0)">
            <summary>
            Returns a list containing the names of all the enumerable own properties ofthe supplied object.Note that the order of the output array is not guaranteed to be consistentacross different JS platforms.
            <para />
            sig: {k: v} -> [k]
            </summary>
            <param name="obj">The object to extract properties from</param>
            <returns>An array of the object's own properties.</returns>
        </member>
        <member name="M:Ramda.NET.R.Keys(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a list containing the names of all the enumerable own properties ofthe supplied object.Note that the order of the output array is not guaranteed to be consistentacross different JS platforms.
            <para />
            sig: {k: v} -> [k]
            </summary>
            <param name="obj">The object to extract properties from</param>
            <returns>An array of the object's own properties.</returns>
        </member>
        <member name="M:Ramda.NET.R.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the last element of the given list or string.
            <para />
            sig: [a] -> a | Undefined
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Init(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Head(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Tail(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Last(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the last element of the given list or string.
            <para />
            sig: [a] -> a | Undefined
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Init(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Head(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Tail(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Last(System.String)">
            <summary>
            Returns the last element of the given list or string.
            <para />
            sig: [a] -> a | Undefined
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Init(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Head(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Tail(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.LastIndexOf``1(``0,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the position of the last occurrence of an item in an array, or -1 ifthe item is not included in the array. `R.equals` is used to determineequality.
            <para />
            sig: a -> [a] -> Number
            </summary>
            <param name="target">The item to find.</param>
            <param name="xs">The array to search in.</param>
            <returns>the index of the target, or -1 if the target is not found.</returns>
            <see cref="M:Ramda.NET.R.IndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.LastIndexOf``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the position of the last occurrence of an item in an array, or -1 ifthe item is not included in the array. `R.equals` is used to determineequality.
            <para />
            sig: a -> [a] -> Number
            </summary>
            <param name="target">The item to find.</param>
            <param name="xs">The array to search in.</param>
            <returns>the index of the target, or -1 if the target is not found.</returns>
            <see cref="M:Ramda.NET.R.IndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.LastIndexOf``1(``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the position of the last occurrence of an item in an array, or -1 ifthe item is not included in the array. `R.equals` is used to determineequality.
            <para />
            sig: a -> [a] -> Number
            </summary>
            <param name="target">The item to find.</param>
            <param name="xs">The array to search in.</param>
            <returns>the index of the target, or -1 if the target is not found.</returns>
            <see cref="M:Ramda.NET.R.IndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.LastIndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the position of the last occurrence of an item in an array, or -1 ifthe item is not included in the array. `R.equals` is used to determineequality.
            <para />
            sig: a -> [a] -> Number
            </summary>
            <param name="target">The item to find.</param>
            <param name="xs">The array to search in.</param>
            <returns>the index of the target, or -1 if the target is not found.</returns>
            <see cref="M:Ramda.NET.R.IndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.LastIndexOf(System.Object,System.Object)">
            <summary>
            Returns the position of the last occurrence of an item in an array, or -1 ifthe item is not included in the array. `R.equals` is used to determineequality.
            <para />
            sig: a -> [a] -> Number
            </summary>
            <param name="target">The item to find.</param>
            <param name="xs">The array to search in.</param>
            <returns>the index of the target, or -1 if the target is not found.</returns>
            <see cref="M:Ramda.NET.R.IndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.LastIndexOf(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Returns the position of the last occurrence of an item in an array, or -1 ifthe item is not included in the array. `R.equals` is used to determineequality.
            <para />
            sig: a -> [a] -> Number
            </summary>
            <param name="target">The item to find.</param>
            <param name="xs">The array to search in.</param>
            <returns>the index of the target, or -1 if the target is not found.</returns>
            <see cref="M:Ramda.NET.R.IndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.LastIndexOf(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the position of the last occurrence of an item in an array, or -1 ifthe item is not included in the array. `R.equals` is used to determineequality.
            <para />
            sig: a -> [a] -> Number
            </summary>
            <param name="target">The item to find.</param>
            <param name="xs">The array to search in.</param>
            <returns>the index of the target, or -1 if the target is not found.</returns>
            <see cref="M:Ramda.NET.R.IndexOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Length(System.Delegate)">
            <summary>
            Returns the number of elements in the array by returning `list.length`.
            <para />
            sig: [a] -> Number
            </summary>
            <param name="list">The array to inspect.</param>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Ramda.NET.R.Length``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the number of elements in the array by returning `list.length`.
            <para />
            sig: [a] -> Number
            </summary>
            <param name="list">The array to inspect.</param>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Ramda.NET.R.Length(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the number of elements in the array by returning `list.length`.
            <para />
            sig: [a] -> Number
            </summary>
            <param name="list">The array to inspect.</param>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Ramda.NET.R.Length(System.Collections.IList)">
            <summary>
            Returns the number of elements in the array by returning `list.length`.
            <para />
            sig: [a] -> Number
            </summary>
            <param name="list">The array to inspect.</param>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Ramda.NET.R.Length(System.Object)">
            <summary>
            Returns the number of elements in the array by returning `list.length`.
            <para />
            sig: [a] -> Number
            </summary>
            <param name="list">The array to inspect.</param>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Ramda.NET.R.Length(System.String)">
            <summary>
            Returns the number of elements in the array by returning `list.length`.
            <para />
            sig: [a] -> Number
            </summary>
            <param name="list">The array to inspect.</param>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Ramda.NET.R.Lens(System.Delegate,System.Delegate)">
            <summary>
            Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
            <para />
            sig: (s -> a) -> ((a, s) -> s) -> Lens s a
            </summary>
            <param name="getter">first</param>
            <param name="setter">second</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Lens(Ramda.NET.RamdaPlaceholder,System.Delegate)">
            <summary>
            Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
            <para />
            sig: (s -> a) -> ((a, s) -> s) -> Lens s a
            </summary>
            <param name="getter">first</param>
            <param name="setter">second</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Lens(System.Delegate,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
            <para />
            sig: (s -> a) -> ((a, s) -> s) -> Lens s a
            </summary>
            <param name="getter">first</param>
            <param name="setter">second</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Lens(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
            <para />
            sig: (s -> a) -> ((a, s) -> s) -> Lens s a
            </summary>
            <param name="getter">first</param>
            <param name="setter">second</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Lens(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
            <para />
            sig: (s -> a) -> ((a, s) -> s) -> Lens s a
            </summary>
            <param name="getter">first</param>
            <param name="setter">second</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Lens(System.Object,System.Delegate)">
            <summary>
            Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
            <para />
            sig: (s -> a) -> ((a, s) -> s) -> Lens s a
            </summary>
            <param name="getter">first</param>
            <param name="setter">second</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Lens(System.Delegate,System.Object)">
            <summary>
            Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
            <para />
            sig: (s -> a) -> ((a, s) -> s) -> Lens s a
            </summary>
            <param name="getter">first</param>
            <param name="setter">second</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Lens(System.Object,System.Object)">
            <summary>
            Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
            <para />
            sig: (s -> a) -> ((a, s) -> s) -> Lens s a
            </summary>
            <param name="getter">first</param>
            <param name="setter">second</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Lens(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
            <para />
            sig: (s -> a) -> ((a, s) -> s) -> Lens s a
            </summary>
            <param name="getter">first</param>
            <param name="setter">second</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.LensIndex(System.Int32)">
            <summary>
            Returns a lens whose focus is the specified index.
            <para />
            sig: Number -> Lens s a
            </summary>
            <param name="n">first</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.LensIndex(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a lens whose focus is the specified index.
            <para />
            sig: Number -> Lens s a
            </summary>
            <param name="n">first</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.LensPath(System.Collections.IList)">
            <summary>
            Returns a lens whose focus is the specified path.
            <para />
            sig: [Idx] -> Lens s a
            </summary>
            <param name="path">The path to use.</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.LensPath(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a lens whose focus is the specified path.
            <para />
            sig: [Idx] -> Lens s a
            </summary>
            <param name="path">The path to use.</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.LensProp(System.String)">
            <summary>
            Returns a lens whose focus is the specified property.
            <para />
            sig: String -> Lens s a
            </summary>
            <param name="k">first</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.LensProp(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a lens whose focus is the specified property.
            <para />
            sig: String -> Lens s a
            </summary>
            <param name="k">first</param>
            <returns>Lens</returns>
            <see cref="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Lift(System.Delegate)">
            <summary>
            "lifts" a function of arity <![CDATA[>]]> 1 so that it may "map over" a list, Function or otherobject that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
            <para />
            sig: (*... -> *) -> ([*]... -> [*])
            </summary>
            <param name="fn">The function to lift into higher context</param>
            <returns>The lifted function.</returns>
            <see cref="M:Ramda.NET.R.LiftN(System.Int32,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Lift(Ramda.NET.RamdaPlaceholder)">
            <summary>
            "lifts" a function of arity <![CDATA[>]]> 1 so that it may "map over" a list, Function or otherobject that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
            <para />
            sig: (*... -> *) -> ([*]... -> [*])
            </summary>
            <param name="fn">The function to lift into higher context</param>
            <returns>The lifted function.</returns>
            <see cref="M:Ramda.NET.R.LiftN(System.Int32,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Lift(System.Object)">
            <summary>
            "lifts" a function of arity <![CDATA[>]]> 1 so that it may "map over" a list, Function or otherobject that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
            <para />
            sig: (*... -> *) -> ([*]... -> [*])
            </summary>
            <param name="fn">The function to lift into higher context</param>
            <returns>The lifted function.</returns>
            <see cref="M:Ramda.NET.R.LiftN(System.Int32,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.LiftN(System.Int32,System.Delegate)">
            <summary>
            "lifts" a function to be the specified arity, so that it may "map over" thatmany lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
            <para />
            sig: Number -> (*... -> *) -> ([*]... -> [*])
            </summary>
            <param name="fn">The function to lift into higher context</param>
            <returns>The lifted function.</returns>
            <see cref="M:Ramda.NET.R.Lift(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Ap(System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.LiftN(Ramda.NET.RamdaPlaceholder,System.Delegate)">
            <summary>
            "lifts" a function to be the specified arity, so that it may "map over" thatmany lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
            <para />
            sig: Number -> (*... -> *) -> ([*]... -> [*])
            </summary>
            <param name="fn">The function to lift into higher context</param>
            <returns>The lifted function.</returns>
            <see cref="M:Ramda.NET.R.Lift(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Ap(System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.LiftN(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            "lifts" a function to be the specified arity, so that it may "map over" thatmany lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
            <para />
            sig: Number -> (*... -> *) -> ([*]... -> [*])
            </summary>
            <param name="fn">The function to lift into higher context</param>
            <returns>The lifted function.</returns>
            <see cref="M:Ramda.NET.R.Lift(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Ap(System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.LiftN(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            "lifts" a function to be the specified arity, so that it may "map over" thatmany lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
            <para />
            sig: Number -> (*... -> *) -> ([*]... -> [*])
            </summary>
            <param name="fn">The function to lift into higher context</param>
            <returns>The lifted function.</returns>
            <see cref="M:Ramda.NET.R.Lift(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Ap(System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.LiftN(System.Int32,System.Object)">
            <summary>
            "lifts" a function to be the specified arity, so that it may "map over" thatmany lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
            <para />
            sig: Number -> (*... -> *) -> ([*]... -> [*])
            </summary>
            <param name="fn">The function to lift into higher context</param>
            <returns>The lifted function.</returns>
            <see cref="M:Ramda.NET.R.Lift(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Ap(System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.LiftN(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            "lifts" a function to be the specified arity, so that it may "map over" thatmany lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
            <para />
            sig: Number -> (*... -> *) -> ([*]... -> [*])
            </summary>
            <param name="fn">The function to lift into higher context</param>
            <returns>The lifted function.</returns>
            <see cref="M:Ramda.NET.R.Lift(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Ap(System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.Lt(System.Double,System.Double)">
            <summary>
            Returns `true` if the first argument is less than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lt(Ramda.NET.RamdaPlaceholder,System.Double)">
            <summary>
            Returns `true` if the first argument is less than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lt(System.Double,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is less than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lt(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is less than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lt(System.Int32,System.Int32)">
            <summary>
            Returns `true` if the first argument is less than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lt(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Returns `true` if the first argument is less than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lt(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is less than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lt(System.String,System.String)">
            <summary>
            Returns `true` if the first argument is less than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lt(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Returns `true` if the first argument is less than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lt(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is less than the second; `false`otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gt(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lte(System.Double,System.Double)">
            <summary>
            Returns `true` if the first argument is less than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lte(Ramda.NET.RamdaPlaceholder,System.Double)">
            <summary>
            Returns `true` if the first argument is less than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lte(System.Double,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is less than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lte(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is less than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lte(System.Int32,System.Int32)">
            <summary>
            Returns `true` if the first argument is less than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lte(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Returns `true` if the first argument is less than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lte(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is less than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lte(System.String,System.String)">
            <summary>
            Returns `true` if the first argument is less than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lte(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Returns `true` if the first argument is less than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Lte(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the first argument is less than or equal to the second;`false` otherwise.
            <para />
            sig: Ord a => a -> a -> Boolean
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Gte(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Map``2(System.Func{``0,``1},System.Collections.Generic.IList{``0})">
            <summary>
            Takes a function anda [functor](https://github.com/fantasyland/fantasy-land#functor),applies the function to each of the functor's values, and returnsa functor of the same shape.Ramda provides suitable `map` implementations for `Array` and `Object`,so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.Dispatches to the `map` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.Also treats functions as functors and will compose them together.
            <para />
            sig: Functor f => (a -> b) -> f a -> f b
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="list">The list to be iterated over.</param>
            <returns>The new list.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Map``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Takes a function anda [functor](https://github.com/fantasyland/fantasy-land#functor),applies the function to each of the functor's values, and returnsa functor of the same shape.Ramda provides suitable `map` implementations for `Array` and `Object`,so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.Dispatches to the `map` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.Also treats functions as functors and will compose them together.
            <para />
            sig: Functor f => (a -> b) -> f a -> f b
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="list">The list to be iterated over.</param>
            <returns>The new list.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Map``2(System.Func{``0,``1},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function anda [functor](https://github.com/fantasyland/fantasy-land#functor),applies the function to each of the functor's values, and returnsa functor of the same shape.Ramda provides suitable `map` implementations for `Array` and `Object`,so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.Dispatches to the `map` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.Also treats functions as functors and will compose them together.
            <para />
            sig: Functor f => (a -> b) -> f a -> f b
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="list">The list to be iterated over.</param>
            <returns>The new list.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Map(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function anda [functor](https://github.com/fantasyland/fantasy-land#functor),applies the function to each of the functor's values, and returnsa functor of the same shape.Ramda provides suitable `map` implementations for `Array` and `Object`,so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.Dispatches to the `map` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.Also treats functions as functors and will compose them together.
            <para />
            sig: Functor f => (a -> b) -> f a -> f b
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="list">The list to be iterated over.</param>
            <returns>The new list.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Map``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Takes a function anda [functor](https://github.com/fantasyland/fantasy-land#functor),applies the function to each of the functor's values, and returnsa functor of the same shape.Ramda provides suitable `map` implementations for `Array` and `Object`,so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.Dispatches to the `map` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.Also treats functions as functors and will compose them together.
            <para />
            sig: Functor f => (a -> b) -> f a -> f b
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="list">The list to be iterated over.</param>
            <returns>The new list.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Map(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function anda [functor](https://github.com/fantasyland/fantasy-land#functor),applies the function to each of the functor's values, and returnsa functor of the same shape.Ramda provides suitable `map` implementations for `Array` and `Object`,so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.Dispatches to the `map` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.Also treats functions as functors and will compose them together.
            <para />
            sig: Functor f => (a -> b) -> f a -> f b
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="list">The list to be iterated over.</param>
            <returns>The new list.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Map``2(System.Func{``0,``1},System.Object)">
            <summary>
            Takes a function anda [functor](https://github.com/fantasyland/fantasy-land#functor),applies the function to each of the functor's values, and returnsa functor of the same shape.Ramda provides suitable `map` implementations for `Array` and `Object`,so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.Dispatches to the `map` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.Also treats functions as functors and will compose them together.
            <para />
            sig: Functor f => (a -> b) -> f a -> f b
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="list">The list to be iterated over.</param>
            <returns>The new list.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Map(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Takes a function anda [functor](https://github.com/fantasyland/fantasy-land#functor),applies the function to each of the functor's values, and returnsa functor of the same shape.Ramda provides suitable `map` implementations for `Array` and `Object`,so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.Dispatches to the `map` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.Also treats functions as functors and will compose them together.
            <para />
            sig: Functor f => (a -> b) -> f a -> f b
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="list">The list to be iterated over.</param>
            <returns>The new list.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Map(System.Object,System.Object)">
            <summary>
            Takes a function anda [functor](https://github.com/fantasyland/fantasy-land#functor),applies the function to each of the functor's values, and returnsa functor of the same shape.Ramda provides suitable `map` implementations for `Array` and `Object`,so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.Dispatches to the `map` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.Also treats functions as functors and will compose them together.
            <para />
            sig: Functor f => (a -> b) -> f a -> f b
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="list">The list to be iterated over.</param>
            <returns>The new list.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccum``3(System.Func{``0,``0,System.Tuple{System.Object,System.Object}},``2,System.Collections.Generic.IList{``1})">
            <summary>
            The mapAccum function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from left to right, and returning a final value of thisaccumulator together with the new list.The iterator function receives two arguments, *acc* and *value*, and shouldreturn a tuple *[acc, value]*.
            <para />
            sig: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccum``2(Ramda.NET.RamdaPlaceholder,``1,System.Collections.Generic.IList{``0})">
            <summary>
            The mapAccum function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from left to right, and returning a final value of thisaccumulator together with the new list.The iterator function receives two arguments, *acc* and *value*, and shouldreturn a tuple *[acc, value]*.
            <para />
            sig: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccum``2(System.Func{``0,``0,System.Tuple{System.Object,System.Object}},Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``1})">
            <summary>
            The mapAccum function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from left to right, and returning a final value of thisaccumulator together with the new list.The iterator function receives two arguments, *acc* and *value*, and shouldreturn a tuple *[acc, value]*.
            <para />
            sig: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccum``2(System.Func{``0,``0,System.Tuple{System.Object,System.Object}},``1,Ramda.NET.RamdaPlaceholder)">
            <summary>
            The mapAccum function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from left to right, and returning a final value of thisaccumulator together with the new list.The iterator function receives two arguments, *acc* and *value*, and shouldreturn a tuple *[acc, value]*.
            <para />
            sig: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccum``1(System.Func{``0,``0,System.Tuple{System.Object,System.Object}},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            The mapAccum function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from left to right, and returning a final value of thisaccumulator together with the new list.The iterator function receives two arguments, *acc* and *value*, and shouldreturn a tuple *[acc, value]*.
            <para />
            sig: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccum``1(System.Object,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            The mapAccum function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from left to right, and returning a final value of thisaccumulator together with the new list.The iterator function receives two arguments, *acc* and *value*, and shouldreturn a tuple *[acc, value]*.
            <para />
            sig: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccum``1(System.Object,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            The mapAccum function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from left to right, and returning a final value of thisaccumulator together with the new list.The iterator function receives two arguments, *acc* and *value*, and shouldreturn a tuple *[acc, value]*.
            <para />
            sig: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            The mapAccum function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from left to right, and returning a final value of thisaccumulator together with the new list.The iterator function receives two arguments, *acc* and *value*, and shouldreturn a tuple *[acc, value]*.
            <para />
            sig: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccum``2(System.Object,``1,System.Collections.Generic.IList{``0})">
            <summary>
            The mapAccum function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from left to right, and returning a final value of thisaccumulator together with the new list.The iterator function receives two arguments, *acc* and *value*, and shouldreturn a tuple *[acc, value]*.
            <para />
            sig: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccum(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            The mapAccum function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from left to right, and returning a final value of thisaccumulator together with the new list.The iterator function receives two arguments, *acc* and *value*, and shouldreturn a tuple *[acc, value]*.
            <para />
            sig: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccumRight``3(System.Func{``0,``0,System.Tuple{System.Object,System.Object}},``2,System.Collections.Generic.IList{``1})">
            <summary>
            The mapAccumRight function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from right to left, and returning a final value of thisaccumulator together with the new list.Similar to `mapAccum`, except moves through the input list from the right tothe left.The iterator function receives two arguments, *value* and *acc*, and shouldreturn a tuple *[value, acc]*.
            <para />
            sig: (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccumRight``2(Ramda.NET.RamdaPlaceholder,``1,System.Collections.Generic.IList{``0})">
            <summary>
            The mapAccumRight function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from right to left, and returning a final value of thisaccumulator together with the new list.Similar to `mapAccum`, except moves through the input list from the right tothe left.The iterator function receives two arguments, *value* and *acc*, and shouldreturn a tuple *[value, acc]*.
            <para />
            sig: (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccumRight``2(System.Func{``0,``0,System.Tuple{System.Object,System.Object}},Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``1})">
            <summary>
            The mapAccumRight function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from right to left, and returning a final value of thisaccumulator together with the new list.Similar to `mapAccum`, except moves through the input list from the right tothe left.The iterator function receives two arguments, *value* and *acc*, and shouldreturn a tuple *[value, acc]*.
            <para />
            sig: (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccumRight``2(System.Func{``0,``0,System.Tuple{System.Object,System.Object}},``1,Ramda.NET.RamdaPlaceholder)">
            <summary>
            The mapAccumRight function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from right to left, and returning a final value of thisaccumulator together with the new list.Similar to `mapAccum`, except moves through the input list from the right tothe left.The iterator function receives two arguments, *value* and *acc*, and shouldreturn a tuple *[value, acc]*.
            <para />
            sig: (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccumRight``1(System.Func{``0,``0,System.Tuple{System.Object,System.Object}},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            The mapAccumRight function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from right to left, and returning a final value of thisaccumulator together with the new list.Similar to `mapAccum`, except moves through the input list from the right tothe left.The iterator function receives two arguments, *value* and *acc*, and shouldreturn a tuple *[value, acc]*.
            <para />
            sig: (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccumRight``1(System.Object,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            The mapAccumRight function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from right to left, and returning a final value of thisaccumulator together with the new list.Similar to `mapAccum`, except moves through the input list from the right tothe left.The iterator function receives two arguments, *value* and *acc*, and shouldreturn a tuple *[value, acc]*.
            <para />
            sig: (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccumRight``1(System.Object,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            The mapAccumRight function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from right to left, and returning a final value of thisaccumulator together with the new list.Similar to `mapAccum`, except moves through the input list from the right tothe left.The iterator function receives two arguments, *value* and *acc*, and shouldreturn a tuple *[value, acc]*.
            <para />
            sig: (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccumRight(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            The mapAccumRight function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from right to left, and returning a final value of thisaccumulator together with the new list.Similar to `mapAccum`, except moves through the input list from the right tothe left.The iterator function receives two arguments, *value* and *acc*, and shouldreturn a tuple *[value, acc]*.
            <para />
            sig: (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccumRight``2(System.Object,``1,System.Collections.Generic.IList{``0})">
            <summary>
            The mapAccumRight function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from right to left, and returning a final value of thisaccumulator together with the new list.Similar to `mapAccum`, except moves through the input list from the right tothe left.The iterator function receives two arguments, *value* and *acc*, and shouldreturn a tuple *[value, acc]*.
            <para />
            sig: (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapAccumRight(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            The mapAccumRight function behaves like a combination of map and reduce; itapplies a function to each element of a list, passing an accumulatingparameter from right to left, and returning a final value of thisaccumulator together with the new list.Similar to `mapAccum`, except moves through the input list from the right tothe left.The iterator function receives two arguments, *value* and *acc*, and shouldreturn a tuple *[value, acc]*.
            <para />
            sig: (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)
            </summary>
            <param name="fn">The function to be called on every element of the input `list`.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.MapAccum(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapObjIndexed``2(System.Func{``0,``1},``0)">
            <summary>
            An Object-specific version of `map`. The function is applied to threearguments: *(value, key, obj)*. If only the value is significant, use`map` instead.
            <para />
            sig: ((*, String, Object) -> *) -> Object -> Object
            </summary>
            <param name="fn">first</param>
            <param name="obj">second</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Map(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapObjIndexed``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            An Object-specific version of `map`. The function is applied to threearguments: *(value, key, obj)*. If only the value is significant, use`map` instead.
            <para />
            sig: ((*, String, Object) -> *) -> Object -> Object
            </summary>
            <param name="fn">first</param>
            <param name="obj">second</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Map(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapObjIndexed``2(System.Func{``0,``1},Ramda.NET.RamdaPlaceholder)">
            <summary>
            An Object-specific version of `map`. The function is applied to threearguments: *(value, key, obj)*. If only the value is significant, use`map` instead.
            <para />
            sig: ((*, String, Object) -> *) -> Object -> Object
            </summary>
            <param name="fn">first</param>
            <param name="obj">second</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Map(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapObjIndexed(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            An Object-specific version of `map`. The function is applied to threearguments: *(value, key, obj)*. If only the value is significant, use`map` instead.
            <para />
            sig: ((*, String, Object) -> *) -> Object -> Object
            </summary>
            <param name="fn">first</param>
            <param name="obj">second</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Map(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapObjIndexed``1(System.Object,``0)">
            <summary>
            An Object-specific version of `map`. The function is applied to threearguments: *(value, key, obj)*. If only the value is significant, use`map` instead.
            <para />
            sig: ((*, String, Object) -> *) -> Object -> Object
            </summary>
            <param name="fn">first</param>
            <param name="obj">second</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Map(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MapObjIndexed(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            An Object-specific version of `map`. The function is applied to threearguments: *(value, key, obj)*. If only the value is significant, use`map` instead.
            <para />
            sig: ((*, String, Object) -> *) -> Object -> Object
            </summary>
            <param name="fn">first</param>
            <param name="obj">second</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Map(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Match(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Tests a regular expression against a String. Note that this function willreturn an empty array when there are no matches. This differs from[`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)which returns `null` when there are no matches.
            <para />
            sig: RegExp -> String -> [String | Undefined]
            </summary>
            <param name="rx">A regular expression.</param>
            <param name="str">The string to match against</param>
            <returns>The list of matches or empty array.</returns>
            <see cref="M:Ramda.NET.R.Test(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Match(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Tests a regular expression against a String. Note that this function willreturn an empty array when there are no matches. This differs from[`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)which returns `null` when there are no matches.
            <para />
            sig: RegExp -> String -> [String | Undefined]
            </summary>
            <param name="rx">A regular expression.</param>
            <param name="str">The string to match against</param>
            <returns>The list of matches or empty array.</returns>
            <see cref="M:Ramda.NET.R.Test(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Match(System.Text.RegularExpressions.Regex,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Tests a regular expression against a String. Note that this function willreturn an empty array when there are no matches. This differs from[`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)which returns `null` when there are no matches.
            <para />
            sig: RegExp -> String -> [String | Undefined]
            </summary>
            <param name="rx">A regular expression.</param>
            <param name="str">The string to match against</param>
            <returns>The list of matches or empty array.</returns>
            <see cref="M:Ramda.NET.R.Test(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Match(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Tests a regular expression against a String. Note that this function willreturn an empty array when there are no matches. This differs from[`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)which returns `null` when there are no matches.
            <para />
            sig: RegExp -> String -> [String | Undefined]
            </summary>
            <param name="rx">A regular expression.</param>
            <param name="str">The string to match against</param>
            <returns>The list of matches or empty array.</returns>
            <see cref="M:Ramda.NET.R.Test(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Match(System.String,System.String)">
            <summary>
            Tests a regular expression against a String. Note that this function willreturn an empty array when there are no matches. This differs from[`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)which returns `null` when there are no matches.
            <para />
            sig: RegExp -> String -> [String | Undefined]
            </summary>
            <param name="rx">A regular expression.</param>
            <param name="str">The string to match against</param>
            <returns>The list of matches or empty array.</returns>
            <see cref="M:Ramda.NET.R.Test(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Match(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Tests a regular expression against a String. Note that this function willreturn an empty array when there are no matches. This differs from[`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)which returns `null` when there are no matches.
            <para />
            sig: RegExp -> String -> [String | Undefined]
            </summary>
            <param name="rx">A regular expression.</param>
            <param name="str">The string to match against</param>
            <returns>The list of matches or empty array.</returns>
            <see cref="M:Ramda.NET.R.Test(System.String,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.MathMod(System.Int32,System.UInt32)">
            <summary>
            mathMod behaves like the modulo operator should mathematically, unlike the`%` operator (and by extension, R.modulo). So while "-17 % 5" is -2,mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaNwhen the modulus is zero or negative.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="m">The dividend.</param>
            <param name="p">the modulus.</param>
            <returns>The result of `b mod a`.</returns>
        </member>
        <member name="M:Ramda.NET.R.MathMod(Ramda.NET.RamdaPlaceholder,System.UInt32)">
            <summary>
            mathMod behaves like the modulo operator should mathematically, unlike the`%` operator (and by extension, R.modulo). So while "-17 % 5" is -2,mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaNwhen the modulus is zero or negative.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="m">The dividend.</param>
            <param name="p">the modulus.</param>
            <returns>The result of `b mod a`.</returns>
        </member>
        <member name="M:Ramda.NET.R.MathMod(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            mathMod behaves like the modulo operator should mathematically, unlike the`%` operator (and by extension, R.modulo). So while "-17 % 5" is -2,mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaNwhen the modulus is zero or negative.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="m">The dividend.</param>
            <param name="p">the modulus.</param>
            <returns>The result of `b mod a`.</returns>
        </member>
        <member name="M:Ramda.NET.R.MathMod(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            mathMod behaves like the modulo operator should mathematically, unlike the`%` operator (and by extension, R.modulo). So while "-17 % 5" is -2,mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaNwhen the modulus is zero or negative.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="m">The dividend.</param>
            <param name="p">the modulus.</param>
            <returns>The result of `b mod a`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Max(System.Char,System.Char)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(Ramda.NET.RamdaPlaceholder,System.Char)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(System.Char,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(System.DateTime,System.DateTime)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(Ramda.NET.RamdaPlaceholder,System.DateTime)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(System.DateTime,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(System.Double,System.Double)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(Ramda.NET.RamdaPlaceholder,System.Double)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(System.Double,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(System.Int32,System.Int32)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(System.String,System.String)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Max(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the larger of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.MaxBy``1(System.Func{``0,``0},``0,``0)">
            <summary>
            Takes a function and two values, and returns whichever value produces thelarger result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MaxBy``1(Ramda.NET.RamdaPlaceholder,``0,``0)">
            <summary>
            Takes a function and two values, and returns whichever value produces thelarger result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MaxBy``1(System.Func{``0,``0},Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Takes a function and two values, and returns whichever value produces thelarger result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MaxBy``1(System.Func{``0,``0},``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values, and returns whichever value produces thelarger result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MaxBy``1(System.Func{``0,``0},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values, and returns whichever value produces thelarger result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MaxBy``1(System.Object,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Takes a function and two values, and returns whichever value produces thelarger result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MaxBy``1(System.Object,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values, and returns whichever value produces thelarger result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values, and returns whichever value produces thelarger result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MaxBy``1(System.Object,``0,``0)">
            <summary>
            Takes a function and two values, and returns whichever value produces thelarger result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MaxBy(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values, and returns whichever value produces thelarger result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Mean(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the mean of the given list of numbers.
            <para />
            sig: [Number] -> Number
            </summary>
            <param name="list">first</param>
            <returns>Number</returns>
        </member>
        <member name="M:Ramda.NET.R.Mean(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the mean of the given list of numbers.
            <para />
            sig: [Number] -> Number
            </summary>
            <param name="list">first</param>
            <returns>Number</returns>
        </member>
        <member name="M:Ramda.NET.R.Mean(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Returns the mean of the given list of numbers.
            <para />
            sig: [Number] -> Number
            </summary>
            <param name="list">first</param>
            <returns>Number</returns>
        </member>
        <member name="M:Ramda.NET.R.Median(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the median of the given list of numbers.
            <para />
            sig: [Number] -> Number
            </summary>
            <param name="list">first</param>
            <returns>Number</returns>
        </member>
        <member name="M:Ramda.NET.R.Median(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the median of the given list of numbers.
            <para />
            sig: [Number] -> Number
            </summary>
            <param name="list">first</param>
            <returns>Number</returns>
        </member>
        <member name="M:Ramda.NET.R.Median(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Returns the median of the given list of numbers.
            <para />
            sig: [Number] -> Number
            </summary>
            <param name="list">first</param>
            <returns>Number</returns>
        </member>
        <member name="M:Ramda.NET.R.Memoize(System.Delegate)">
            <summary>
            Creates a new function that, when invoked, caches the result of calling `fn`for a given argument set and returns the result. Subsequent calls to thememoized `fn` with the same argument set will not result in an additionalcall to `fn`; instead, the cached result for that set of arguments will bereturned.
            <para />
            sig: (*... -> a) -> (*... -> a)
            </summary>
            <param name="fn">The function to memoize.</param>
            <returns>Memoized version of `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Memoize(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new function that, when invoked, caches the result of calling `fn`for a given argument set and returns the result. Subsequent calls to thememoized `fn` with the same argument set will not result in an additionalcall to `fn`; instead, the cached result for that set of arguments will bereturned.
            <para />
            sig: (*... -> a) -> (*... -> a)
            </summary>
            <param name="fn">The function to memoize.</param>
            <returns>Memoized version of `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Memoize(System.Object)">
            <summary>
            Creates a new function that, when invoked, caches the result of calling `fn`for a given argument set and returns the result. Subsequent calls to thememoized `fn` with the same argument set will not result in an additionalcall to `fn`; instead, the cached result for that set of arguments will bereturned.
            <para />
            sig: (*... -> a) -> (*... -> a)
            </summary>
            <param name="fn">The function to memoize.</param>
            <returns>Memoized version of `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Merge``2(``0,``1)">
            <summary>
            Create a new object with the own properties of the first object merged withthe own properties of the second object. If a key exists in both objects,the value from the second object will be used.
            <para />
            sig: {k: v} -> {k: v} -> {k: v}
            </summary>
            <param name="l">first</param>
            <param name="r">second</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
            <see cref="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.Merge``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Create a new object with the own properties of the first object merged withthe own properties of the second object. If a key exists in both objects,the value from the second object will be used.
            <para />
            sig: {k: v} -> {k: v} -> {k: v}
            </summary>
            <param name="l">first</param>
            <param name="r">second</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
            <see cref="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.Merge``1(``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Create a new object with the own properties of the first object merged withthe own properties of the second object. If a key exists in both objects,the value from the second object will be used.
            <para />
            sig: {k: v} -> {k: v} -> {k: v}
            </summary>
            <param name="l">first</param>
            <param name="r">second</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
            <see cref="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Create a new object with the own properties of the first object merged withthe own properties of the second object. If a key exists in both objects,the value from the second object will be used.
            <para />
            sig: {k: v} -> {k: v} -> {k: v}
            </summary>
            <param name="l">first</param>
            <param name="r">second</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
            <see cref="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeAll``1(System.Collections.Generic.IList{``0})">
            <summary>
            Merges a list of objects together into one object.
            <para />
            sig: [{k: v}] -> {k: v}
            </summary>
            <param name="list">An array of objects</param>
            <returns>A merged object.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeAll(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Merges a list of objects together into one object.
            <para />
            sig: [{k: v}] -> {k: v}
            </summary>
            <param name="list">An array of objects</param>
            <returns>A merged object.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWith``3(System.Func{``0,``1,``2},System.Object,System.Object)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the valuesassociated with the key in each object, with the result being used as thevalue associated with the key in the returned object. The key will beexcluded from the returned object if the resulting value is `undefined`.
            <para />
            sig: (a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the valuesassociated with the key in each object, with the result being used as thevalue associated with the key in the returned object. The key will beexcluded from the returned object if the resulting value is `undefined`.
            <para />
            sig: (a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWith``3(System.Func{``0,``1,``2},Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the valuesassociated with the key in each object, with the result being used as thevalue associated with the key in the returned object. The key will beexcluded from the returned object if the resulting value is `undefined`.
            <para />
            sig: (a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWith``3(System.Func{``0,``1,``2},System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the valuesassociated with the key in each object, with the result being used as thevalue associated with the key in the returned object. The key will beexcluded from the returned object if the resulting value is `undefined`.
            <para />
            sig: (a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWith``3(System.Func{``0,``1,``2},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the valuesassociated with the key in each object, with the result being used as thevalue associated with the key in the returned object. The key will beexcluded from the returned object if the resulting value is `undefined`.
            <para />
            sig: (a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWith(System.Object,Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the valuesassociated with the key in each object, with the result being used as thevalue associated with the key in the returned object. The key will beexcluded from the returned object if the resulting value is `undefined`.
            <para />
            sig: (a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWith(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the valuesassociated with the key in each object, with the result being used as thevalue associated with the key in the returned object. The key will beexcluded from the returned object if the resulting value is `undefined`.
            <para />
            sig: (a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the valuesassociated with the key in each object, with the result being used as thevalue associated with the key in the returned object. The key will beexcluded from the returned object if the resulting value is `undefined`.
            <para />
            sig: (a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWith(System.Object,System.Object,System.Object)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the valuesassociated with the key in each object, with the result being used as thevalue associated with the key in the returned object. The key will beexcluded from the returned object if the resulting value is `undefined`.
            <para />
            sig: (a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the valuesassociated with the key in each object, with the result being used as thevalue associated with the key in the returned object. The key will beexcluded from the returned object if the resulting value is `undefined`.
            <para />
            sig: (a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWithKey``3(System.Func{System.String,``0,``1,``2},System.Object,System.Object)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the keyand the values associated with the key in each object, with the result beingused as the value associated with the key in the returned object. The keywill be excluded from the returned object if the resulting value is`undefined`.
            <para />
            sig: (String -> a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the keyand the values associated with the key in each object, with the result beingused as the value associated with the key in the returned object. The keywill be excluded from the returned object if the resulting value is`undefined`.
            <para />
            sig: (String -> a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWithKey``3(System.Func{System.String,``0,``1,``2},Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the keyand the values associated with the key in each object, with the result beingused as the value associated with the key in the returned object. The keywill be excluded from the returned object if the resulting value is`undefined`.
            <para />
            sig: (String -> a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWithKey``3(System.Func{System.String,``0,``1,``2},System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the keyand the values associated with the key in each object, with the result beingused as the value associated with the key in the returned object. The keywill be excluded from the returned object if the resulting value is`undefined`.
            <para />
            sig: (String -> a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWithKey``3(System.Func{System.String,``0,``1,``2},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the keyand the values associated with the key in each object, with the result beingused as the value associated with the key in the returned object. The keywill be excluded from the returned object if the resulting value is`undefined`.
            <para />
            sig: (String -> a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWithKey(System.Object,Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the keyand the values associated with the key in each object, with the result beingused as the value associated with the key in the returned object. The keywill be excluded from the returned object if the resulting value is`undefined`.
            <para />
            sig: (String -> a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWithKey(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the keyand the values associated with the key in each object, with the result beingused as the value associated with the key in the returned object. The keywill be excluded from the returned object if the resulting value is`undefined`.
            <para />
            sig: (String -> a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWithKey(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the keyand the values associated with the key in each object, with the result beingused as the value associated with the key in the returned object. The keywill be excluded from the returned object if the resulting value is`undefined`.
            <para />
            sig: (String -> a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWithKey(System.Object,System.Object,System.Object)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the keyand the values associated with the key in each object, with the result beingused as the value associated with the key in the returned object. The keywill be excluded from the returned object if the resulting value is`undefined`.
            <para />
            sig: (String -> a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.MergeWithKey(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object with the own properties of the two provided objects. Ifa key exists in both objects, the provided function is applied to the keyand the values associated with the key in each object, with the result beingused as the value associated with the key in the returned object. The keywill be excluded from the returned object if the resulting value is`undefined`.
            <para />
            sig: (String -> a -> a -> a) -> {a} -> {a} -> {a}
            </summary>
            <param name="fn">first</param>
            <param name="l">second</param>
            <param name="r">third</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Merge(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.MergeWith(Ramda.NET.RamdaPlaceholder,System.Object,System.Object)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(System.Char,System.Char)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(Ramda.NET.RamdaPlaceholder,System.Char)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(System.Char,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(System.DateTime,System.DateTime)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(Ramda.NET.RamdaPlaceholder,System.DateTime)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(System.DateTime,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(System.Double,System.Double)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(Ramda.NET.RamdaPlaceholder,System.Double)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(System.Double,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(System.Int32,System.Int32)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(System.String,System.String)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.Min(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the smaller of its two arguments.
            <para />
            sig: Ord a => a -> a -> a
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Max(System.Char,System.Char)"/>
        </member>
        <member name="M:Ramda.NET.R.MinBy``1(System.Func{``0,``0},``0,``0)">
            <summary>
            Takes a function and two values, and returns whichever value produces thesmaller result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MinBy``1(Ramda.NET.RamdaPlaceholder,``0,``0)">
            <summary>
            Takes a function and two values, and returns whichever value produces thesmaller result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MinBy``1(System.Func{``0,``0},Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Takes a function and two values, and returns whichever value produces thesmaller result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MinBy``1(System.Func{``0,``0},``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values, and returns whichever value produces thesmaller result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MinBy``1(System.Func{``0,``0},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values, and returns whichever value produces thesmaller result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MinBy``1(System.Object,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Takes a function and two values, and returns whichever value produces thesmaller result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MinBy``1(System.Object,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values, and returns whichever value produces thesmaller result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MinBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values, and returns whichever value produces thesmaller result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MinBy``1(System.Object,``0,``0)">
            <summary>
            Takes a function and two values, and returns whichever value produces thesmaller result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.MinBy(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function and two values, and returns whichever value produces thesmaller result when passed to the provided function.
            <para />
            sig: Ord b => (a -> b) -> a -> a -> a
            </summary>
            <param name="f">first</param>
            <param name="a">second</param>
            <param name="b">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Min(System.Char,System.Char)"/>
            <see cref="M:Ramda.NET.R.MaxBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Modulo(System.Double,System.Double)">
            <summary>
            Divides the first parameter by the second and returns the remainder. Notethat this function preserves the JavaScript-style behavior for modulo. Formathematical modulo see `mathMod`.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The value to the divide.</param>
            <param name="b">The pseudo-modulus</param>
            <returns>The result of `b % a`.</returns>
            <see cref="M:Ramda.NET.R.MathMod(System.Int32,System.UInt32)"/>
        </member>
        <member name="M:Ramda.NET.R.Modulo(Ramda.NET.RamdaPlaceholder,System.Double)">
            <summary>
            Divides the first parameter by the second and returns the remainder. Notethat this function preserves the JavaScript-style behavior for modulo. Formathematical modulo see `mathMod`.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The value to the divide.</param>
            <param name="b">The pseudo-modulus</param>
            <returns>The result of `b % a`.</returns>
            <see cref="M:Ramda.NET.R.MathMod(System.Int32,System.UInt32)"/>
        </member>
        <member name="M:Ramda.NET.R.Modulo(System.Double,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Divides the first parameter by the second and returns the remainder. Notethat this function preserves the JavaScript-style behavior for modulo. Formathematical modulo see `mathMod`.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The value to the divide.</param>
            <param name="b">The pseudo-modulus</param>
            <returns>The result of `b % a`.</returns>
            <see cref="M:Ramda.NET.R.MathMod(System.Int32,System.UInt32)"/>
        </member>
        <member name="M:Ramda.NET.R.Modulo(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Divides the first parameter by the second and returns the remainder. Notethat this function preserves the JavaScript-style behavior for modulo. Formathematical modulo see `mathMod`.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The value to the divide.</param>
            <param name="b">The pseudo-modulus</param>
            <returns>The result of `b % a`.</returns>
            <see cref="M:Ramda.NET.R.MathMod(System.Int32,System.UInt32)"/>
        </member>
        <member name="M:Ramda.NET.R.Modulo(System.Int32,System.Int32)">
            <summary>
            Divides the first parameter by the second and returns the remainder. Notethat this function preserves the JavaScript-style behavior for modulo. Formathematical modulo see `mathMod`.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The value to the divide.</param>
            <param name="b">The pseudo-modulus</param>
            <returns>The result of `b % a`.</returns>
            <see cref="M:Ramda.NET.R.MathMod(System.Int32,System.UInt32)"/>
        </member>
        <member name="M:Ramda.NET.R.Modulo(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Divides the first parameter by the second and returns the remainder. Notethat this function preserves the JavaScript-style behavior for modulo. Formathematical modulo see `mathMod`.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The value to the divide.</param>
            <param name="b">The pseudo-modulus</param>
            <returns>The result of `b % a`.</returns>
            <see cref="M:Ramda.NET.R.MathMod(System.Int32,System.UInt32)"/>
        </member>
        <member name="M:Ramda.NET.R.Modulo(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Divides the first parameter by the second and returns the remainder. Notethat this function preserves the JavaScript-style behavior for modulo. Formathematical modulo see `mathMod`.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The value to the divide.</param>
            <param name="b">The pseudo-modulus</param>
            <returns>The result of `b % a`.</returns>
            <see cref="M:Ramda.NET.R.MathMod(System.Int32,System.UInt32)"/>
        </member>
        <member name="M:Ramda.NET.R.Multiply(System.Double,System.Double)">
            <summary>
            Multiplies two numbers. Equivalent to `a * b` but curried.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a * b`.</returns>
            <see cref="M:Ramda.NET.R.Divide(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Multiply(Ramda.NET.RamdaPlaceholder,System.Double)">
            <summary>
            Multiplies two numbers. Equivalent to `a * b` but curried.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a * b`.</returns>
            <see cref="M:Ramda.NET.R.Divide(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Multiply(System.Double,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Multiplies two numbers. Equivalent to `a * b` but curried.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a * b`.</returns>
            <see cref="M:Ramda.NET.R.Divide(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Multiply(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Multiplies two numbers. Equivalent to `a * b` but curried.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a * b`.</returns>
            <see cref="M:Ramda.NET.R.Divide(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Multiply(System.Int32,System.Int32)">
            <summary>
            Multiplies two numbers. Equivalent to `a * b` but curried.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a * b`.</returns>
            <see cref="M:Ramda.NET.R.Divide(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Multiply(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Multiplies two numbers. Equivalent to `a * b` but curried.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a * b`.</returns>
            <see cref="M:Ramda.NET.R.Divide(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.Multiply(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Multiplies two numbers. Equivalent to `a * b` but curried.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a * b`.</returns>
            <see cref="M:Ramda.NET.R.Divide(System.Double,System.Double)"/>
        </member>
        <member name="M:Ramda.NET.R.NAry(System.Int32,System.Delegate)">
            <summary>
            Wraps a function of any arity (including nullary) in a function that acceptsexactly `n` parameters. Any extraneous parameters will not be passed to thesupplied function.
            <para />
            sig: Number -> (* -> a) -> (* -> a)
            </summary>
            <param name="n">The desired arity of the new function.</param>
            <param name="fn">The function to wrap.</param>
            <returns>A new function wrapping `fn`. The new function is guaranteed to be of arity `n`.</returns>
        </member>
        <member name="M:Ramda.NET.R.NAry(Ramda.NET.RamdaPlaceholder,System.Delegate)">
            <summary>
            Wraps a function of any arity (including nullary) in a function that acceptsexactly `n` parameters. Any extraneous parameters will not be passed to thesupplied function.
            <para />
            sig: Number -> (* -> a) -> (* -> a)
            </summary>
            <param name="n">The desired arity of the new function.</param>
            <param name="fn">The function to wrap.</param>
            <returns>A new function wrapping `fn`. The new function is guaranteed to be of arity `n`.</returns>
        </member>
        <member name="M:Ramda.NET.R.NAry(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Wraps a function of any arity (including nullary) in a function that acceptsexactly `n` parameters. Any extraneous parameters will not be passed to thesupplied function.
            <para />
            sig: Number -> (* -> a) -> (* -> a)
            </summary>
            <param name="n">The desired arity of the new function.</param>
            <param name="fn">The function to wrap.</param>
            <returns>A new function wrapping `fn`. The new function is guaranteed to be of arity `n`.</returns>
        </member>
        <member name="M:Ramda.NET.R.NAry(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Wraps a function of any arity (including nullary) in a function that acceptsexactly `n` parameters. Any extraneous parameters will not be passed to thesupplied function.
            <para />
            sig: Number -> (* -> a) -> (* -> a)
            </summary>
            <param name="n">The desired arity of the new function.</param>
            <param name="fn">The function to wrap.</param>
            <returns>A new function wrapping `fn`. The new function is guaranteed to be of arity `n`.</returns>
        </member>
        <member name="M:Ramda.NET.R.NAry(System.Int32,System.Object)">
            <summary>
            Wraps a function of any arity (including nullary) in a function that acceptsexactly `n` parameters. Any extraneous parameters will not be passed to thesupplied function.
            <para />
            sig: Number -> (* -> a) -> (* -> a)
            </summary>
            <param name="n">The desired arity of the new function.</param>
            <param name="fn">The function to wrap.</param>
            <returns>A new function wrapping `fn`. The new function is guaranteed to be of arity `n`.</returns>
        </member>
        <member name="M:Ramda.NET.R.NAry(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Wraps a function of any arity (including nullary) in a function that acceptsexactly `n` parameters. Any extraneous parameters will not be passed to thesupplied function.
            <para />
            sig: Number -> (* -> a) -> (* -> a)
            </summary>
            <param name="n">The desired arity of the new function.</param>
            <param name="fn">The function to wrap.</param>
            <returns>A new function wrapping `fn`. The new function is guaranteed to be of arity `n`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Negate(System.Double)">
            <summary>
            Negates its argument.
            <para />
            sig: Number -> Number
            </summary>
            <param name="n">first</param>
            <returns>Number</returns>
        </member>
        <member name="M:Ramda.NET.R.Negate(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Negates its argument.
            <para />
            sig: Number -> Number
            </summary>
            <param name="n">first</param>
            <returns>Number</returns>
        </member>
        <member name="M:Ramda.NET.R.Negate(System.Int32)">
            <summary>
            Negates its argument.
            <para />
            sig: Number -> Number
            </summary>
            <param name="n">first</param>
            <returns>Number</returns>
        </member>
        <member name="M:Ramda.NET.R.None``1(System.Func{``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Returns `true` if no elements of the list match the predicate, `false`otherwise.Dispatches to the `any` method of the second argument, if present.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is not satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.All(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.None``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns `true` if no elements of the list match the predicate, `false`otherwise.Dispatches to the `any` method of the second argument, if present.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is not satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.All(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.None``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if no elements of the list match the predicate, `false`otherwise.Dispatches to the `any` method of the second argument, if present.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is not satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.All(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.None(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if no elements of the list match the predicate, `false`otherwise.Dispatches to the `any` method of the second argument, if present.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is not satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.All(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.None``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Returns `true` if no elements of the list match the predicate, `false`otherwise.Dispatches to the `any` method of the second argument, if present.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is not satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.All(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.None(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if no elements of the list match the predicate, `false`otherwise.Dispatches to the `any` method of the second argument, if present.
            <para />
            sig: (a -> Boolean) -> [a] -> Boolean
            </summary>
            <param name="fn">The predicate function.</param>
            <param name="list">The array to consider.</param>
            <returns>`true` if the predicate is not satisfied by every element, `false` otherwise.</returns>
            <see cref="M:Ramda.NET.R.All(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Any(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Not(System.Boolean)">
            <summary>
            A function that returns the `!` of its argument. It will return `true` whenpassed false-y value, and `false` when passed a truth-y one.
            <para />
            sig: * -> Boolean
            </summary>
            <param name="a">any value</param>
            <returns>the logical inverse of passed argument.</returns>
            <see cref="M:Ramda.NET.R.Complement(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Not(Ramda.NET.RamdaPlaceholder)">
            <summary>
            A function that returns the `!` of its argument. It will return `true` whenpassed false-y value, and `false` when passed a truth-y one.
            <para />
            sig: * -> Boolean
            </summary>
            <param name="a">any value</param>
            <returns>the logical inverse of passed argument.</returns>
            <see cref="M:Ramda.NET.R.Complement(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Nth``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the nth element of the given list or string. If n is negative theelement at index length + n is returned.
            <para />
            sig: Number -> [a] -> a | Undefined
            </summary>
            <param name="offset">first</param>
            <param name="list">second</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.Nth``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the nth element of the given list or string. If n is negative theelement at index length + n is returned.
            <para />
            sig: Number -> [a] -> a | Undefined
            </summary>
            <param name="offset">first</param>
            <param name="list">second</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.Nth(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the nth element of the given list or string. If n is negative theelement at index length + n is returned.
            <para />
            sig: Number -> [a] -> a | Undefined
            </summary>
            <param name="offset">first</param>
            <param name="list">second</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.Nth(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the nth element of the given list or string. If n is negative theelement at index length + n is returned.
            <para />
            sig: Number -> [a] -> a | Undefined
            </summary>
            <param name="offset">first</param>
            <param name="list">second</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.NthArg``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a function which returns its nth argument.
            <para />
            sig: Number -> *... -> *
            </summary>
            <param name="n">first</param>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.NthArg``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a function which returns its nth argument.
            <para />
            sig: Number -> *... -> *
            </summary>
            <param name="n">first</param>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.NthArg(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a function which returns its nth argument.
            <para />
            sig: Number -> *... -> *
            </summary>
            <param name="n">first</param>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.NthArg(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a function which returns its nth argument.
            <para />
            sig: Number -> *... -> *
            </summary>
            <param name="n">first</param>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.ObjOf``1(System.String,``0)">
            <summary>
            Creates an object containing a single key:value pair.
            <para />
            sig: String -> a -> {String:a}
            </summary>
            <param name="key">first</param>
            <param name="val">second</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Pair(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ObjOf``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Creates an object containing a single key:value pair.
            <para />
            sig: String -> a -> {String:a}
            </summary>
            <param name="key">first</param>
            <param name="val">second</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Pair(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ObjOf(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates an object containing a single key:value pair.
            <para />
            sig: String -> a -> {String:a}
            </summary>
            <param name="key">first</param>
            <param name="val">second</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Pair(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ObjOf(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates an object containing a single key:value pair.
            <para />
            sig: String -> a -> {String:a}
            </summary>
            <param name="key">first</param>
            <param name="val">second</param>
            <returns>Object</returns>
            <see cref="M:Ramda.NET.R.Pair(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Of``1(``0)">
            <summary>
            Returns a singleton array containing the value provided.Note this `of` is different from the ES6 `of`; Seehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
            <para />
            sig: a -> [a]
            </summary>
            <param name="x">any value</param>
            <returns>An array wrapping `x`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Of(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a singleton array containing the value provided.Note this `of` is different from the ES6 `of`; Seehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
            <para />
            sig: a -> [a]
            </summary>
            <param name="x">any value</param>
            <returns>An array wrapping `x`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Omit``1(System.Collections.Generic.IList{System.String},``0)">
            <summary>
            Returns a partial copy of an object omitting the keys specified.
            <para />
            sig: [String] -> {String: *} -> {String: *}
            </summary>
            <param name="names">an array of String property names to omit from the new object</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with properties from `names` not on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Omit``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns a partial copy of an object omitting the keys specified.
            <para />
            sig: [String] -> {String: *} -> {String: *}
            </summary>
            <param name="names">an array of String property names to omit from the new object</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with properties from `names` not on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Omit(System.Collections.Generic.IList{System.String},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a partial copy of an object omitting the keys specified.
            <para />
            sig: [String] -> {String: *} -> {String: *}
            </summary>
            <param name="names">an array of String property names to omit from the new object</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with properties from `names` not on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Omit(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a partial copy of an object omitting the keys specified.
            <para />
            sig: [String] -> {String: *} -> {String: *}
            </summary>
            <param name="names">an array of String property names to omit from the new object</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with properties from `names` not on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Omit``1(System.String,``0)">
            <summary>
            Returns a partial copy of an object omitting the keys specified.
            <para />
            sig: [String] -> {String: *} -> {String: *}
            </summary>
            <param name="names">an array of String property names to omit from the new object</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with properties from `names` not on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Omit(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a partial copy of an object omitting the keys specified.
            <para />
            sig: [String] -> {String: *} -> {String: *}
            </summary>
            <param name="names">an array of String property names to omit from the new object</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with properties from `names` not on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Once``1(``0)">
            <summary>
            Accepts a function `fn` and returns a function that guards invocation of`fn` such that `fn` can only ever be called once, no matter how many timesthe returned function is invoked. The first value calculated is returned insubsequent invocations.
            <para />
            sig: (a... -> b) -> (a... -> b)
            </summary>
            <param name="fn">The function to wrap in a call-only-once wrapper.</param>
            <returns>The wrapped function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Once(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Accepts a function `fn` and returns a function that guards invocation of`fn` such that `fn` can only ever be called once, no matter how many timesthe returned function is invoked. The first value calculated is returned insubsequent invocations.
            <para />
            sig: (a... -> b) -> (a... -> b)
            </summary>
            <param name="fn">The function to wrap in a call-only-once wrapper.</param>
            <returns>The wrapped function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Once(System.Object)">
            <summary>
            Accepts a function `fn` and returns a function that guards invocation of`fn` such that `fn` can only ever be called once, no matter how many timesthe returned function is invoked. The first value calculated is returned insubsequent invocations.
            <para />
            sig: (a... -> b) -> (a... -> b)
            </summary>
            <param name="fn">The function to wrap in a call-only-once wrapper.</param>
            <returns>The wrapped function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Or(System.Boolean,System.Boolean)">
            <summary>
            Returns `true` if one or both of its arguments are `true`. Returns `false`if both arguments are `false`.
            <para />
            sig: a -> b -> a | b
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>the first argument if truthy, otherwise the second argument.</returns>
            <see cref="M:Ramda.NET.R.Either(System.Delegate,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Or(Ramda.NET.RamdaPlaceholder,System.Boolean)">
            <summary>
            Returns `true` if one or both of its arguments are `true`. Returns `false`if both arguments are `false`.
            <para />
            sig: a -> b -> a | b
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>the first argument if truthy, otherwise the second argument.</returns>
            <see cref="M:Ramda.NET.R.Either(System.Delegate,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Or(System.Boolean,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if one or both of its arguments are `true`. Returns `false`if both arguments are `false`.
            <para />
            sig: a -> b -> a | b
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>the first argument if truthy, otherwise the second argument.</returns>
            <see cref="M:Ramda.NET.R.Either(System.Delegate,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Or(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if one or both of its arguments are `true`. Returns `false`if both arguments are `false`.
            <para />
            sig: a -> b -> a | b
            </summary>
            <param name="a">first</param>
            <param name="b">second</param>
            <returns>the first argument if truthy, otherwise the second argument.</returns>
            <see cref="M:Ramda.NET.R.Either(System.Delegate,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Over``2(System.Func{System.Func{``0,Ramda.NET.R.Functor},System.Func{``0,Ramda.NET.R.Functor}},System.Func{``1,``1},``0)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the result of applying the given function tothe focused value.
            <para />
            sig: Lens s a -> (a -> a) -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Over``2(Ramda.NET.RamdaPlaceholder,System.Func{``1,``1},``0)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the result of applying the given function tothe focused value.
            <para />
            sig: Lens s a -> (a -> a) -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Over``1(System.Func{System.Func{``0,Ramda.NET.R.Functor},System.Func{``0,Ramda.NET.R.Functor}},Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the result of applying the given function tothe focused value.
            <para />
            sig: Lens s a -> (a -> a) -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Over``2(System.Func{System.Func{``0,Ramda.NET.R.Functor},System.Func{``0,Ramda.NET.R.Functor}},System.Func{``1,``1},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the result of applying the given function tothe focused value.
            <para />
            sig: Lens s a -> (a -> a) -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Over``1(System.Func{System.Func{``0,Ramda.NET.R.Functor},System.Func{``0,Ramda.NET.R.Functor}},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the result of applying the given function tothe focused value.
            <para />
            sig: Lens s a -> (a -> a) -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Over``1(Ramda.NET.RamdaPlaceholder,System.Object,``0)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the result of applying the given function tothe focused value.
            <para />
            sig: Lens s a -> (a -> a) -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Over``1(System.Object,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the result of applying the given function tothe focused value.
            <para />
            sig: Lens s a -> (a -> a) -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Over(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the result of applying the given function tothe focused value.
            <para />
            sig: Lens s a -> (a -> a) -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Over(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the result of applying the given function tothe focused value.
            <para />
            sig: Lens s a -> (a -> a) -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Over``2(System.Object,System.Func{``1,``1},``0)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the result of applying the given function tothe focused value.
            <para />
            sig: Lens s a -> (a -> a) -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Over``1(System.Func{System.Func{``0,Ramda.NET.R.Functor},System.Func{``0,Ramda.NET.R.Functor}},System.Object,``0)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the result of applying the given function tothe focused value.
            <para />
            sig: Lens s a -> (a -> a) -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Over``1(System.Object,System.Object,``0)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the result of applying the given function tothe focused value.
            <para />
            sig: Lens s a -> (a -> a) -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Over(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the result of applying the given function tothe focused value.
            <para />
            sig: Lens s a -> (a -> a) -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Pair``2(``0,``1)">
            <summary>
            Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.
            <para />
            sig: a -> b -> (a,b)
            </summary>
            <param name="fst">first</param>
            <param name="snd">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.ObjOf(System.String,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Of(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Pair``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.
            <para />
            sig: a -> b -> (a,b)
            </summary>
            <param name="fst">first</param>
            <param name="snd">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.ObjOf(System.String,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Of(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Pair``1(``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.
            <para />
            sig: a -> b -> (a,b)
            </summary>
            <param name="fst">first</param>
            <param name="snd">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.ObjOf(System.String,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Of(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Pair(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.
            <para />
            sig: a -> b -> (a,b)
            </summary>
            <param name="fst">first</param>
            <param name="snd">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.ObjOf(System.String,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Of(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Partial``2(System.Func{``0,``1},System.Collections.Generic.IList{``0})">
            <summary>
            Takes a function `f` and a list of arguments, and returns a function `g`.When applied, `g` returns the result of applying `f` to the argumentsprovided initially followed by the arguments provided to `g`.
            <para />
            sig: ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
            </summary>
            <param name="f">first</param>
            <param name="args">second</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Partial``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Takes a function `f` and a list of arguments, and returns a function `g`.When applied, `g` returns the result of applying `f` to the argumentsprovided initially followed by the arguments provided to `g`.
            <para />
            sig: ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
            </summary>
            <param name="f">first</param>
            <param name="args">second</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Partial``2(System.Func{``0,``1},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function `f` and a list of arguments, and returns a function `g`.When applied, `g` returns the result of applying `f` to the argumentsprovided initially followed by the arguments provided to `g`.
            <para />
            sig: ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
            </summary>
            <param name="f">first</param>
            <param name="args">second</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function `f` and a list of arguments, and returns a function `g`.When applied, `g` returns the result of applying `f` to the argumentsprovided initially followed by the arguments provided to `g`.
            <para />
            sig: ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
            </summary>
            <param name="f">first</param>
            <param name="args">second</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Partial``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Takes a function `f` and a list of arguments, and returns a function `g`.When applied, `g` returns the result of applying `f` to the argumentsprovided initially followed by the arguments provided to `g`.
            <para />
            sig: ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
            </summary>
            <param name="f">first</param>
            <param name="args">second</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Partial(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function `f` and a list of arguments, and returns a function `g`.When applied, `g` returns the result of applying `f` to the argumentsprovided initially followed by the arguments provided to `g`.
            <para />
            sig: ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
            </summary>
            <param name="f">first</param>
            <param name="args">second</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PartialRight``2(System.Func{``0,``1},System.Collections.Generic.IList{``0})">
            <summary>
            Takes a function `f` and a list of arguments, and returns a function `g`.When applied, `g` returns the result of applying `f` to the argumentsprovided to `g` followed by the arguments provided initially.
            <para />
            sig: ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
            </summary>
            <param name="f">first</param>
            <param name="args">second</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PartialRight``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Takes a function `f` and a list of arguments, and returns a function `g`.When applied, `g` returns the result of applying `f` to the argumentsprovided to `g` followed by the arguments provided initially.
            <para />
            sig: ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
            </summary>
            <param name="f">first</param>
            <param name="args">second</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PartialRight``2(System.Func{``0,``1},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function `f` and a list of arguments, and returns a function `g`.When applied, `g` returns the result of applying `f` to the argumentsprovided to `g` followed by the arguments provided initially.
            <para />
            sig: ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
            </summary>
            <param name="f">first</param>
            <param name="args">second</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PartialRight(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function `f` and a list of arguments, and returns a function `g`.When applied, `g` returns the result of applying `f` to the argumentsprovided to `g` followed by the arguments provided initially.
            <para />
            sig: ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
            </summary>
            <param name="f">first</param>
            <param name="args">second</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PartialRight``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Takes a function `f` and a list of arguments, and returns a function `g`.When applied, `g` returns the result of applying `f` to the argumentsprovided to `g` followed by the arguments provided initially.
            <para />
            sig: ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
            </summary>
            <param name="f">first</param>
            <param name="args">second</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PartialRight(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function `f` and a list of arguments, and returns a function `g`.When applied, `g` returns the result of applying `f` to the argumentsprovided to `g` followed by the arguments provided initially.
            <para />
            sig: ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
            </summary>
            <param name="f">first</param>
            <param name="args">second</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Partial(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Partition``2(System.Func{``1,System.Boolean},``0)">
            <summary>
            Takes a predicate and a list or other "filterable" object and returns thepair of filterable objects of the same type of elements which do and do notsatisfy, the predicate, respectively.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> [f a, f a]
            </summary>
            <param name="pred">A predicate to determine which side the element belongs to.</param>
            <param name="filterable">the list (or other filterable) to partition.</param>
            <returns>An array, containing first the subset of elements that satisfy the predicate, and second the subset of elements that do not satisfy.</returns>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Partition``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Takes a predicate and a list or other "filterable" object and returns thepair of filterable objects of the same type of elements which do and do notsatisfy, the predicate, respectively.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> [f a, f a]
            </summary>
            <param name="pred">A predicate to determine which side the element belongs to.</param>
            <param name="filterable">the list (or other filterable) to partition.</param>
            <returns>An array, containing first the subset of elements that satisfy the predicate, and second the subset of elements that do not satisfy.</returns>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Partition``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a predicate and a list or other "filterable" object and returns thepair of filterable objects of the same type of elements which do and do notsatisfy, the predicate, respectively.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> [f a, f a]
            </summary>
            <param name="pred">A predicate to determine which side the element belongs to.</param>
            <param name="filterable">the list (or other filterable) to partition.</param>
            <returns>An array, containing first the subset of elements that satisfy the predicate, and second the subset of elements that do not satisfy.</returns>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Partition(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a predicate and a list or other "filterable" object and returns thepair of filterable objects of the same type of elements which do and do notsatisfy, the predicate, respectively.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> [f a, f a]
            </summary>
            <param name="pred">A predicate to determine which side the element belongs to.</param>
            <param name="filterable">the list (or other filterable) to partition.</param>
            <returns>An array, containing first the subset of elements that satisfy the predicate, and second the subset of elements that do not satisfy.</returns>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Partition``1(System.Object,``0)">
            <summary>
            Takes a predicate and a list or other "filterable" object and returns thepair of filterable objects of the same type of elements which do and do notsatisfy, the predicate, respectively.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> [f a, f a]
            </summary>
            <param name="pred">A predicate to determine which side the element belongs to.</param>
            <param name="filterable">the list (or other filterable) to partition.</param>
            <returns>An array, containing first the subset of elements that satisfy the predicate, and second the subset of elements that do not satisfy.</returns>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Partition(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a predicate and a list or other "filterable" object and returns thepair of filterable objects of the same type of elements which do and do notsatisfy, the predicate, respectively.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> [f a, f a]
            </summary>
            <param name="pred">A predicate to determine which side the element belongs to.</param>
            <param name="filterable">the list (or other filterable) to partition.</param>
            <returns>An array, containing first the subset of elements that satisfy the predicate, and second the subset of elements that do not satisfy.</returns>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Path``1(System.Collections.Generic.IList{System.Object},``0)">
            <summary>
            Retrieve the value at a given path.
            <para />
            sig: [Idx] -> {a} -> a | Undefined
            </summary>
            <param name="path">The path to use.</param>
            <param name="obj">The object to retrieve the nested property from.</param>
            <returns>The data at `path`.</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Path``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Retrieve the value at a given path.
            <para />
            sig: [Idx] -> {a} -> a | Undefined
            </summary>
            <param name="path">The path to use.</param>
            <param name="obj">The object to retrieve the nested property from.</param>
            <returns>The data at `path`.</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Retrieve the value at a given path.
            <para />
            sig: [Idx] -> {a} -> a | Undefined
            </summary>
            <param name="path">The path to use.</param>
            <param name="obj">The object to retrieve the nested property from.</param>
            <returns>The data at `path`.</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Path(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Retrieve the value at a given path.
            <para />
            sig: [Idx] -> {a} -> a | Undefined
            </summary>
            <param name="path">The path to use.</param>
            <param name="obj">The object to retrieve the nested property from.</param>
            <returns>The data at `path`.</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PathEq``2(System.Collections.Generic.IList{System.Object},``0,``1)">
            <summary>
            Determines whether a nested path on an object has a specific value, in`R.equals` terms. Most likely used to filter a list.
            <para />
            sig: [Idx] -> a -> {a} -> Boolean
            </summary>
            <param name="path">The path of the nested property to use</param>
            <param name="val">The value to compare the nested property with</param>
            <param name="obj">The object to check the nested property in</param>
            <returns>`true` if the value equals the nested object property, `false` otherwise.</returns>
        </member>
        <member name="M:Ramda.NET.R.PathEq``2(Ramda.NET.RamdaPlaceholder,``0,``1)">
            <summary>
            Determines whether a nested path on an object has a specific value, in`R.equals` terms. Most likely used to filter a list.
            <para />
            sig: [Idx] -> a -> {a} -> Boolean
            </summary>
            <param name="path">The path of the nested property to use</param>
            <param name="val">The value to compare the nested property with</param>
            <param name="obj">The object to check the nested property in</param>
            <returns>`true` if the value equals the nested object property, `false` otherwise.</returns>
        </member>
        <member name="M:Ramda.NET.R.PathEq``1(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Determines whether a nested path on an object has a specific value, in`R.equals` terms. Most likely used to filter a list.
            <para />
            sig: [Idx] -> a -> {a} -> Boolean
            </summary>
            <param name="path">The path of the nested property to use</param>
            <param name="val">The value to compare the nested property with</param>
            <param name="obj">The object to check the nested property in</param>
            <returns>`true` if the value equals the nested object property, `false` otherwise.</returns>
        </member>
        <member name="M:Ramda.NET.R.PathEq``1(System.Collections.Generic.IList{System.Object},``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Determines whether a nested path on an object has a specific value, in`R.equals` terms. Most likely used to filter a list.
            <para />
            sig: [Idx] -> a -> {a} -> Boolean
            </summary>
            <param name="path">The path of the nested property to use</param>
            <param name="val">The value to compare the nested property with</param>
            <param name="obj">The object to check the nested property in</param>
            <returns>`true` if the value equals the nested object property, `false` otherwise.</returns>
        </member>
        <member name="M:Ramda.NET.R.PathEq(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Determines whether a nested path on an object has a specific value, in`R.equals` terms. Most likely used to filter a list.
            <para />
            sig: [Idx] -> a -> {a} -> Boolean
            </summary>
            <param name="path">The path of the nested property to use</param>
            <param name="val">The value to compare the nested property with</param>
            <param name="obj">The object to check the nested property in</param>
            <returns>`true` if the value equals the nested object property, `false` otherwise.</returns>
        </member>
        <member name="M:Ramda.NET.R.PathEq(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Determines whether a nested path on an object has a specific value, in`R.equals` terms. Most likely used to filter a list.
            <para />
            sig: [Idx] -> a -> {a} -> Boolean
            </summary>
            <param name="path">The path of the nested property to use</param>
            <param name="val">The value to compare the nested property with</param>
            <param name="obj">The object to check the nested property in</param>
            <returns>`true` if the value equals the nested object property, `false` otherwise.</returns>
        </member>
        <member name="M:Ramda.NET.R.PathOr``2(``0,System.Collections.IList,``1)">
            <summary>
            If the given, non-null object has a value at the given path, returns thevalue at that path. Otherwise returns the provided default value.
            <para />
            sig: a -> [Idx] -> {a} -> a
            </summary>
            <param name="d">The default value.</param>
            <param name="p">The path to use.</param>
            <param name="obj">The object to retrieve the nested property from.</param>
            <returns>The data at `path` of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.PathOr``1(Ramda.NET.RamdaPlaceholder,System.Collections.IList,``0)">
            <summary>
            If the given, non-null object has a value at the given path, returns thevalue at that path. Otherwise returns the provided default value.
            <para />
            sig: a -> [Idx] -> {a} -> a
            </summary>
            <param name="d">The default value.</param>
            <param name="p">The path to use.</param>
            <param name="obj">The object to retrieve the nested property from.</param>
            <returns>The data at `path` of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.PathOr``2(``0,Ramda.NET.RamdaPlaceholder,``1)">
            <summary>
            If the given, non-null object has a value at the given path, returns thevalue at that path. Otherwise returns the provided default value.
            <para />
            sig: a -> [Idx] -> {a} -> a
            </summary>
            <param name="d">The default value.</param>
            <param name="p">The path to use.</param>
            <param name="obj">The object to retrieve the nested property from.</param>
            <returns>The data at `path` of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.PathOr``1(``0,System.Collections.IList,Ramda.NET.RamdaPlaceholder)">
            <summary>
            If the given, non-null object has a value at the given path, returns thevalue at that path. Otherwise returns the provided default value.
            <para />
            sig: a -> [Idx] -> {a} -> a
            </summary>
            <param name="d">The default value.</param>
            <param name="p">The path to use.</param>
            <param name="obj">The object to retrieve the nested property from.</param>
            <returns>The data at `path` of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.PathOr``1(``0,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            If the given, non-null object has a value at the given path, returns thevalue at that path. Otherwise returns the provided default value.
            <para />
            sig: a -> [Idx] -> {a} -> a
            </summary>
            <param name="d">The default value.</param>
            <param name="p">The path to use.</param>
            <param name="obj">The object to retrieve the nested property from.</param>
            <returns>The data at `path` of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.PathOr(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            If the given, non-null object has a value at the given path, returns thevalue at that path. Otherwise returns the provided default value.
            <para />
            sig: a -> [Idx] -> {a} -> a
            </summary>
            <param name="d">The default value.</param>
            <param name="p">The path to use.</param>
            <param name="obj">The object to retrieve the nested property from.</param>
            <returns>The data at `path` of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.PathSatisfies``2(System.Func{``0,System.Boolean},System.Collections.IList,``1)">
            <summary>
            Returns `true` if the specified object property at given path satisfies thegiven predicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> [Idx] -> {a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="propPath">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PathSatisfies``1(Ramda.NET.RamdaPlaceholder,System.Collections.IList,``0)">
            <summary>
            Returns `true` if the specified object property at given path satisfies thegiven predicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> [Idx] -> {a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="propPath">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PathSatisfies``2(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder,``1)">
            <summary>
            Returns `true` if the specified object property at given path satisfies thegiven predicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> [Idx] -> {a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="propPath">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PathSatisfies``1(System.Func{``0,System.Boolean},System.Collections.IList,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property at given path satisfies thegiven predicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> [Idx] -> {a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="propPath">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PathSatisfies``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property at given path satisfies thegiven predicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> [Idx] -> {a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="propPath">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PathSatisfies``1(System.Object,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns `true` if the specified object property at given path satisfies thegiven predicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> [Idx] -> {a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="propPath">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PathSatisfies(System.Object,System.Collections.IList,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property at given path satisfies thegiven predicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> [Idx] -> {a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="propPath">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PathSatisfies(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property at given path satisfies thegiven predicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> [Idx] -> {a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="propPath">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PathSatisfies``1(System.Object,System.Collections.IList,``0)">
            <summary>
            Returns `true` if the specified object property at given path satisfies thegiven predicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> [Idx] -> {a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="propPath">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PathSatisfies(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property at given path satisfies thegiven predicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> [Idx] -> {a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="propPath">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Pick``1(System.Collections.IList,``0)">
            <summary>
            Returns a partial copy of an object containing only the keys specified. Ifthe key does not exist, the property is ignored.
            <para />
            sig: [k] -> {k: v} -> {k: v}
            </summary>
            <param name="names">an array of String property names to copy onto a new object</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with only properties from `names` on it.</returns>
            <see cref="M:Ramda.NET.R.Omit(System.Collections.Generic.IList{System.String},Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Props(System.Collections.Generic.IEnumerable{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Pick``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns a partial copy of an object containing only the keys specified. Ifthe key does not exist, the property is ignored.
            <para />
            sig: [k] -> {k: v} -> {k: v}
            </summary>
            <param name="names">an array of String property names to copy onto a new object</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with only properties from `names` on it.</returns>
            <see cref="M:Ramda.NET.R.Omit(System.Collections.Generic.IList{System.String},Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Props(System.Collections.Generic.IEnumerable{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a partial copy of an object containing only the keys specified. Ifthe key does not exist, the property is ignored.
            <para />
            sig: [k] -> {k: v} -> {k: v}
            </summary>
            <param name="names">an array of String property names to copy onto a new object</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with only properties from `names` on it.</returns>
            <see cref="M:Ramda.NET.R.Omit(System.Collections.Generic.IList{System.String},Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Props(System.Collections.Generic.IEnumerable{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Pick(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a partial copy of an object containing only the keys specified. Ifthe key does not exist, the property is ignored.
            <para />
            sig: [k] -> {k: v} -> {k: v}
            </summary>
            <param name="names">an array of String property names to copy onto a new object</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with only properties from `names` on it.</returns>
            <see cref="M:Ramda.NET.R.Omit(System.Collections.Generic.IList{System.String},Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Props(System.Collections.Generic.IEnumerable{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PickAll``1(System.Collections.IList,``0)">
            <summary>
            Similar to `pick` except that this one includes a `key: undefined` pair forproperties that don't exist.
            <para />
            sig: [k] -> {k: v} -> {k: v}
            </summary>
            <param name="names">an array of String property names to copy onto a new object</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with only properties from `names` on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PickAll``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Similar to `pick` except that this one includes a `key: undefined` pair forproperties that don't exist.
            <para />
            sig: [k] -> {k: v} -> {k: v}
            </summary>
            <param name="names">an array of String property names to copy onto a new object</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with only properties from `names` on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PickAll(System.Collections.IList,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Similar to `pick` except that this one includes a `key: undefined` pair forproperties that don't exist.
            <para />
            sig: [k] -> {k: v} -> {k: v}
            </summary>
            <param name="names">an array of String property names to copy onto a new object</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with only properties from `names` on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PickAll(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Similar to `pick` except that this one includes a `key: undefined` pair forproperties that don't exist.
            <para />
            sig: [k] -> {k: v} -> {k: v}
            </summary>
            <param name="names">an array of String property names to copy onto a new object</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with only properties from `names` on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PickBy``1(System.Func{System.Object,System.String,``0,System.Boolean},``0)">
            <summary>
            Returns a partial copy of an object containing only the keys that satisfythe supplied predicate.
            <para />
            sig: (v, k -> Boolean) -> {k: v} -> {k: v}
            </summary>
            <param name="pred">A predicate to determine whether or not a key       should be included on the output object.</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with only properties that satisfy `pred` on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PickBy``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns a partial copy of an object containing only the keys that satisfythe supplied predicate.
            <para />
            sig: (v, k -> Boolean) -> {k: v} -> {k: v}
            </summary>
            <param name="pred">A predicate to determine whether or not a key       should be included on the output object.</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with only properties that satisfy `pred` on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PickBy``1(System.Func{System.Object,System.String,``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a partial copy of an object containing only the keys that satisfythe supplied predicate.
            <para />
            sig: (v, k -> Boolean) -> {k: v} -> {k: v}
            </summary>
            <param name="pred">A predicate to determine whether or not a key       should be included on the output object.</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with only properties that satisfy `pred` on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PickBy(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a partial copy of an object containing only the keys that satisfythe supplied predicate.
            <para />
            sig: (v, k -> Boolean) -> {k: v} -> {k: v}
            </summary>
            <param name="pred">A predicate to determine whether or not a key       should be included on the output object.</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with only properties that satisfy `pred` on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PickBy``1(System.Object,``0)">
            <summary>
            Returns a partial copy of an object containing only the keys that satisfythe supplied predicate.
            <para />
            sig: (v, k -> Boolean) -> {k: v} -> {k: v}
            </summary>
            <param name="pred">A predicate to determine whether or not a key       should be included on the output object.</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with only properties that satisfy `pred` on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PickBy(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a partial copy of an object containing only the keys that satisfythe supplied predicate.
            <para />
            sig: (v, k -> Boolean) -> {k: v} -> {k: v}
            </summary>
            <param name="pred">A predicate to determine whether or not a key       should be included on the output object.</param>
            <param name="obj">The object to copy from</param>
            <returns>A new object with only properties that satisfy `pred` on it.</returns>
            <see cref="M:Ramda.NET.R.Pick(System.Collections.IList,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Pipe(System.Delegate[])">
            <summary>
            Performs left-to-right function composition. The leftmost function may haveany arity; the remaining functions must be unary.In some libraries this function is named `sequence`.**Note:** The result of pipe is not automatically curried.
            <para />
            sig: (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
            </summary>
            <param name="functions">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Compose(System.Delegate[])"/>
        </member>
        <member name="M:Ramda.NET.R.Pipe(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Performs left-to-right function composition. The leftmost function may haveany arity; the remaining functions must be unary.In some libraries this function is named `sequence`.**Note:** The result of pipe is not automatically curried.
            <para />
            sig: (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
            </summary>
            <param name="functions">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Compose(System.Delegate[])"/>
        </member>
        <member name="M:Ramda.NET.R.Pipe(System.Object[])">
            <summary>
            Performs left-to-right function composition. The leftmost function may haveany arity; the remaining functions must be unary.In some libraries this function is named `sequence`.**Note:** The result of pipe is not automatically curried.
            <para />
            sig: (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
            </summary>
            <param name="functions">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Compose(System.Delegate[])"/>
        </member>
        <member name="M:Ramda.NET.R.PipeK(System.Delegate[])">
            <summary>
            Returns the left-to-right Kleisli composition of the provided functions,each of which must return a value of a type supported by [`chain`](#chain).`R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.
            <para />
            sig: Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)
            </summary>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.PipeK(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the left-to-right Kleisli composition of the provided functions,each of which must return a value of a type supported by [`chain`](#chain).`R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.
            <para />
            sig: Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)
            </summary>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.PipeK(System.Object[])">
            <summary>
            Returns the left-to-right Kleisli composition of the provided functions,each of which must return a value of a type supported by [`chain`](#chain).`R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.
            <para />
            sig: Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)
            </summary>
            <returns>Function</returns>
        </member>
        <member name="M:Ramda.NET.R.PipeP(System.Delegate[])">
            <summary>
            Performs left-to-right composition of one or more Promise-returningfunctions. The leftmost function may have any arity; the remaining functionsmust be unary.
            <para />
            sig: ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
            </summary>
            <param name="functions">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.ComposeP(System.Delegate[])"/>
        </member>
        <member name="M:Ramda.NET.R.PipeP(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Performs left-to-right composition of one or more Promise-returningfunctions. The leftmost function may have any arity; the remaining functionsmust be unary.
            <para />
            sig: ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
            </summary>
            <param name="functions">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.ComposeP(System.Delegate[])"/>
        </member>
        <member name="M:Ramda.NET.R.PipeP(System.Func{System.Object,System.Threading.Tasks.Task{System.Object}}[])">
            <summary>
            Performs left-to-right composition of one or more Promise-returningfunctions. The leftmost function may have any arity; the remaining functionsmust be unary.
            <para />
            sig: ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
            </summary>
            <param name="functions">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.ComposeP(System.Delegate[])"/>
        </member>
        <member name="M:Ramda.NET.R.PipeP(System.Func{System.Object,System.Object,System.Threading.Tasks.Task{System.Object}}[])">
            <summary>
            Performs left-to-right composition of one or more Promise-returningfunctions. The leftmost function may have any arity; the remaining functionsmust be unary.
            <para />
            sig: ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
            </summary>
            <param name="functions">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.ComposeP(System.Delegate[])"/>
        </member>
        <member name="M:Ramda.NET.R.PipeP(System.Func{System.Object,System.Object,System.Object,System.Threading.Tasks.Task{System.Object}}[])">
            <summary>
            Performs left-to-right composition of one or more Promise-returningfunctions. The leftmost function may have any arity; the remaining functionsmust be unary.
            <para />
            sig: ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
            </summary>
            <param name="functions">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.ComposeP(System.Delegate[])"/>
        </member>
        <member name="M:Ramda.NET.R.PipeP(System.Func{System.Object,System.Object,System.Object,System.Object,System.Threading.Tasks.Task{System.Object}}[])">
            <summary>
            Performs left-to-right composition of one or more Promise-returningfunctions. The leftmost function may have any arity; the remaining functionsmust be unary.
            <para />
            sig: ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
            </summary>
            <param name="functions">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.ComposeP(System.Delegate[])"/>
        </member>
        <member name="M:Ramda.NET.R.Pluck``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a new list by plucking the same named property off all objects inthe list supplied.
            <para />
            sig: k -> [{k: v}] -> [v]
            </summary>
            <param name="key">The key name to pluck off of each object.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of values for the given key.</returns>
            <see cref="M:Ramda.NET.R.Props(System.Collections.Generic.IEnumerable{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Pluck``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a new list by plucking the same named property off all objects inthe list supplied.
            <para />
            sig: k -> [{k: v}] -> [v]
            </summary>
            <param name="key">The key name to pluck off of each object.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of values for the given key.</returns>
            <see cref="M:Ramda.NET.R.Props(System.Collections.Generic.IEnumerable{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Pluck(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list by plucking the same named property off all objects inthe list supplied.
            <para />
            sig: k -> [{k: v}] -> [v]
            </summary>
            <param name="key">The key name to pluck off of each object.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of values for the given key.</returns>
            <see cref="M:Ramda.NET.R.Props(System.Collections.Generic.IEnumerable{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Pluck(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list by plucking the same named property off all objects inthe list supplied.
            <para />
            sig: k -> [{k: v}] -> [v]
            </summary>
            <param name="key">The key name to pluck off of each object.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of values for the given key.</returns>
            <see cref="M:Ramda.NET.R.Props(System.Collections.Generic.IEnumerable{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Pluck``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a new list by plucking the same named property off all objects inthe list supplied.
            <para />
            sig: k -> [{k: v}] -> [v]
            </summary>
            <param name="key">The key name to pluck off of each object.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of values for the given key.</returns>
            <see cref="M:Ramda.NET.R.Props(System.Collections.Generic.IEnumerable{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Pluck(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list by plucking the same named property off all objects inthe list supplied.
            <para />
            sig: k -> [{k: v}] -> [v]
            </summary>
            <param name="key">The key name to pluck off of each object.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of values for the given key.</returns>
            <see cref="M:Ramda.NET.R.Props(System.Collections.Generic.IEnumerable{System.String},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Prepend``1(``0,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list with the given element at the front, followed by thecontents of the list.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="el">The item to add to the head of the output list.</param>
            <param name="list">The array to add to the tail of the output list.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.Append(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Prepend``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list with the given element at the front, followed by thecontents of the list.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="el">The item to add to the head of the output list.</param>
            <param name="list">The array to add to the tail of the output list.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.Append(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Prepend``1(``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list with the given element at the front, followed by thecontents of the list.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="el">The item to add to the head of the output list.</param>
            <param name="list">The array to add to the tail of the output list.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.Append(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Prepend(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list with the given element at the front, followed by thecontents of the list.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="el">The item to add to the head of the output list.</param>
            <param name="list">The array to add to the tail of the output list.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.Append(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Prepend(System.Object,System.Collections.IList)">
            <summary>
            Returns a new list with the given element at the front, followed by thecontents of the list.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="el">The item to add to the head of the output list.</param>
            <param name="list">The array to add to the tail of the output list.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.Append(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Prepend(Ramda.NET.RamdaPlaceholder,System.Collections.IList)">
            <summary>
            Returns a new list with the given element at the front, followed by thecontents of the list.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="el">The item to add to the head of the output list.</param>
            <param name="list">The array to add to the tail of the output list.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.Append(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Prepend(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list with the given element at the front, followed by thecontents of the list.
            <para />
            sig: a -> [a] -> [a]
            </summary>
            <param name="el">The item to add to the head of the output list.</param>
            <param name="list">The array to add to the tail of the output list.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.Append(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Product(System.Collections.Generic.IList{System.Double})">
            <summary>
            Multiplies together all the elements of a list.
            <para />
            sig: [Number] -> Number
            </summary>
            <param name="list">An array of numbers</param>
            <returns>The product of all the numbers in the list.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Product(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Multiplies together all the elements of a list.
            <para />
            sig: [Number] -> Number
            </summary>
            <param name="list">An array of numbers</param>
            <returns>The product of all the numbers in the list.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Product(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Multiplies together all the elements of a list.
            <para />
            sig: [Number] -> Number
            </summary>
            <param name="list">An array of numbers</param>
            <returns>The product of all the numbers in the list.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Project``1(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{``0})">
            <summary>
            Reasonable analog to SQL `select` statement.
            <para />
            sig: [k] -> [{k: v}] -> [{k: v}]
            </summary>
            <param name="props">The property names to project</param>
            <param name="objs">The objects to query</param>
            <returns>An array of objects with just the `props` properties.</returns>
        </member>
        <member name="M:Ramda.NET.R.Project``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Reasonable analog to SQL `select` statement.
            <para />
            sig: [k] -> [{k: v}] -> [{k: v}]
            </summary>
            <param name="props">The property names to project</param>
            <param name="objs">The objects to query</param>
            <returns>An array of objects with just the `props` properties.</returns>
        </member>
        <member name="M:Ramda.NET.R.Project(System.Collections.Generic.IList{System.String},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Reasonable analog to SQL `select` statement.
            <para />
            sig: [k] -> [{k: v}] -> [{k: v}]
            </summary>
            <param name="props">The property names to project</param>
            <param name="objs">The objects to query</param>
            <returns>An array of objects with just the `props` properties.</returns>
        </member>
        <member name="M:Ramda.NET.R.Project(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Reasonable analog to SQL `select` statement.
            <para />
            sig: [k] -> [{k: v}] -> [{k: v}]
            </summary>
            <param name="props">The property names to project</param>
            <param name="objs">The objects to query</param>
            <returns>An array of objects with just the `props` properties.</returns>
        </member>
        <member name="M:Ramda.NET.R.Prop``1(System.Int32,``0)">
            <summary>
            Returns a function that when supplied an object returns the indicatedproperty of that object, if it exists.
            <para />
            sig: s -> {s: a} -> a | Undefined
            </summary>
            <param name="p">The property name</param>
            <param name="obj">The object to query</param>
            <returns>The value at `obj.p`.</returns>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a function that when supplied an object returns the indicatedproperty of that object, if it exists.
            <para />
            sig: s -> {s: a} -> a | Undefined
            </summary>
            <param name="p">The property name</param>
            <param name="obj">The object to query</param>
            <returns>The value at `obj.p`.</returns>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Prop``1(System.String,``0)">
            <summary>
            Returns a function that when supplied an object returns the indicatedproperty of that object, if it exists.
            <para />
            sig: s -> {s: a} -> a | Undefined
            </summary>
            <param name="p">The property name</param>
            <param name="obj">The object to query</param>
            <returns>The value at `obj.p`.</returns>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Prop``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns a function that when supplied an object returns the indicatedproperty of that object, if it exists.
            <para />
            sig: s -> {s: a} -> a | Undefined
            </summary>
            <param name="p">The property name</param>
            <param name="obj">The object to query</param>
            <returns>The value at `obj.p`.</returns>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Prop(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a function that when supplied an object returns the indicatedproperty of that object, if it exists.
            <para />
            sig: s -> {s: a} -> a | Undefined
            </summary>
            <param name="p">The property name</param>
            <param name="obj">The object to query</param>
            <returns>The value at `obj.p`.</returns>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Prop(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a function that when supplied an object returns the indicatedproperty of that object, if it exists.
            <para />
            sig: s -> {s: a} -> a | Undefined
            </summary>
            <param name="p">The property name</param>
            <param name="obj">The object to query</param>
            <returns>The value at `obj.p`.</returns>
            <see cref="M:Ramda.NET.R.Path(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropEq``2(System.String,``0,``1)">
            <summary>
            Returns `true` if the specified object property is equal, in `R.equals`terms, to the given value; `false` otherwise.
            <para />
            sig: String -> a -> Object -> Boolean
            </summary>
            <param name="name">first</param>
            <param name="val">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Equals(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropEq``2(Ramda.NET.RamdaPlaceholder,``0,``1)">
            <summary>
            Returns `true` if the specified object property is equal, in `R.equals`terms, to the given value; `false` otherwise.
            <para />
            sig: String -> a -> Object -> Boolean
            </summary>
            <param name="name">first</param>
            <param name="val">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Equals(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropEq``1(System.String,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns `true` if the specified object property is equal, in `R.equals`terms, to the given value; `false` otherwise.
            <para />
            sig: String -> a -> Object -> Boolean
            </summary>
            <param name="name">first</param>
            <param name="val">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Equals(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropEq``1(System.String,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property is equal, in `R.equals`terms, to the given value; `false` otherwise.
            <para />
            sig: String -> a -> Object -> Boolean
            </summary>
            <param name="name">first</param>
            <param name="val">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Equals(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property is equal, in `R.equals`terms, to the given value; `false` otherwise.
            <para />
            sig: String -> a -> Object -> Boolean
            </summary>
            <param name="name">first</param>
            <param name="val">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Equals(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropEq(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property is equal, in `R.equals`terms, to the given value; `false` otherwise.
            <para />
            sig: String -> a -> Object -> Boolean
            </summary>
            <param name="name">first</param>
            <param name="val">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Equals(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropIs``1(System.Type,System.Int32,``0)">
            <summary>
            Returns `true` if the specified object property is of the given type;`false` otherwise.
            <para />
            sig: Type -> String -> Object -> Boolean
            </summary>
            <param name="type">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Is(System.Type,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropIs``1(Ramda.NET.RamdaPlaceholder,System.Int32,``0)">
            <summary>
            Returns `true` if the specified object property is of the given type;`false` otherwise.
            <para />
            sig: Type -> String -> Object -> Boolean
            </summary>
            <param name="type">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Is(System.Type,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property is of the given type;`false` otherwise.
            <para />
            sig: Type -> String -> Object -> Boolean
            </summary>
            <param name="type">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Is(System.Type,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropIs``1(System.Type,System.String,``0)">
            <summary>
            Returns `true` if the specified object property is of the given type;`false` otherwise.
            <para />
            sig: Type -> String -> Object -> Boolean
            </summary>
            <param name="type">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Is(System.Type,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropIs``1(Ramda.NET.RamdaPlaceholder,System.String,``0)">
            <summary>
            Returns `true` if the specified object property is of the given type;`false` otherwise.
            <para />
            sig: Type -> String -> Object -> Boolean
            </summary>
            <param name="type">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Is(System.Type,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropIs``1(System.Type,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns `true` if the specified object property is of the given type;`false` otherwise.
            <para />
            sig: Type -> String -> Object -> Boolean
            </summary>
            <param name="type">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Is(System.Type,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropIs(System.Type,System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property is of the given type;`false` otherwise.
            <para />
            sig: Type -> String -> Object -> Boolean
            </summary>
            <param name="type">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Is(System.Type,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropIs(System.Type,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property is of the given type;`false` otherwise.
            <para />
            sig: Type -> String -> Object -> Boolean
            </summary>
            <param name="type">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Is(System.Type,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropIs(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property is of the given type;`false` otherwise.
            <para />
            sig: Type -> String -> Object -> Boolean
            </summary>
            <param name="type">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Is(System.Type,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropOr``2(``0,System.Collections.Generic.IList{System.Int32},``1)">
            <summary>
            If the given, non-null object has an own property with the specified name,returns the value of that property. Otherwise returns the provided defaultvalue.
            <para />
            sig: a -> String -> Object -> a
            </summary>
            <param name="val">The default value.</param>
            <param name="p">The name of the property to return.</param>
            <param name="obj">The object to query.</param>
            <returns>The value of given property of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.PropOr``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{System.Int32},``0)">
            <summary>
            If the given, non-null object has an own property with the specified name,returns the value of that property. Otherwise returns the provided defaultvalue.
            <para />
            sig: a -> String -> Object -> a
            </summary>
            <param name="val">The default value.</param>
            <param name="p">The name of the property to return.</param>
            <param name="obj">The object to query.</param>
            <returns>The value of given property of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.PropOr``1(``0,System.Collections.Generic.IList{System.Int32},Ramda.NET.RamdaPlaceholder)">
            <summary>
            If the given, non-null object has an own property with the specified name,returns the value of that property. Otherwise returns the provided defaultvalue.
            <para />
            sig: a -> String -> Object -> a
            </summary>
            <param name="val">The default value.</param>
            <param name="p">The name of the property to return.</param>
            <param name="obj">The object to query.</param>
            <returns>The value of given property of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.PropOr``2(``0,System.String,``1)">
            <summary>
            If the given, non-null object has an own property with the specified name,returns the value of that property. Otherwise returns the provided defaultvalue.
            <para />
            sig: a -> String -> Object -> a
            </summary>
            <param name="val">The default value.</param>
            <param name="p">The name of the property to return.</param>
            <param name="obj">The object to query.</param>
            <returns>The value of given property of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.PropOr``1(Ramda.NET.RamdaPlaceholder,System.String,``0)">
            <summary>
            If the given, non-null object has an own property with the specified name,returns the value of that property. Otherwise returns the provided defaultvalue.
            <para />
            sig: a -> String -> Object -> a
            </summary>
            <param name="val">The default value.</param>
            <param name="p">The name of the property to return.</param>
            <param name="obj">The object to query.</param>
            <returns>The value of given property of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.PropOr``2(``0,Ramda.NET.RamdaPlaceholder,``1)">
            <summary>
            If the given, non-null object has an own property with the specified name,returns the value of that property. Otherwise returns the provided defaultvalue.
            <para />
            sig: a -> String -> Object -> a
            </summary>
            <param name="val">The default value.</param>
            <param name="p">The name of the property to return.</param>
            <param name="obj">The object to query.</param>
            <returns>The value of given property of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.PropOr``1(``0,System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            If the given, non-null object has an own property with the specified name,returns the value of that property. Otherwise returns the provided defaultvalue.
            <para />
            sig: a -> String -> Object -> a
            </summary>
            <param name="val">The default value.</param>
            <param name="p">The name of the property to return.</param>
            <param name="obj">The object to query.</param>
            <returns>The value of given property of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.PropOr``1(``0,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            If the given, non-null object has an own property with the specified name,returns the value of that property. Otherwise returns the provided defaultvalue.
            <para />
            sig: a -> String -> Object -> a
            </summary>
            <param name="val">The default value.</param>
            <param name="p">The name of the property to return.</param>
            <param name="obj">The object to query.</param>
            <returns>The value of given property of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.PropOr(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            If the given, non-null object has an own property with the specified name,returns the value of that property. Otherwise returns the provided defaultvalue.
            <para />
            sig: a -> String -> Object -> a
            </summary>
            <param name="val">The default value.</param>
            <param name="p">The name of the property to return.</param>
            <param name="obj">The object to query.</param>
            <returns>The value of given property of the supplied object or the default value.</returns>
        </member>
        <member name="M:Ramda.NET.R.Props``1(System.Collections.Generic.IEnumerable{System.String},``0)">
            <summary>
            Acts as multiple `prop`: array of keys in, array of values out. Preservesorder.
            <para />
            sig: [k] -> {k: v} -> [v]
            </summary>
            <param name="ps">The property names to fetch</param>
            <param name="obj">The object to query</param>
            <returns>The corresponding values or partially applied function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Props``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Acts as multiple `prop`: array of keys in, array of values out. Preservesorder.
            <para />
            sig: [k] -> {k: v} -> [v]
            </summary>
            <param name="ps">The property names to fetch</param>
            <param name="obj">The object to query</param>
            <returns>The corresponding values or partially applied function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Props(System.Collections.Generic.IEnumerable{System.String},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Acts as multiple `prop`: array of keys in, array of values out. Preservesorder.
            <para />
            sig: [k] -> {k: v} -> [v]
            </summary>
            <param name="ps">The property names to fetch</param>
            <param name="obj">The object to query</param>
            <returns>The corresponding values or partially applied function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Props(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Acts as multiple `prop`: array of keys in, array of values out. Preservesorder.
            <para />
            sig: [k] -> {k: v} -> [v]
            </summary>
            <param name="ps">The property names to fetch</param>
            <param name="obj">The object to query</param>
            <returns>The corresponding values or partially applied function.</returns>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies``2(System.Func{``0,System.Boolean},System.Int32,``1)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies``1(Ramda.NET.RamdaPlaceholder,System.Int32,``0)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies``1(System.Func{``0,System.Boolean},System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies``1(System.Object,System.Int32,``0)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies``2(System.Func{``0,System.Boolean},System.String,``1)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies``1(Ramda.NET.RamdaPlaceholder,System.String,``0)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies``2(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder,``1)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies``1(System.Func{``0,System.Boolean},System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies``1(System.Object,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies(System.Object,System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies``1(System.Object,System.String,``0)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.PropSatisfies(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns `true` if the specified object property satisfies the givenpredicate; `false` otherwise.
            <para />
            sig: (a -> Boolean) -> String -> {String: a} -> Boolean
            </summary>
            <param name="pred">first</param>
            <param name="name">second</param>
            <param name="obj">third</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.PropEq(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.PropIs(System.Type,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce``3(System.Func{``0,``2,``1},``2,Ramda.NET.R.IReducible)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce``1(Ramda.NET.RamdaPlaceholder,``0,Ramda.NET.R.IReducible)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce``3(System.Func{``0,``2,``1},Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce``3(System.Func{``0,``2,``1},``2,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce``1(System.Object,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce``1(System.Object,``0,Ramda.NET.R.IReducible)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce``3(System.Func{``0,``2,``1},``2,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce``2(Ramda.NET.RamdaPlaceholder,``1,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce``3(System.Func{``0,``2,``1},Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce``3(System.Func{``0,``2,``1},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce``1(System.Object,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduce``2(System.Object,``1,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It may use`R.reduced` to shortcut the iteration.The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.Note: `R.reduce` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#DescriptionDispatches to the `reduce` method of the third argument, if present.
            <para />
            sig: ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.SortWith``1(System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{``0})">
            <summary>
            Sorts a list according to a list of comparators.
            <para />
            sig: [a -> a -> Number] -> [a] -> [a]
            </summary>
            <param name="functions">A list of comparator functions.</param>
            <param name="list">The list to sort.</param>
            <returns>A new list sorted according to the comarator functions.</returns>
        </member>
        <member name="M:Ramda.NET.R.SortWith``1(System.Collections.Generic.IList{System.Object},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Sorts a list according to a list of comparators.
            <para />
            sig: [a -> a -> Number] -> [a] -> [a]
            </summary>
            <param name="functions">A list of comparator functions.</param>
            <param name="list">The list to sort.</param>
            <returns>A new list sorted according to the comarator functions.</returns>
        </member>
        <member name="M:Ramda.NET.R.Replace(System.String,System.String,System.String)">
            <summary>
            Replace a substring or regex match in a string with a replacement.
            <para />
            sig: RegExp|String -> String -> String -> String
            </summary>
            <param name="pattern">A regular expression or a substring to match.</param>
            <param name="replacement">The string to replace the matches with.</param>
            <param name="str">The String to do the search and replacement in.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Ramda.NET.R.Replace(System.String,Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Replace a substring or regex match in a string with a replacement.
            <para />
            sig: RegExp|String -> String -> String -> String
            </summary>
            <param name="pattern">A regular expression or a substring to match.</param>
            <param name="replacement">The string to replace the matches with.</param>
            <param name="str">The String to do the search and replacement in.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Ramda.NET.R.Replace(System.String,System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Replace a substring or regex match in a string with a replacement.
            <para />
            sig: RegExp|String -> String -> String -> String
            </summary>
            <param name="pattern">A regular expression or a substring to match.</param>
            <param name="replacement">The string to replace the matches with.</param>
            <param name="str">The String to do the search and replacement in.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Ramda.NET.R.Replace(System.String,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Replace a substring or regex match in a string with a replacement.
            <para />
            sig: RegExp|String -> String -> String -> String
            </summary>
            <param name="pattern">A regular expression or a substring to match.</param>
            <param name="replacement">The string to replace the matches with.</param>
            <param name="str">The String to do the search and replacement in.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Ramda.NET.R.Set``2(System.Object,``0,``1)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the given value.
            <para />
            sig: Lens s a -> a -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Set``2(Ramda.NET.RamdaPlaceholder,``0,``1)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the given value.
            <para />
            sig: Lens s a -> a -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Set``1(System.Object,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the given value.
            <para />
            sig: Lens s a -> a -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Set``1(System.Object,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the given value.
            <para />
            sig: Lens s a -> a -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Set(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the given value.
            <para />
            sig: Lens s a -> a -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Set(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the result of "setting" the portion of the given data structurefocused by the given lens to the given value.
            <para />
            sig: Lens s a -> a -> s -> s
            </summary>
            <param name="lens">first</param>
            <param name="v">second</param>
            <param name="x">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Slice(System.Int32,System.Int32,System.String)">
            <summary>
            Returns the elements of the given list or string (or object with a `slice`method) from `fromIndex` (inclusive) to `toIndex` (exclusive).Dispatches to the `slice` method of the third argument, if present.
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="fromIndex">The start index (inclusive).</param>
            <param name="toIndex">The end index (exclusive).</param>
            <param name="list">third</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.Slice(Ramda.NET.RamdaPlaceholder,System.Int32,System.String)">
            <summary>
            Returns the elements of the given list or string (or object with a `slice`method) from `fromIndex` (inclusive) to `toIndex` (exclusive).Dispatches to the `slice` method of the third argument, if present.
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="fromIndex">The start index (inclusive).</param>
            <param name="toIndex">The end index (exclusive).</param>
            <param name="list">third</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.Slice(System.Int32,Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Returns the elements of the given list or string (or object with a `slice`method) from `fromIndex` (inclusive) to `toIndex` (exclusive).Dispatches to the `slice` method of the third argument, if present.
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="fromIndex">The start index (inclusive).</param>
            <param name="toIndex">The end index (exclusive).</param>
            <param name="list">third</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.SortWith``1(System.Collections.Generic.IList{System.Func{``0,System.Int32}},System.Collections.Generic.IList{``0})">
            <summary>
            Sorts a list according to a list of comparators.
            <para />
            sig: [a -> a -> Number] -> [a] -> [a]
            </summary>
            <param name="functions">A list of comparator functions.</param>
            <param name="list">The list to sort.</param>
            <returns>A new list sorted according to the comarator functions.</returns>
        </member>
        <member name="M:Ramda.NET.R.SortWith``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Sorts a list according to a list of comparators.
            <para />
            sig: [a -> a -> Number] -> [a] -> [a]
            </summary>
            <param name="functions">A list of comparator functions.</param>
            <param name="list">The list to sort.</param>
            <returns>A new list sorted according to the comarator functions.</returns>
        </member>
        <member name="M:Ramda.NET.R.SortWith``1(System.Collections.Generic.IList{System.Func{``0,System.Int32}},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Sorts a list according to a list of comparators.
            <para />
            sig: [a -> a -> Number] -> [a] -> [a]
            </summary>
            <param name="functions">A list of comparator functions.</param>
            <param name="list">The list to sort.</param>
            <returns>A new list sorted according to the comarator functions.</returns>
        </member>
        <member name="M:Ramda.NET.R.SortWith(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Sorts a list according to a list of comparators.
            <para />
            sig: [a -> a -> Number] -> [a] -> [a]
            </summary>
            <param name="functions">A list of comparator functions.</param>
            <param name="list">The list to sort.</param>
            <returns>A new list sorted according to the comarator functions.</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitAt(System.Int32,System.String)">
            <summary>
            Splits a given list or string at a given index.
            <para />
            sig: Number -> [a] -> [[a], [a]]
            </summary>
            <param name="index">The index where the array/string is split.</param>
            <param name="array">The array/string to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitAt(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Splits a given list or string at a given index.
            <para />
            sig: Number -> [a] -> [[a], [a]]
            </summary>
            <param name="index">The index where the array/string is split.</param>
            <param name="array">The array/string to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitAt``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Splits a given list or string at a given index.
            <para />
            sig: Number -> [a] -> [[a], [a]]
            </summary>
            <param name="index">The index where the array/string is split.</param>
            <param name="array">The array/string to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitAt``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Splits a given list or string at a given index.
            <para />
            sig: Number -> [a] -> [[a], [a]]
            </summary>
            <param name="index">The index where the array/string is split.</param>
            <param name="array">The array/string to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitAt(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Splits a given list or string at a given index.
            <para />
            sig: Number -> [a] -> [[a], [a]]
            </summary>
            <param name="index">The index where the array/string is split.</param>
            <param name="array">The array/string to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitAt(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Splits a given list or string at a given index.
            <para />
            sig: Number -> [a] -> [[a], [a]]
            </summary>
            <param name="index">The index where the array/string is split.</param>
            <param name="array">The array/string to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.Split(System.String,System.String)">
            <summary>
            Splits a string into an array of strings based on the givenseparator.
            <para />
            sig: (String | RegExp) -> String -> [String]
            </summary>
            <param name="sep">The pattern.</param>
            <param name="str">The string to separate into an array.</param>
            <returns>The array of strings from `str` separated by `str`.</returns>
            <see cref="M:Ramda.NET.R.Join(System.String,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Split(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Splits a string into an array of strings based on the givenseparator.
            <para />
            sig: (String | RegExp) -> String -> [String]
            </summary>
            <param name="sep">The pattern.</param>
            <param name="str">The string to separate into an array.</param>
            <returns>The array of strings from `str` separated by `str`.</returns>
            <see cref="M:Ramda.NET.R.Join(System.String,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Split(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Splits a string into an array of strings based on the givenseparator.
            <para />
            sig: (String | RegExp) -> String -> [String]
            </summary>
            <param name="sep">The pattern.</param>
            <param name="str">The string to separate into an array.</param>
            <returns>The array of strings from `str` separated by `str`.</returns>
            <see cref="M:Ramda.NET.R.Join(System.String,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Split(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Splits a string into an array of strings based on the givenseparator.
            <para />
            sig: (String | RegExp) -> String -> [String]
            </summary>
            <param name="sep">The pattern.</param>
            <param name="str">The string to separate into an array.</param>
            <returns>The array of strings from `str` separated by `str`.</returns>
            <see cref="M:Ramda.NET.R.Join(System.String,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.SplitEvery(System.Int32,System.String)">
            <summary>
            Splits a collection into slices of the specified length.
            <para />
            sig: Number -> [a] -> [[a]]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitEvery(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Splits a collection into slices of the specified length.
            <para />
            sig: Number -> [a] -> [[a]]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitWhen(System.Func{System.Char,System.Boolean},System.String)">
            <summary>
            Takes a list and a predicate and returns a pair of lists with the following properties: - the result of concatenating the two output lists is equivalent to the input list; - none of the elements of the first output list satisfies the predicate; and - if the second output list is non-empty, its first element satisfies the predicate.
            <para />
            sig: (a -> Boolean) -> [a] -> [[a], [a]]
            </summary>
            <param name="pred">The predicate that determines where the array is split.</param>
            <param name="list">The array to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitWhen(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Takes a list and a predicate and returns a pair of lists with the following properties: - the result of concatenating the two output lists is equivalent to the input list; - none of the elements of the first output list satisfies the predicate; and - if the second output list is non-empty, its first element satisfies the predicate.
            <para />
            sig: (a -> Boolean) -> [a] -> [[a], [a]]
            </summary>
            <param name="pred">The predicate that determines where the array is split.</param>
            <param name="list">The array to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitWhen(System.Object,System.String)">
            <summary>
            Takes a list and a predicate and returns a pair of lists with the following properties: - the result of concatenating the two output lists is equivalent to the input list; - none of the elements of the first output list satisfies the predicate; and - if the second output list is non-empty, its first element satisfies the predicate.
            <para />
            sig: (a -> Boolean) -> [a] -> [[a], [a]]
            </summary>
            <param name="pred">The predicate that determines where the array is split.</param>
            <param name="list">The array to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.Subtract(System.String,System.String)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Subtract(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Subtract(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Subtract(System.Object,System.Object)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Subtract(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Subtract(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Subtract(System.Boolean,System.Boolean)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Subtract(Ramda.NET.RamdaPlaceholder,System.Boolean)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Subtract(System.Boolean,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.SymmetricDifferenceWith``2(System.Func{``0,``1,System.Boolean},System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both. Duplication is determined according to the valuereturned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` or `list2`, but not both.</returns>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.SymmetricDifferenceWith``2(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both. Duplication is determined according to the valuereturned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` or `list2`, but not both.</returns>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.SymmetricDifferenceWith``2(System.Func{``0,``1,System.Boolean},Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``1})">
            <summary>
            Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both. Duplication is determined according to the valuereturned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` or `list2`, but not both.</returns>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.SymmetricDifferenceWith``2(System.Func{``0,``1,System.Boolean},System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both. Duplication is determined according to the valuereturned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` or `list2`, but not both.</returns>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.SymmetricDifferenceWith``2(System.Func{``0,``1,System.Boolean},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both. Duplication is determined according to the valuereturned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` or `list2`, but not both.</returns>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.SymmetricDifferenceWith``1(System.Object,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both. Duplication is determined according to the valuereturned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` or `list2`, but not both.</returns>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.SymmetricDifferenceWith``1(System.Object,System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both. Duplication is determined according to the valuereturned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` or `list2`, but not both.</returns>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both. Duplication is determined according to the valuereturned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` or `list2`, but not both.</returns>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.SymmetricDifferenceWith``2(System.Object,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both. Duplication is determined according to the valuereturned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` or `list2`, but not both.</returns>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.SymmetricDifferenceWith(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both. Duplication is determined according to the valuereturned by applying the supplied predicate to two list elements.
            <para />
            sig: ((a, a) -> Boolean) -> [a] -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` or `list2`, but not both.</returns>
            <see cref="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.SymmetricDifference``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` or `list2`, but not both.</returns>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.SymmetricDifference``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` or `list2`, but not both.</returns>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.SymmetricDifference``1(System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` or `list2`, but not both.</returns>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.SymmetricDifference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Finds the set (i.e. no duplicates) of all elements contained in the first orsecond list, but not both.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The elements in `list1` or `list2`, but not both.</returns>
            <see cref="M:Ramda.NET.R.SymmetricDifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Difference(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.DifferenceWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Tail(System.String)">
            <summary>
            Returns all but the first element of the given list or string (or objectwith a `tail` method).Dispatches to the `slice` method of the first argument, if present.
            <para />
            sig: [a] -> [a]
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Head(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Init(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Last(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Take(System.Int32,System.String)">
            <summary>
            Returns the first `n` elements of the given list, string, ortransducer/transformer (or object with a `take` method).Dispatches to the `take` method of the second argument, if present.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Take(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Returns the first `n` elements of the given list, string, ortransducer/transformer (or object with a `take` method).Dispatches to the `take` method of the second argument, if present.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.TakeLast(System.Int32,System.String)">
            <summary>
            Returns a new list containing the last `n` elements of the given list.If `n <![CDATA[>]]> list.length`, returns a list of `list.length` elements.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">The number of elements to return.</param>
            <param name="xs">The collection to consider.</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.DropLast(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.TakeLast(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Returns a new list containing the last `n` elements of the given list.If `n <![CDATA[>]]> list.length`, returns a list of `list.length` elements.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">The number of elements to return.</param>
            <param name="xs">The collection to consider.</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.DropLast(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Test(System.String,System.String)">
            <summary>
            Determines whether a given string matches a given regular expression.
            <para />
            sig: RegExp -> String -> Boolean
            </summary>
            <param name="pattern">first</param>
            <param name="str">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Match(System.Text.RegularExpressions.Regex,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Test(System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Determines whether a given string matches a given regular expression.
            <para />
            sig: RegExp -> String -> Boolean
            </summary>
            <param name="pattern">first</param>
            <param name="str">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Match(System.Text.RegularExpressions.Regex,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Test(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Determines whether a given string matches a given regular expression.
            <para />
            sig: RegExp -> String -> Boolean
            </summary>
            <param name="pattern">first</param>
            <param name="str">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Match(System.Text.RegularExpressions.Regex,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Test(Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Determines whether a given string matches a given regular expression.
            <para />
            sig: RegExp -> String -> Boolean
            </summary>
            <param name="pattern">first</param>
            <param name="str">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Match(System.Text.RegularExpressions.Regex,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Test(System.Text.RegularExpressions.Regex,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Determines whether a given string matches a given regular expression.
            <para />
            sig: RegExp -> String -> Boolean
            </summary>
            <param name="pattern">first</param>
            <param name="str">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Match(System.Text.RegularExpressions.Regex,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Test(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Determines whether a given string matches a given regular expression.
            <para />
            sig: RegExp -> String -> Boolean
            </summary>
            <param name="pattern">first</param>
            <param name="str">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Match(System.Text.RegularExpressions.Regex,System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.ToPairsIn``1(``0)">
            <summary>
            Converts an object into an array of key, value arrays. The object's ownproperties and prototype properties are used. Note that the order of theoutput array is not guaranteed to be consistent across different JSplatforms.
            <para />
            sig: {String: *} -> [[String,*]]
            </summary>
            <param name="obj">The object to extract from</param>
            <returns>An array of key, value arrays from the object's own and prototype properties.</returns>
        </member>
        <member name="M:Ramda.NET.R.ToPairsIn(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Converts an object into an array of key, value arrays. The object's ownproperties and prototype properties are used. Note that the order of theoutput array is not guaranteed to be consistent across different JSplatforms.
            <para />
            sig: {String: *} -> [[String,*]]
            </summary>
            <param name="obj">The object to extract from</param>
            <returns>An array of key, value arrays from the object's own and prototype properties.</returns>
        </member>
        <member name="M:Ramda.NET.R.ToUpper(System.String)">
            <summary>
            The upper case version of a string.
            <para />
            sig: String -> String
            </summary>
            <param name="str">The string to upper case.</param>
            <returns>The upper case version of `str`.</returns>
            <see cref="M:Ramda.NET.R.ToLower(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.ToUpper(Ramda.NET.RamdaPlaceholder)">
            <summary>
            The upper case version of a string.
            <para />
            sig: String -> String
            </summary>
            <param name="str">The string to upper case.</param>
            <returns>The upper case version of `str`.</returns>
            <see cref="M:Ramda.NET.R.ToLower(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.ToLower(System.String)">
            <summary>
            The lower case version of a string.
            <para />
            sig: String -> String
            </summary>
            <param name="str">The string to lower case.</param>
            <returns>The lower case version of `str`.</returns>
            <see cref="M:Ramda.NET.R.ToUpper(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.ToLower(Ramda.NET.RamdaPlaceholder)">
            <summary>
            The lower case version of a string.
            <para />
            sig: String -> String
            </summary>
            <param name="str">The string to lower case.</param>
            <returns>The lower case version of `str`.</returns>
            <see cref="M:Ramda.NET.R.ToUpper(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``1(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},System.Func{``0,Ramda.NET.ITransformer},``0,Ramda.NET.R.IReducible)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``1(Ramda.NET.RamdaPlaceholder,System.Func{``0,Ramda.NET.ITransformer},``0,Ramda.NET.R.IReducible)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``1(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,``0,Ramda.NET.R.IReducible)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``1(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},System.Func{``0,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``1(Ramda.NET.RamdaPlaceholder,System.Object,``0,Ramda.NET.R.IReducible)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``1(System.Object,Ramda.NET.RamdaPlaceholder,``0,Ramda.NET.R.IReducible)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce(System.Object,System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``1(System.Object,System.Func{``0,Ramda.NET.ITransformer},``0,Ramda.NET.R.IReducible)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``1(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},System.Object,``0,Ramda.NET.R.IReducible)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``1(System.Object,System.Object,``0,Ramda.NET.R.IReducible)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse``1(Ramda.NET.DynamicDelegate,Ramda.NET.DynamicDelegate,``0)">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse``1(Ramda.NET.RamdaPlaceholder,Ramda.NET.DynamicDelegate,``0)">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse``1(Ramda.NET.DynamicDelegate,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse(Ramda.NET.DynamicDelegate,Ramda.NET.DynamicDelegate,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse(Ramda.NET.DynamicDelegate,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse``1(Ramda.NET.RamdaPlaceholder,System.Object,``0)">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse(Ramda.NET.DynamicDelegate,System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse``1(Ramda.NET.DynamicDelegate,System.Object,``0)">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Type``1(``0)">
            <summary>
            Gives a single-word string description of the (native) type of a value,returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does notattempt to distinguish user Object types any further, reporting them all as'Object'.
            <para />
            sig: (* -> {*}) -> String
            </summary>
            <param name="val">The value to test</param>
            <returns>String</returns>
        </member>
        <member name="M:Ramda.NET.R.Type(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Gives a single-word string description of the (native) type of a value,returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does notattempt to distinguish user Object types any further, reporting them all as'Object'.
            <para />
            sig: (* -> {*}) -> String
            </summary>
            <param name="val">The value to test</param>
            <returns>String</returns>
        </member>
        <member name="M:Ramda.NET.R.Unary(System.Delegate)">
            <summary>
            Wraps a function of any arity (including nullary) in a function that acceptsexactly 1 parameter. Any extraneous parameters will not be passed to thesupplied function.
            <para />
            sig: (* -> b) -> (a -> b)
            </summary>
            <param name="fn">The function to wrap.</param>
            <returns>A new function wrapping `fn`. The new function is guaranteed to be of arity 1.</returns>
        </member>
        <member name="M:Ramda.NET.R.Unary(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Wraps a function of any arity (including nullary) in a function that acceptsexactly 1 parameter. Any extraneous parameters will not be passed to thesupplied function.
            <para />
            sig: (* -> b) -> (a -> b)
            </summary>
            <param name="fn">The function to wrap.</param>
            <returns>A new function wrapping `fn`. The new function is guaranteed to be of arity 1.</returns>
        </member>
        <member name="M:Ramda.NET.R.Unary(System.Object)">
            <summary>
            Wraps a function of any arity (including nullary) in a function that acceptsexactly 1 parameter. Any extraneous parameters will not be passed to thesupplied function.
            <para />
            sig: (* -> b) -> (a -> b)
            </summary>
            <param name="fn">The function to wrap.</param>
            <returns>A new function wrapping `fn`. The new function is guaranteed to be of arity 1.</returns>
        </member>
        <member name="M:Ramda.NET.R.Unfold(System.Func{System.Int32,System.Object},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Builds a list from a seed value. Accepts an iterator function, which returnseither false to stop iteration or an array of length 2 containing the valueto add to the resulting list and the seed to be used in the next call to theiterator function.The iterator function receives one argument: *(seed)*.
            <para />
            sig: (a -> [b]) -> * -> [b]
            </summary>
            <param name="fn">The iterator function. receives one argument, `seed`, and returns       either false to quit iteration or an array of length two to proceed. The element       at index 0 of this array will be added to the resulting array, and the element       at index 1 will be passed to the next call to `fn`.</param>
            <param name="seed">The seed value.</param>
            <returns>The final list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Unfold(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Builds a list from a seed value. Accepts an iterator function, which returnseither false to stop iteration or an array of length 2 containing the valueto add to the resulting list and the seed to be used in the next call to theiterator function.The iterator function receives one argument: *(seed)*.
            <para />
            sig: (a -> [b]) -> * -> [b]
            </summary>
            <param name="fn">The iterator function. receives one argument, `seed`, and returns       either false to quit iteration or an array of length two to proceed. The element       at index 0 of this array will be added to the resulting array, and the element       at index 1 will be passed to the next call to `fn`.</param>
            <param name="seed">The seed value.</param>
            <returns>The final list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Unfold(System.Object,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Builds a list from a seed value. Accepts an iterator function, which returnseither false to stop iteration or an array of length 2 containing the valueto add to the resulting list and the seed to be used in the next call to theiterator function.The iterator function receives one argument: *(seed)*.
            <para />
            sig: (a -> [b]) -> * -> [b]
            </summary>
            <param name="fn">The iterator function. receives one argument, `seed`, and returns       either false to quit iteration or an array of length two to proceed. The element       at index 0 of this array will be added to the resulting array, and the element       at index 1 will be passed to the next call to `fn`.</param>
            <param name="seed">The seed value.</param>
            <returns>The final list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Union``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="as">The first list.</param>
            <param name="bs">The second list.</param>
            <returns>The first and second lists concatenated, with duplicates removed.</returns>
        </member>
        <member name="M:Ramda.NET.R.Union``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="as">The first list.</param>
            <param name="bs">The second list.</param>
            <returns>The first and second lists concatenated, with duplicates removed.</returns>
        </member>
        <member name="M:Ramda.NET.R.Union``1(System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="as">The first list.</param>
            <param name="bs">The second list.</param>
            <returns>The first and second lists concatenated, with duplicates removed.</returns>
        </member>
        <member name="M:Ramda.NET.R.Union(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list.
            <para />
            sig: [*] -> [*] -> [*]
            </summary>
            <param name="as">The first list.</param>
            <param name="bs">The second list.</param>
            <returns>The first and second lists concatenated, with duplicates removed.</returns>
        </member>
        <member name="M:Ramda.NET.R.Uniq``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing only one copy of each element in the originallist. `R.equals` is used to determine equality.
            <para />
            sig: [a] -> [a]
            </summary>
            <param name="list">The array to consider.</param>
            <returns>The list of unique items.</returns>
        </member>
        <member name="M:Ramda.NET.R.Uniq(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing only one copy of each element in the originallist. `R.equals` is used to determine equality.
            <para />
            sig: [a] -> [a]
            </summary>
            <param name="list">The array to consider.</param>
            <returns>The list of unique items.</returns>
        </member>
        <member name="M:Ramda.NET.R.UniqBy``2(System.Func{``0,``1},System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing only one copy of each element in the originallist, based upon the value returned by applying the supplied function toeach list element. Prefers the first item if the supplied function producesthe same value on two items. `R.equals` is used for comparison.
            <para />
            sig: (a -> b) -> [a] -> [a]
            </summary>
            <param name="fn">A function used to produce a value to use during comparisons.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of unique items.</returns>
        </member>
        <member name="M:Ramda.NET.R.UniqBy``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing only one copy of each element in the originallist, based upon the value returned by applying the supplied function toeach list element. Prefers the first item if the supplied function producesthe same value on two items. `R.equals` is used for comparison.
            <para />
            sig: (a -> b) -> [a] -> [a]
            </summary>
            <param name="fn">A function used to produce a value to use during comparisons.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of unique items.</returns>
        </member>
        <member name="M:Ramda.NET.R.UniqBy``2(System.Func{``0,``1},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing only one copy of each element in the originallist, based upon the value returned by applying the supplied function toeach list element. Prefers the first item if the supplied function producesthe same value on two items. `R.equals` is used for comparison.
            <para />
            sig: (a -> b) -> [a] -> [a]
            </summary>
            <param name="fn">A function used to produce a value to use during comparisons.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of unique items.</returns>
        </member>
        <member name="M:Ramda.NET.R.UniqBy(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing only one copy of each element in the originallist, based upon the value returned by applying the supplied function toeach list element. Prefers the first item if the supplied function producesthe same value on two items. `R.equals` is used for comparison.
            <para />
            sig: (a -> b) -> [a] -> [a]
            </summary>
            <param name="fn">A function used to produce a value to use during comparisons.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of unique items.</returns>
        </member>
        <member name="M:Ramda.NET.R.UniqBy``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing only one copy of each element in the originallist, based upon the value returned by applying the supplied function toeach list element. Prefers the first item if the supplied function producesthe same value on two items. `R.equals` is used for comparison.
            <para />
            sig: (a -> b) -> [a] -> [a]
            </summary>
            <param name="fn">A function used to produce a value to use during comparisons.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of unique items.</returns>
        </member>
        <member name="M:Ramda.NET.R.UniqBy(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing only one copy of each element in the originallist, based upon the value returned by applying the supplied function toeach list element. Prefers the first item if the supplied function producesthe same value on two items. `R.equals` is used for comparison.
            <para />
            sig: (a -> b) -> [a] -> [a]
            </summary>
            <param name="fn">A function used to produce a value to use during comparisons.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of unique items.</returns>
        </member>
        <member name="M:Ramda.NET.R.Unnest(System.Object)">
            <summary>
            Shorthand for `R.chain(R.identity)`, which removes one level of nesting fromany [Chain](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain c => c (c a) -> c a
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Flatten(System.Collections.IDictionary)"/>
            <see cref="M:Ramda.NET.R.Chain(System.Delegate,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.UseWith``1(System.Delegate,System.Collections.Generic.IList{System.Object})">
            <summary>
            Accepts a function `fn` and a list of transformer functions and returns anew curried function. When the new function is invoked, it calls thefunction `fn` with parameters consisting of the result of calling eachsupplied handler on successive arguments to the new function.If more arguments are passed to the returned function than transformerfunctions, those arguments are passed directly to `fn` as additionalparameters. If you expect additional arguments that don't need to betransformed, although you can ignore them, it's best to pass an identityfunction so that the new function reports the correct arity.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="fn">The function to wrap.</param>
            <param name="transformers">A list of transformer functions</param>
            <returns>The wrapped function.</returns>
            <see cref="M:Ramda.NET.R.Converge(System.Delegate,System.Collections.Generic.IList{System.Delegate})"/>
        </member>
        <member name="M:Ramda.NET.R.UseWith(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{System.Object})">
            <summary>
            Accepts a function `fn` and a list of transformer functions and returns anew curried function. When the new function is invoked, it calls thefunction `fn` with parameters consisting of the result of calling eachsupplied handler on successive arguments to the new function.If more arguments are passed to the returned function than transformerfunctions, those arguments are passed directly to `fn` as additionalparameters. If you expect additional arguments that don't need to betransformed, although you can ignore them, it's best to pass an identityfunction so that the new function reports the correct arity.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="fn">The function to wrap.</param>
            <param name="transformers">A list of transformer functions</param>
            <returns>The wrapped function.</returns>
            <see cref="M:Ramda.NET.R.Converge(System.Delegate,System.Collections.Generic.IList{System.Delegate})"/>
        </member>
        <member name="M:Ramda.NET.R.ValuesIn``1(``0)">
            <summary>
            Returns a list of all the properties, including prototype properties, of thesupplied object.Note that the order of the output array is not guaranteed to be consistentacross different JS platforms.
            <para />
            sig: {k: v} -> [v]
            </summary>
            <param name="obj">The object to extract values from</param>
            <returns>An array of the values of the object's own and prototype properties.</returns>
        </member>
        <member name="M:Ramda.NET.R.ValuesIn(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a list of all the properties, including prototype properties, of thesupplied object.Note that the order of the output array is not guaranteed to be consistentacross different JS platforms.
            <para />
            sig: {k: v} -> [v]
            </summary>
            <param name="obj">The object to extract values from</param>
            <returns>An array of the values of the object's own and prototype properties.</returns>
        </member>
        <member name="M:Ramda.NET.R.Without``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list without values in the first argument.`R.equals` is used to determine equality.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: [a] -> [a] -> [a]
            </summary>
            <param name="list1">The values to be removed from `list2`.</param>
            <param name="list2">The array to remove values from.</param>
            <returns>The new array without values in `list1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Without``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list without values in the first argument.`R.equals` is used to determine equality.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: [a] -> [a] -> [a]
            </summary>
            <param name="list1">The values to be removed from `list2`.</param>
            <param name="list2">The array to remove values from.</param>
            <returns>The new array without values in `list1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Without``1(System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list without values in the first argument.`R.equals` is used to determine equality.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: [a] -> [a] -> [a]
            </summary>
            <param name="list1">The values to be removed from `list2`.</param>
            <param name="list2">The array to remove values from.</param>
            <returns>The new array without values in `list1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Without(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list without values in the first argument.`R.equals` is used to determine equality.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: [a] -> [a] -> [a]
            </summary>
            <param name="list1">The values to be removed from `list2`.</param>
            <param name="list2">The array to remove values from.</param>
            <returns>The new array without values in `list1`.</returns>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Range(System.Int32,System.Int32)">
            <summary>
            Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
            <para />
            sig: Number -> Number -> [Number]
            </summary>
            <param name="from">The first number in the list.</param>
            <param name="to">One more than the last number in the list.</param>
            <returns>The list of numbers in tthe set `[a, b)`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Range(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
            <para />
            sig: Number -> Number -> [Number]
            </summary>
            <param name="from">The first number in the list.</param>
            <param name="to">One more than the last number in the list.</param>
            <returns>The list of numbers in tthe set `[a, b)`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Range(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
            <para />
            sig: Number -> Number -> [Number]
            </summary>
            <param name="from">The first number in the list.</param>
            <param name="to">One more than the last number in the list.</param>
            <returns>The list of numbers in tthe set `[a, b)`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Range(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
            <para />
            sig: Number -> Number -> [Number]
            </summary>
            <param name="from">The first number in the list.</param>
            <param name="to">One more than the last number in the list.</param>
            <returns>The list of numbers in tthe set `[a, b)`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``3(System.Func{``1,``0,``2},``1,System.Func{``0,System.String},System.Collections.Generic.IList{``0})">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``2(Ramda.NET.RamdaPlaceholder,``1,System.Func{``0,System.String},System.Collections.Generic.IList{``0})">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``3(System.Func{``1,``0,``2},Ramda.NET.RamdaPlaceholder,System.Func{``0,System.String},System.Collections.Generic.IList{``0})">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``3(System.Func{``1,``0,``2},``1,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``3(System.Func{``1,``0,``2},``1,System.Func{``0,System.String},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``3(System.Func{``1,``0,``2},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``3(System.Func{``1,``0,``2},``1,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``2(Ramda.NET.RamdaPlaceholder,``1,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``1(System.Object,Ramda.NET.RamdaPlaceholder,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``2(System.Object,``1,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``1(System.Object,``0,System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``1(System.Object,``0,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``2(System.Object,``1,System.Func{``0,System.String},System.Collections.Generic.IList{``0})">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``3(System.Func{``1,``0,``2},``1,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy``2(System.Object,``1,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceBy(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Groups the elements of the list according to the result of callingthe String-returning function `keyFn` on each element and reduces the elementsof each group to a single value via the reducer function `valueFn`.This function is basically a more general `groupBy` function.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
            </summary>
            <param name="valueFn">The function that reduces the elements of each group to a single       value. Receives two values, accumulator for a particular group and the current element.</param>
            <param name="acc">The (initial) accumulator value for each group.</param>
            <param name="keyFn">The function that maps the list's element into a key.</param>
            <param name="list">The array to group.</param>
            <returns>An object with the output of `keyFn` for keys, mapped to the output of `valueFn` for elements which produced that key when passed to `keyFn`.</returns>
            <see cref="M:Ramda.NET.R.GroupBy(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduced``1(``0)">
            <summary>
            Returns a value wrapped to indicate that it is the final value of the reduceand transduce functions. The returned value should be considered a blackbox: the internal structure is not guaranteed to be stable.Note: this optimization is unavailable to functions not explicitly listedabove. For instance, it is not currently supported by reduceRight.
            <para />
            sig: a -> *
            </summary>
            <param name="x">The final value of the reduce.</param>
            <returns>The wrapped value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a value wrapped to indicate that it is the final value of the reduceand transduce functions. The returned value should be considered a blackbox: the internal structure is not guaranteed to be stable.Note: this optimization is unavailable to functions not explicitly listedabove. For instance, it is not currently supported by reduceRight.
            <para />
            sig: a -> *
            </summary>
            <param name="x">The final value of the reduce.</param>
            <returns>The wrapped value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceRight``3(System.Func{``1,``0,``2},``1,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.Similar to `reduce`, except moves through the input list from the right tothe left.The iterator function receives two values: *(value, acc)*, while the arguments'order of `reduce`'s iterator function is *(acc, value)*.Note: `R.reduceRight` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
            <para />
            sig: (a, b -> b) -> b -> [a] -> b
            </summary>
            <param name="fn">The iterator function. Receives two values, the current element from the array       and the accumulator.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceRight``2(Ramda.NET.RamdaPlaceholder,``1,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.Similar to `reduce`, except moves through the input list from the right tothe left.The iterator function receives two values: *(value, acc)*, while the arguments'order of `reduce`'s iterator function is *(acc, value)*.Note: `R.reduceRight` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
            <para />
            sig: (a, b -> b) -> b -> [a] -> b
            </summary>
            <param name="fn">The iterator function. Receives two values, the current element from the array       and the accumulator.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceRight``3(System.Func{``1,``0,``2},Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.Similar to `reduce`, except moves through the input list from the right tothe left.The iterator function receives two values: *(value, acc)*, while the arguments'order of `reduce`'s iterator function is *(acc, value)*.Note: `R.reduceRight` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
            <para />
            sig: (a, b -> b) -> b -> [a] -> b
            </summary>
            <param name="fn">The iterator function. Receives two values, the current element from the array       and the accumulator.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceRight``3(System.Func{``1,``0,``2},``1,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.Similar to `reduce`, except moves through the input list from the right tothe left.The iterator function receives two values: *(value, acc)*, while the arguments'order of `reduce`'s iterator function is *(acc, value)*.Note: `R.reduceRight` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
            <para />
            sig: (a, b -> b) -> b -> [a] -> b
            </summary>
            <param name="fn">The iterator function. Receives two values, the current element from the array       and the accumulator.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceRight``3(System.Func{``1,``0,``2},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.Similar to `reduce`, except moves through the input list from the right tothe left.The iterator function receives two values: *(value, acc)*, while the arguments'order of `reduce`'s iterator function is *(acc, value)*.Note: `R.reduceRight` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
            <para />
            sig: (a, b -> b) -> b -> [a] -> b
            </summary>
            <param name="fn">The iterator function. Receives two values, the current element from the array       and the accumulator.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceRight``1(System.Object,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.Similar to `reduce`, except moves through the input list from the right tothe left.The iterator function receives two values: *(value, acc)*, while the arguments'order of `reduce`'s iterator function is *(acc, value)*.Note: `R.reduceRight` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
            <para />
            sig: (a, b -> b) -> b -> [a] -> b
            </summary>
            <param name="fn">The iterator function. Receives two values, the current element from the array       and the accumulator.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceRight``1(System.Object,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.Similar to `reduce`, except moves through the input list from the right tothe left.The iterator function receives two values: *(value, acc)*, while the arguments'order of `reduce`'s iterator function is *(acc, value)*.Note: `R.reduceRight` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
            <para />
            sig: (a, b -> b) -> b -> [a] -> b
            </summary>
            <param name="fn">The iterator function. Receives two values, the current element from the array       and the accumulator.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceRight(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.Similar to `reduce`, except moves through the input list from the right tothe left.The iterator function receives two values: *(value, acc)*, while the arguments'order of `reduce`'s iterator function is *(acc, value)*.Note: `R.reduceRight` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
            <para />
            sig: (a, b -> b) -> b -> [a] -> b
            </summary>
            <param name="fn">The iterator function. Receives two values, the current element from the array       and the accumulator.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceRight``2(System.Object,``1,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.Similar to `reduce`, except moves through the input list from the right tothe left.The iterator function receives two values: *(value, acc)*, while the arguments'order of `reduce`'s iterator function is *(acc, value)*.Note: `R.reduceRight` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
            <para />
            sig: (a, b -> b) -> b -> [a] -> b
            </summary>
            <param name="fn">The iterator function. Receives two values, the current element from the array       and the accumulator.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceRight(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a single item by iterating through the list, successively callingthe iterator function and passing it an accumulator value and the currentvalue from the array, and then passing the result to the next call.Similar to `reduce`, except moves through the input list from the right tothe left.The iterator function receives two values: *(value, acc)*, while the arguments'order of `reduce`'s iterator function is *(acc, value)*.Note: `R.reduceRight` does not skip deleted or unassigned indices (sparsearrays), unlike the native `Array.prototype.reduce` method. For more detailson this behavior, see:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
            <para />
            sig: (a, b -> b) -> b -> [a] -> b
            </summary>
            <param name="fn">The iterator function. Receives two values, the current element from the array       and the accumulator.</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile``2(System.Func{``1,``0,System.Boolean},System.Func{``1,``0,System.Boolean},``1,System.Collections.Generic.IList{``0})">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile``2(Ramda.NET.RamdaPlaceholder,System.Func{``1,``0,System.Boolean},``1,System.Collections.Generic.IList{``0})">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile``2(System.Func{``1,``0,System.Boolean},Ramda.NET.RamdaPlaceholder,``1,System.Collections.Generic.IList{``0})">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile``2(System.Func{``1,``0,System.Boolean},System.Func{``1,``0,System.Boolean},Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile``2(System.Func{``1,``0,System.Boolean},System.Func{``1,``0,System.Boolean},``1,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile``2(System.Func{``1,``0,System.Boolean},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile``2(System.Func{``1,``0,System.Boolean},System.Func{``1,``0,System.Boolean},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile``2(Ramda.NET.RamdaPlaceholder,System.Object,``1,System.Collections.Generic.IList{``0})">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile``2(System.Object,Ramda.NET.RamdaPlaceholder,``1,System.Collections.Generic.IList{``0})">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile``1(System.Object,System.Object,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile``1(System.Object,System.Object,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile(System.Object,System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile``2(System.Object,System.Func{``1,``0,System.Boolean},``1,System.Collections.Generic.IList{``0})">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile``2(System.Func{``1,``0,System.Boolean},System.Object,``1,System.Collections.Generic.IList{``0})">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile``2(System.Object,System.Object,``1,System.Collections.Generic.IList{``0})">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.ReduceWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Like `reduce`, `reduceWhile` returns a single item by iterating throughthe list, successively calling the iterator function. `reduceWhile` alsotakes a predicate that is evaluated before each step. If the predicate returns`false`, it "short-circuits" the iteration and returns the current valueof the accumulator.
            <para />
            sig: ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
            </summary>
            <param name="pred">The predicate. It is passed the accumulator and the       current element.</param>
            <param name="fn">The iterator function. Receives two values, the       accumulator and the current element.</param>
            <param name="a">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Reject``2(System.Func{``1,System.Boolean},``0)">
            <summary>
            The complement of `filter`.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Reject``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            The complement of `filter`.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Reject``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            The complement of `filter`.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Reject(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            The complement of `filter`.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Reject``1(System.Object,``0)">
            <summary>
            The complement of `filter`.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Reject(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            The complement of `filter`.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: Filterable f => (a -> Boolean) -> f a -> f a
            </summary>
            <param name="pred">first</param>
            <param name="filterable">second</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.Filter(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Remove``1(System.Int32,System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Removes the sub-list of `list` starting at index `start` and containing`count` elements. _Note that this is not destructive_: it returns a copy ofthe list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="start">The position to start removing elements</param>
            <param name="count">The number of elements to remove</param>
            <param name="list">The list to remove from</param>
            <returns>A new Array with `count` elements from `start` removed.</returns>
        </member>
        <member name="M:Ramda.NET.R.Remove``1(Ramda.NET.RamdaPlaceholder,System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Removes the sub-list of `list` starting at index `start` and containing`count` elements. _Note that this is not destructive_: it returns a copy ofthe list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="start">The position to start removing elements</param>
            <param name="count">The number of elements to remove</param>
            <param name="list">The list to remove from</param>
            <returns>A new Array with `count` elements from `start` removed.</returns>
        </member>
        <member name="M:Ramda.NET.R.Remove``1(System.Int32,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Removes the sub-list of `list` starting at index `start` and containing`count` elements. _Note that this is not destructive_: it returns a copy ofthe list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="start">The position to start removing elements</param>
            <param name="count">The number of elements to remove</param>
            <param name="list">The list to remove from</param>
            <returns>A new Array with `count` elements from `start` removed.</returns>
        </member>
        <member name="M:Ramda.NET.R.Remove(System.Int32,System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Removes the sub-list of `list` starting at index `start` and containing`count` elements. _Note that this is not destructive_: it returns a copy ofthe list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="start">The position to start removing elements</param>
            <param name="count">The number of elements to remove</param>
            <param name="list">The list to remove from</param>
            <returns>A new Array with `count` elements from `start` removed.</returns>
        </member>
        <member name="M:Ramda.NET.R.Remove(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Removes the sub-list of `list` starting at index `start` and containing`count` elements. _Note that this is not destructive_: it returns a copy ofthe list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="start">The position to start removing elements</param>
            <param name="count">The number of elements to remove</param>
            <param name="list">The list to remove from</param>
            <returns>A new Array with `count` elements from `start` removed.</returns>
        </member>
        <member name="M:Ramda.NET.R.Remove(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Removes the sub-list of `list` starting at index `start` and containing`count` elements. _Note that this is not destructive_: it returns a copy ofthe list with the changes.<![CDATA[<]]>small<![CDATA[>]]>No lists have been harmed in the application of this function.<![CDATA[<]]>/small<![CDATA[>]]>
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="start">The position to start removing elements</param>
            <param name="count">The number of elements to remove</param>
            <param name="list">The list to remove from</param>
            <returns>A new Array with `count` elements from `start` removed.</returns>
        </member>
        <member name="M:Ramda.NET.R.Repeat``1(``0,System.Int32)">
            <summary>
            Returns a fixed list of size `n` containing a specified identical value.
            <para />
            sig: a -> n -> [a]
            </summary>
            <param name="value">The value to repeat.</param>
            <param name="n">The desired size of the output list.</param>
            <returns>A new array containing `n` `value`s.</returns>
        </member>
        <member name="M:Ramda.NET.R.Repeat(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Returns a fixed list of size `n` containing a specified identical value.
            <para />
            sig: a -> n -> [a]
            </summary>
            <param name="value">The value to repeat.</param>
            <param name="n">The desired size of the output list.</param>
            <returns>A new array containing `n` `value`s.</returns>
        </member>
        <member name="M:Ramda.NET.R.Repeat``1(``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a fixed list of size `n` containing a specified identical value.
            <para />
            sig: a -> n -> [a]
            </summary>
            <param name="value">The value to repeat.</param>
            <param name="n">The desired size of the output list.</param>
            <returns>A new array containing `n` `value`s.</returns>
        </member>
        <member name="M:Ramda.NET.R.Repeat(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a fixed list of size `n` containing a specified identical value.
            <para />
            sig: a -> n -> [a]
            </summary>
            <param name="value">The value to repeat.</param>
            <param name="n">The desired size of the output list.</param>
            <returns>A new array containing `n` `value`s.</returns>
        </member>
        <member name="M:Ramda.NET.R.Replace(System.Text.RegularExpressions.Regex,System.String,System.String)">
            <summary>
            Replace a substring or regex match in a string with a replacement.
            <para />
            sig: RegExp|String -> String -> String -> String
            </summary>
            <param name="pattern">A regular expression or a substring to match.</param>
            <param name="replacement">The string to replace the matches with.</param>
            <param name="str">The String to do the search and replacement in.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Ramda.NET.R.Replace(Ramda.NET.RamdaPlaceholder,System.String,System.String)">
            <summary>
            Replace a substring or regex match in a string with a replacement.
            <para />
            sig: RegExp|String -> String -> String -> String
            </summary>
            <param name="pattern">A regular expression or a substring to match.</param>
            <param name="replacement">The string to replace the matches with.</param>
            <param name="str">The String to do the search and replacement in.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Ramda.NET.R.Replace(System.Text.RegularExpressions.Regex,Ramda.NET.RamdaPlaceholder,System.String)">
            <summary>
            Replace a substring or regex match in a string with a replacement.
            <para />
            sig: RegExp|String -> String -> String -> String
            </summary>
            <param name="pattern">A regular expression or a substring to match.</param>
            <param name="replacement">The string to replace the matches with.</param>
            <param name="str">The String to do the search and replacement in.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Ramda.NET.R.Replace(System.Text.RegularExpressions.Regex,System.String,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Replace a substring or regex match in a string with a replacement.
            <para />
            sig: RegExp|String -> String -> String -> String
            </summary>
            <param name="pattern">A regular expression or a substring to match.</param>
            <param name="replacement">The string to replace the matches with.</param>
            <param name="str">The String to do the search and replacement in.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Ramda.NET.R.Replace(System.Text.RegularExpressions.Regex,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Replace a substring or regex match in a string with a replacement.
            <para />
            sig: RegExp|String -> String -> String -> String
            </summary>
            <param name="pattern">A regular expression or a substring to match.</param>
            <param name="replacement">The string to replace the matches with.</param>
            <param name="str">The String to do the search and replacement in.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Ramda.NET.R.Replace(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Replace a substring or regex match in a string with a replacement.
            <para />
            sig: RegExp|String -> String -> String -> String
            </summary>
            <param name="pattern">A regular expression or a substring to match.</param>
            <param name="replacement">The string to replace the matches with.</param>
            <param name="str">The String to do the search and replacement in.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Ramda.NET.R.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a new list or string with the elements or characters in reverseorder.
            <para />
            sig: [a] -> [a]
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.Reverse(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list or string with the elements or characters in reverseorder.
            <para />
            sig: [a] -> [a]
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.Scan``3(System.Func{``1,``0,``2},``1,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Scan is similar to reduce, but returns a list of successively reduced valuesfrom the left
            <para />
            sig: (a,b -> a) -> a -> [b] -> [a]
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>A list of all intermediately reduced values.</returns>
        </member>
        <member name="M:Ramda.NET.R.Scan``2(Ramda.NET.RamdaPlaceholder,``1,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Scan is similar to reduce, but returns a list of successively reduced valuesfrom the left
            <para />
            sig: (a,b -> a) -> a -> [b] -> [a]
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>A list of all intermediately reduced values.</returns>
        </member>
        <member name="M:Ramda.NET.R.Scan``3(System.Func{``1,``0,``2},Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Scan is similar to reduce, but returns a list of successively reduced valuesfrom the left
            <para />
            sig: (a,b -> a) -> a -> [b] -> [a]
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>A list of all intermediately reduced values.</returns>
        </member>
        <member name="M:Ramda.NET.R.Scan``3(System.Func{``1,``0,``2},``1,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Scan is similar to reduce, but returns a list of successively reduced valuesfrom the left
            <para />
            sig: (a,b -> a) -> a -> [b] -> [a]
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>A list of all intermediately reduced values.</returns>
        </member>
        <member name="M:Ramda.NET.R.Scan``3(System.Func{``1,``0,``2},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Scan is similar to reduce, but returns a list of successively reduced valuesfrom the left
            <para />
            sig: (a,b -> a) -> a -> [b] -> [a]
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>A list of all intermediately reduced values.</returns>
        </member>
        <member name="M:Ramda.NET.R.Scan``1(System.Object,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Scan is similar to reduce, but returns a list of successively reduced valuesfrom the left
            <para />
            sig: (a,b -> a) -> a -> [b] -> [a]
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>A list of all intermediately reduced values.</returns>
        </member>
        <member name="M:Ramda.NET.R.Scan``1(System.Object,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Scan is similar to reduce, but returns a list of successively reduced valuesfrom the left
            <para />
            sig: (a,b -> a) -> a -> [b] -> [a]
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>A list of all intermediately reduced values.</returns>
        </member>
        <member name="M:Ramda.NET.R.Scan(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Scan is similar to reduce, but returns a list of successively reduced valuesfrom the left
            <para />
            sig: (a,b -> a) -> a -> [b] -> [a]
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>A list of all intermediately reduced values.</returns>
        </member>
        <member name="M:Ramda.NET.R.Scan``2(System.Object,``1,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Scan is similar to reduce, but returns a list of successively reduced valuesfrom the left
            <para />
            sig: (a,b -> a) -> a -> [b] -> [a]
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>A list of all intermediately reduced values.</returns>
        </member>
        <member name="M:Ramda.NET.R.Scan(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Scan is similar to reduce, but returns a list of successively reduced valuesfrom the left
            <para />
            sig: (a,b -> a) -> a -> [b] -> [a]
            </summary>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array</param>
            <param name="acc">The accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>A list of all intermediately reduced values.</returns>
        </member>
        <member name="M:Ramda.NET.R.Sequence``1(System.Delegate,``0)">
            <summary>
            Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into anApplicative of Traversable.Dispatches to the `sequence` method of the second argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
            </summary>
            <param name="of">first</param>
            <param name="traversable">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Traverse(System.Delegate,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Sequence``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into anApplicative of Traversable.Dispatches to the `sequence` method of the second argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
            </summary>
            <param name="of">first</param>
            <param name="traversable">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Traverse(System.Delegate,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Sequence``1(System.Object,``0)">
            <summary>
            Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into anApplicative of Traversable.Dispatches to the `sequence` method of the second argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
            </summary>
            <param name="of">first</param>
            <param name="traversable">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Traverse(System.Delegate,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Sequence``1(System.Delegate,System.Collections.Generic.IList{``0})">
            <summary>
            Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into anApplicative of Traversable.Dispatches to the `sequence` method of the second argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
            </summary>
            <param name="of">first</param>
            <param name="traversable">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Traverse(System.Delegate,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Sequence``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into anApplicative of Traversable.Dispatches to the `sequence` method of the second argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
            </summary>
            <param name="of">first</param>
            <param name="traversable">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Traverse(System.Delegate,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into anApplicative of Traversable.Dispatches to the `sequence` method of the second argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
            </summary>
            <param name="of">first</param>
            <param name="traversable">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Traverse(System.Delegate,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Sequence(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into anApplicative of Traversable.Dispatches to the `sequence` method of the second argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
            </summary>
            <param name="of">first</param>
            <param name="traversable">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Traverse(System.Delegate,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Sequence``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into anApplicative of Traversable.Dispatches to the `sequence` method of the second argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
            </summary>
            <param name="of">first</param>
            <param name="traversable">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Traverse(System.Delegate,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Sequence(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into anApplicative of Traversable.Dispatches to the `sequence` method of the second argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
            </summary>
            <param name="of">first</param>
            <param name="traversable">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Traverse(System.Delegate,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Slice``1(System.Int32,System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the elements of the given list or string (or object with a `slice`method) from `fromIndex` (inclusive) to `toIndex` (exclusive).Dispatches to the `slice` method of the third argument, if present.
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="fromIndex">The start index (inclusive).</param>
            <param name="toIndex">The end index (exclusive).</param>
            <param name="list">third</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.Slice``1(Ramda.NET.RamdaPlaceholder,System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the elements of the given list or string (or object with a `slice`method) from `fromIndex` (inclusive) to `toIndex` (exclusive).Dispatches to the `slice` method of the third argument, if present.
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="fromIndex">The start index (inclusive).</param>
            <param name="toIndex">The end index (exclusive).</param>
            <param name="list">third</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.Slice``1(System.Int32,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the elements of the given list or string (or object with a `slice`method) from `fromIndex` (inclusive) to `toIndex` (exclusive).Dispatches to the `slice` method of the third argument, if present.
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="fromIndex">The start index (inclusive).</param>
            <param name="toIndex">The end index (exclusive).</param>
            <param name="list">third</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.Slice(System.Int32,System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the elements of the given list or string (or object with a `slice`method) from `fromIndex` (inclusive) to `toIndex` (exclusive).Dispatches to the `slice` method of the third argument, if present.
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="fromIndex">The start index (inclusive).</param>
            <param name="toIndex">The end index (exclusive).</param>
            <param name="list">third</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.Slice(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the elements of the given list or string (or object with a `slice`method) from `fromIndex` (inclusive) to `toIndex` (exclusive).Dispatches to the `slice` method of the third argument, if present.
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="fromIndex">The start index (inclusive).</param>
            <param name="toIndex">The end index (exclusive).</param>
            <param name="list">third</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.Slice(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the elements of the given list or string (or object with a `slice`method) from `fromIndex` (inclusive) to `toIndex` (exclusive).Dispatches to the `slice` method of the third argument, if present.
            <para />
            sig: Number -> Number -> [a] -> [a]
            </summary>
            <param name="fromIndex">The start index (inclusive).</param>
            <param name="toIndex">The end index (exclusive).</param>
            <param name="list">third</param>
            <returns>*</returns>
        </member>
        <member name="M:Ramda.NET.R.Sort``1(System.Func{``0,``0,System.Int32},System.Collections.Generic.IList{``0})">
            <summary>
            Returns a copy of the list, sorted according to the comparator function,which should accept two values at a time and return a negative number if thefirst value is smaller, a positive number if it's larger, and zero if theyare equal. Please note that this is a **copy** of the list. It does notmodify the original.
            <para />
            sig: (a,a -> Number) -> [a] -> [a]
            </summary>
            <param name="comparator">A sorting function :: a -<![CDATA[>]]> b -<![CDATA[>]]> Int</param>
            <param name="list">The list to sort</param>
            <returns>a new array with its elements sorted by the comparator function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Sort``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a copy of the list, sorted according to the comparator function,which should accept two values at a time and return a negative number if thefirst value is smaller, a positive number if it's larger, and zero if theyare equal. Please note that this is a **copy** of the list. It does notmodify the original.
            <para />
            sig: (a,a -> Number) -> [a] -> [a]
            </summary>
            <param name="comparator">A sorting function :: a -<![CDATA[>]]> b -<![CDATA[>]]> Int</param>
            <param name="list">The list to sort</param>
            <returns>a new array with its elements sorted by the comparator function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Sort``1(System.Func{``0,``0,System.Int32},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a copy of the list, sorted according to the comparator function,which should accept two values at a time and return a negative number if thefirst value is smaller, a positive number if it's larger, and zero if theyare equal. Please note that this is a **copy** of the list. It does notmodify the original.
            <para />
            sig: (a,a -> Number) -> [a] -> [a]
            </summary>
            <param name="comparator">A sorting function :: a -<![CDATA[>]]> b -<![CDATA[>]]> Int</param>
            <param name="list">The list to sort</param>
            <returns>a new array with its elements sorted by the comparator function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Sort(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a copy of the list, sorted according to the comparator function,which should accept two values at a time and return a negative number if thefirst value is smaller, a positive number if it's larger, and zero if theyare equal. Please note that this is a **copy** of the list. It does notmodify the original.
            <para />
            sig: (a,a -> Number) -> [a] -> [a]
            </summary>
            <param name="comparator">A sorting function :: a -<![CDATA[>]]> b -<![CDATA[>]]> Int</param>
            <param name="list">The list to sort</param>
            <returns>a new array with its elements sorted by the comparator function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Sort``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a copy of the list, sorted according to the comparator function,which should accept two values at a time and return a negative number if thefirst value is smaller, a positive number if it's larger, and zero if theyare equal. Please note that this is a **copy** of the list. It does notmodify the original.
            <para />
            sig: (a,a -> Number) -> [a] -> [a]
            </summary>
            <param name="comparator">A sorting function :: a -<![CDATA[>]]> b -<![CDATA[>]]> Int</param>
            <param name="list">The list to sort</param>
            <returns>a new array with its elements sorted by the comparator function.</returns>
        </member>
        <member name="M:Ramda.NET.R.Sort(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a copy of the list, sorted according to the comparator function,which should accept two values at a time and return a negative number if thefirst value is smaller, a positive number if it's larger, and zero if theyare equal. Please note that this is a **copy** of the list. It does notmodify the original.
            <para />
            sig: (a,a -> Number) -> [a] -> [a]
            </summary>
            <param name="comparator">A sorting function :: a -<![CDATA[>]]> b -<![CDATA[>]]> Int</param>
            <param name="list">The list to sort</param>
            <returns>a new array with its elements sorted by the comparator function.</returns>
        </member>
        <member name="M:Ramda.NET.R.SortBy``1(System.Func{``0,System.Int32},System.Collections.Generic.IList{``0})">
            <summary>
            Sorts the list according to the supplied function.
            <para />
            sig: Ord b => (a -> b) -> [a] -> [a]
            </summary>
            <param name="fn">first</param>
            <param name="list">The list to sort.</param>
            <returns>A new list sorted by the keys generated by `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.SortBy``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Sorts the list according to the supplied function.
            <para />
            sig: Ord b => (a -> b) -> [a] -> [a]
            </summary>
            <param name="fn">first</param>
            <param name="list">The list to sort.</param>
            <returns>A new list sorted by the keys generated by `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.SortBy``1(System.Func{``0,System.Int32},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Sorts the list according to the supplied function.
            <para />
            sig: Ord b => (a -> b) -> [a] -> [a]
            </summary>
            <param name="fn">first</param>
            <param name="list">The list to sort.</param>
            <returns>A new list sorted by the keys generated by `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.SortBy(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Sorts the list according to the supplied function.
            <para />
            sig: Ord b => (a -> b) -> [a] -> [a]
            </summary>
            <param name="fn">first</param>
            <param name="list">The list to sort.</param>
            <returns>A new list sorted by the keys generated by `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.SortBy``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Sorts the list according to the supplied function.
            <para />
            sig: Ord b => (a -> b) -> [a] -> [a]
            </summary>
            <param name="fn">first</param>
            <param name="list">The list to sort.</param>
            <returns>A new list sorted by the keys generated by `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.SortBy(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Sorts the list according to the supplied function.
            <para />
            sig: Ord b => (a -> b) -> [a] -> [a]
            </summary>
            <param name="fn">first</param>
            <param name="list">The list to sort.</param>
            <returns>A new list sorted by the keys generated by `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitEvery``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Splits a collection into slices of the specified length.
            <para />
            sig: Number -> [a] -> [[a]]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitEvery``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Splits a collection into slices of the specified length.
            <para />
            sig: Number -> [a] -> [[a]]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitEvery(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Splits a collection into slices of the specified length.
            <para />
            sig: Number -> [a] -> [[a]]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitEvery(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Splits a collection into slices of the specified length.
            <para />
            sig: Number -> [a] -> [[a]]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitWhen``1(System.Func{``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Takes a list and a predicate and returns a pair of lists with the following properties: - the result of concatenating the two output lists is equivalent to the input list; - none of the elements of the first output list satisfies the predicate; and - if the second output list is non-empty, its first element satisfies the predicate.
            <para />
            sig: (a -> Boolean) -> [a] -> [[a], [a]]
            </summary>
            <param name="pred">The predicate that determines where the array is split.</param>
            <param name="list">The array to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitWhen``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Takes a list and a predicate and returns a pair of lists with the following properties: - the result of concatenating the two output lists is equivalent to the input list; - none of the elements of the first output list satisfies the predicate; and - if the second output list is non-empty, its first element satisfies the predicate.
            <para />
            sig: (a -> Boolean) -> [a] -> [[a], [a]]
            </summary>
            <param name="pred">The predicate that determines where the array is split.</param>
            <param name="list">The array to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitWhen``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a list and a predicate and returns a pair of lists with the following properties: - the result of concatenating the two output lists is equivalent to the input list; - none of the elements of the first output list satisfies the predicate; and - if the second output list is non-empty, its first element satisfies the predicate.
            <para />
            sig: (a -> Boolean) -> [a] -> [[a], [a]]
            </summary>
            <param name="pred">The predicate that determines where the array is split.</param>
            <param name="list">The array to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitWhen(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a list and a predicate and returns a pair of lists with the following properties: - the result of concatenating the two output lists is equivalent to the input list; - none of the elements of the first output list satisfies the predicate; and - if the second output list is non-empty, its first element satisfies the predicate.
            <para />
            sig: (a -> Boolean) -> [a] -> [[a], [a]]
            </summary>
            <param name="pred">The predicate that determines where the array is split.</param>
            <param name="list">The array to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitWhen``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Takes a list and a predicate and returns a pair of lists with the following properties: - the result of concatenating the two output lists is equivalent to the input list; - none of the elements of the first output list satisfies the predicate; and - if the second output list is non-empty, its first element satisfies the predicate.
            <para />
            sig: (a -> Boolean) -> [a] -> [[a], [a]]
            </summary>
            <param name="pred">The predicate that determines where the array is split.</param>
            <param name="list">The array to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.SplitWhen(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a list and a predicate and returns a pair of lists with the following properties: - the result of concatenating the two output lists is equivalent to the input list; - none of the elements of the first output list satisfies the predicate; and - if the second output list is non-empty, its first element satisfies the predicate.
            <para />
            sig: (a -> Boolean) -> [a] -> [[a], [a]]
            </summary>
            <param name="pred">The predicate that determines where the array is split.</param>
            <param name="list">The array to be split.</param>
            <returns>Array</returns>
        </member>
        <member name="M:Ramda.NET.R.Subtract(System.Double,System.Double)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Subtract(Ramda.NET.RamdaPlaceholder,System.Double)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Subtract(System.Double,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Subtract(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Subtract(System.Int32,System.Int32)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Subtract(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Subtract(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Subtracts its second argument from its first argument.
            <para />
            sig: Number -> Number -> Number
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The result of `a - b`.</returns>
            <see cref="M:Ramda.NET.R.Add(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:Ramda.NET.R.Sum(System.Collections.Generic.IList{System.Double})">
            <summary>
            Adds together all the elements of a list.
            <para />
            sig: [Number] -> Number
            </summary>
            <param name="list">An array of numbers</param>
            <returns>The sum of all the numbers in the list.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Sum(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Adds together all the elements of a list.
            <para />
            sig: [Number] -> Number
            </summary>
            <param name="list">An array of numbers</param>
            <returns>The sum of all the numbers in the list.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Sum(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Adds together all the elements of a list.
            <para />
            sig: [Number] -> Number
            </summary>
            <param name="list">An array of numbers</param>
            <returns>The sum of all the numbers in the list.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Tail``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns all but the first element of the given list or string (or objectwith a `tail` method).Dispatches to the `slice` method of the first argument, if present.
            <para />
            sig: [a] -> [a]
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Head(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Init(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Last(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Tail(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns all but the first element of the given list or string (or objectwith a `tail` method).Dispatches to the `slice` method of the first argument, if present.
            <para />
            sig: [a] -> [a]
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Head(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Init(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Last(Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Take``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the first `n` elements of the given list, string, ortransducer/transformer (or object with a `take` method).Dispatches to the `take` method of the second argument, if present.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Take``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the first `n` elements of the given list, string, ortransducer/transformer (or object with a `take` method).Dispatches to the `take` method of the second argument, if present.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Take(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the first `n` elements of the given list, string, ortransducer/transformer (or object with a `take` method).Dispatches to the `take` method of the second argument, if present.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Take(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the first `n` elements of the given list, string, ortransducer/transformer (or object with a `take` method).Dispatches to the `take` method of the second argument, if present.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">first</param>
            <param name="list">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Drop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.TakeLast``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing the last `n` elements of the given list.If `n <![CDATA[>]]> list.length`, returns a list of `list.length` elements.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">The number of elements to return.</param>
            <param name="xs">The collection to consider.</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.DropLast(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.TakeLast``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing the last `n` elements of the given list.If `n <![CDATA[>]]> list.length`, returns a list of `list.length` elements.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">The number of elements to return.</param>
            <param name="xs">The collection to consider.</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.DropLast(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.TakeLast(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing the last `n` elements of the given list.If `n <![CDATA[>]]> list.length`, returns a list of `list.length` elements.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">The number of elements to return.</param>
            <param name="xs">The collection to consider.</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.DropLast(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.TakeLast(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing the last `n` elements of the given list.If `n <![CDATA[>]]> list.length`, returns a list of `list.length` elements.
            <para />
            sig: Number -> [a] -> [a]
            </summary>
            <param name="n">The number of elements to return.</param>
            <param name="xs">The collection to consider.</param>
            <returns>Array</returns>
            <see cref="M:Ramda.NET.R.DropLast(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.TakeLastWhile``1(System.Func{``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing the last `n` elements of a given list, passingeach value to the supplied predicate function, and terminating when thepredicate function returns `false`. Excludes the element that caused thepredicate function to fail. The predicate function is passed one argument:*(value)*.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="fn">The function called per iteration.</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.DropLastWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.TakeLastWhile``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing the last `n` elements of a given list, passingeach value to the supplied predicate function, and terminating when thepredicate function returns `false`. Excludes the element that caused thepredicate function to fail. The predicate function is passed one argument:*(value)*.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="fn">The function called per iteration.</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.DropLastWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.TakeLastWhile``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing the last `n` elements of a given list, passingeach value to the supplied predicate function, and terminating when thepredicate function returns `false`. Excludes the element that caused thepredicate function to fail. The predicate function is passed one argument:*(value)*.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="fn">The function called per iteration.</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.DropLastWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.TakeLastWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing the last `n` elements of a given list, passingeach value to the supplied predicate function, and terminating when thepredicate function returns `false`. Excludes the element that caused thepredicate function to fail. The predicate function is passed one argument:*(value)*.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="fn">The function called per iteration.</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.DropLastWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.TakeWhile``1(System.Func{``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing the first `n` elements of a given list,passing each value to the supplied predicate function, and terminating whenthe predicate function returns `false`. Excludes the element that caused thepredicate function to fail. The predicate function is passed one argument:*(value)*.Dispatches to the `takeWhile` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="fn">The function called per iteration.</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.TakeWhile``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing the first `n` elements of a given list,passing each value to the supplied predicate function, and terminating whenthe predicate function returns `false`. Excludes the element that caused thepredicate function to fail. The predicate function is passed one argument:*(value)*.Dispatches to the `takeWhile` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="fn">The function called per iteration.</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.TakeWhile``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing the first `n` elements of a given list,passing each value to the supplied predicate function, and terminating whenthe predicate function returns `false`. Excludes the element that caused thepredicate function to fail. The predicate function is passed one argument:*(value)*.Dispatches to the `takeWhile` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="fn">The function called per iteration.</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.TakeWhile(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing the first `n` elements of a given list,passing each value to the supplied predicate function, and terminating whenthe predicate function returns `false`. Excludes the element that caused thepredicate function to fail. The predicate function is passed one argument:*(value)*.Dispatches to the `takeWhile` method of the second argument, if present.Acts as a transducer if a transformer is given in list position.
            <para />
            sig: (a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="fn">The function called per iteration.</param>
            <param name="list">The collection to iterate over.</param>
            <returns>A new array.</returns>
            <see cref="M:Ramda.NET.R.DropWhile(System.Object,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.AddIndex(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Tap``1(System.Action{``0},``0)">
            <summary>
            Runs the given function with the supplied object, then returns the object.
            <para />
            sig: (a -> *) -> a -> a
            </summary>
            <param name="fn">The function to call with `x`. The return value of `fn` will be thrown away.</param>
            <param name="x">second</param>
            <returns>`x`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Tap``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Runs the given function with the supplied object, then returns the object.
            <para />
            sig: (a -> *) -> a -> a
            </summary>
            <param name="fn">The function to call with `x`. The return value of `fn` will be thrown away.</param>
            <param name="x">second</param>
            <returns>`x`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Tap``1(System.Action{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Runs the given function with the supplied object, then returns the object.
            <para />
            sig: (a -> *) -> a -> a
            </summary>
            <param name="fn">The function to call with `x`. The return value of `fn` will be thrown away.</param>
            <param name="x">second</param>
            <returns>`x`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Tap(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Runs the given function with the supplied object, then returns the object.
            <para />
            sig: (a -> *) -> a -> a
            </summary>
            <param name="fn">The function to call with `x`. The return value of `fn` will be thrown away.</param>
            <param name="x">second</param>
            <returns>`x`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Tap``1(System.Object,``0)">
            <summary>
            Runs the given function with the supplied object, then returns the object.
            <para />
            sig: (a -> *) -> a -> a
            </summary>
            <param name="fn">The function to call with `x`. The return value of `fn` will be thrown away.</param>
            <param name="x">second</param>
            <returns>`x`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Tap(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Runs the given function with the supplied object, then returns the object.
            <para />
            sig: (a -> *) -> a -> a
            </summary>
            <param name="fn">The function to call with `x`. The return value of `fn` will be thrown away.</param>
            <param name="x">second</param>
            <returns>`x`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Times``1(System.Func{System.Int32,``0},System.Int32)">
            <summary>
            Calls an input function `n` times, returning an array containing the resultsof those function calls.`fn` is passed one argument: The current value of `n`, which begins at `0`and is gradually incremented to `n - 1`.
            <para />
            sig: (Number -> a) -> Number -> [a]
            </summary>
            <param name="fn">The function to invoke. Passed one argument, the current value of `n`.</param>
            <param name="n">A value between `0` and `n - 1`. Increments after each function call.</param>
            <returns>An array containing the return values of all calls to `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Times(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Calls an input function `n` times, returning an array containing the resultsof those function calls.`fn` is passed one argument: The current value of `n`, which begins at `0`and is gradually incremented to `n - 1`.
            <para />
            sig: (Number -> a) -> Number -> [a]
            </summary>
            <param name="fn">The function to invoke. Passed one argument, the current value of `n`.</param>
            <param name="n">A value between `0` and `n - 1`. Increments after each function call.</param>
            <returns>An array containing the return values of all calls to `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Times``1(System.Func{System.Int32,``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Calls an input function `n` times, returning an array containing the resultsof those function calls.`fn` is passed one argument: The current value of `n`, which begins at `0`and is gradually incremented to `n - 1`.
            <para />
            sig: (Number -> a) -> Number -> [a]
            </summary>
            <param name="fn">The function to invoke. Passed one argument, the current value of `n`.</param>
            <param name="n">A value between `0` and `n - 1`. Increments after each function call.</param>
            <returns>An array containing the return values of all calls to `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Times(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Calls an input function `n` times, returning an array containing the resultsof those function calls.`fn` is passed one argument: The current value of `n`, which begins at `0`and is gradually incremented to `n - 1`.
            <para />
            sig: (Number -> a) -> Number -> [a]
            </summary>
            <param name="fn">The function to invoke. Passed one argument, the current value of `n`.</param>
            <param name="n">A value between `0` and `n - 1`. Increments after each function call.</param>
            <returns>An array containing the return values of all calls to `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Times(System.Object,System.Int32)">
            <summary>
            Calls an input function `n` times, returning an array containing the resultsof those function calls.`fn` is passed one argument: The current value of `n`, which begins at `0`and is gradually incremented to `n - 1`.
            <para />
            sig: (Number -> a) -> Number -> [a]
            </summary>
            <param name="fn">The function to invoke. Passed one argument, the current value of `n`.</param>
            <param name="n">A value between `0` and `n - 1`. Increments after each function call.</param>
            <returns>An array containing the return values of all calls to `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Times(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Calls an input function `n` times, returning an array containing the resultsof those function calls.`fn` is passed one argument: The current value of `n`, which begins at `0`and is gradually incremented to `n - 1`.
            <para />
            sig: (Number -> a) -> Number -> [a]
            </summary>
            <param name="fn">The function to invoke. Passed one argument, the current value of `n`.</param>
            <param name="n">A value between `0` and `n - 1`. Increments after each function call.</param>
            <returns>An array containing the return values of all calls to `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ToPairs``1(``0)">
            <summary>
            Converts an object into an array of key, value arrays. Only the object'sown properties are used.Note that the order of the output array is not guaranteed to be consistentacross different JS platforms.
            <para />
            sig: {String: *} -> [[String,*]]
            </summary>
            <param name="obj">The object to extract from</param>
            <returns>An array of key, value arrays from the object's own properties.</returns>
            <see cref="M:Ramda.NET.R.FromPairs(System.Object[][])"/>
        </member>
        <member name="M:Ramda.NET.R.ToPairs(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Converts an object into an array of key, value arrays. Only the object'sown properties are used.Note that the order of the output array is not guaranteed to be consistentacross different JS platforms.
            <para />
            sig: {String: *} -> [[String,*]]
            </summary>
            <param name="obj">The object to extract from</param>
            <returns>An array of key, value arrays from the object's own properties.</returns>
            <see cref="M:Ramda.NET.R.FromPairs(System.Object[][])"/>
        </member>
        <member name="M:Ramda.NET.R.ToString``1(``0)">
            <summary>
            Returns the string representation of the given value. `eval`'ing the outputshould result in a value equivalent to the input value. Many of the built-in`toString` methods do not satisfy this requirement.If the given value is an `[object Object]` with a `toString` method otherthan `Object.prototype.toString`, this method is invoked with no argumentsto produce the return value. This means user-defined constructor functionscan provide a suitable `toString` method. For example:    function Point(x, y) {      this.x = x;      this.y = y;    }    Point.prototype.toString = function() {      return 'new Point(' + this.x + ', ' + this.y + ')';    };    R.toString(new Point(1, 2)); //=<![CDATA[>]]> 'new Point(1, 2)'
            <para />
            sig: * -> String
            </summary>
            <param name="val">first</param>
            <returns>String</returns>
        </member>
        <member name="M:Ramda.NET.R.ToString(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns the string representation of the given value. `eval`'ing the outputshould result in a value equivalent to the input value. Many of the built-in`toString` methods do not satisfy this requirement.If the given value is an `[object Object]` with a `toString` method otherthan `Object.prototype.toString`, this method is invoked with no argumentsto produce the return value. This means user-defined constructor functionscan provide a suitable `toString` method. For example:    function Point(x, y) {      this.x = x;      this.y = y;    }    Point.prototype.toString = function() {      return 'new Point(' + this.x + ', ' + this.y + ')';    };    R.toString(new Point(1, 2)); //=<![CDATA[>]]> 'new Point(1, 2)'
            <para />
            sig: * -> String
            </summary>
            <param name="val">first</param>
            <returns>String</returns>
        </member>
        <member name="M:Ramda.NET.R.Transduce``2(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},System.Func{``1,Ramda.NET.ITransformer},``1,System.Collections.Generic.IList{``0})">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``2(Ramda.NET.RamdaPlaceholder,System.Func{``1,Ramda.NET.ITransformer},``1,System.Collections.Generic.IList{``0})">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``2(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,``1,System.Collections.Generic.IList{``0})">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``2(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},System.Func{``1,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``1(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},System.Func{``0,Ramda.NET.ITransformer},``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``1(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},System.Func{``0,Ramda.NET.ITransformer},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``2(Ramda.NET.RamdaPlaceholder,System.Object,``1,System.Collections.Generic.IList{``0})">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``2(System.Object,Ramda.NET.RamdaPlaceholder,``1,System.Collections.Generic.IList{``0})">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``1(System.Object,System.Object,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``1(System.Object,System.Object,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce(System.Object,System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``2(System.Object,System.Func{``1,Ramda.NET.ITransformer},``1,System.Collections.Generic.IList{``0})">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``2(System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},System.Object,``1,System.Collections.Generic.IList{``0})">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce``2(System.Object,System.Object,``1,System.Collections.Generic.IList{``0})">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transduce(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Initializes a transducer using supplied iterator function. Returns a singleitem by iterating through the list, successively calling the transformediterator function and passing it an accumulator value and the current valuefrom the array, and then passing the result to the next call.The iterator function receives two values: *(acc, value)*. It will bewrapped as a transformer to initialize the transducer. A transformer can bepassed directly in place of an iterator function. In both cases, iterationmay be stopped early with the `R.reduced` function.A transducer is a function that accepts a transformer and returns atransformer and can be composed directly.A transformer is an an object that provides a 2-arity reducing iteratorfunction, step, 0-arity initial value function, init, and 1-arity resultextraction function, result. The step function is used as the iteratorfunction in reduce. The result function is used to convert the finalaccumulator into the return type and in most cases is R.identity. The initfunction can be used to provide an initial accumulator, but is ignored bytransduce.The iteration is performed with R.reduce after initializing the transducer.
            <para />
            sig: (c -> c) -> (a,b -> a) -> a -> [b] -> a
            </summary>
            <param name="xf">The transducer function. Receives a transformer and returns a transformer.</param>
            <param name="fn">The iterator function. Receives two values, the accumulator and the       current element from the array. Wrapped as transformer, if necessary, and used to       initialize the transducer</param>
            <param name="acc">The initial accumulator value.</param>
            <param name="list">The list to iterate over.</param>
            <returns>The final, accumulated value.</returns>
            <see cref="M:Ramda.NET.R.Reduce(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.R.IReducible)"/>
            <see cref="M:Ramda.NET.R.Reduced(Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.Into(Ramda.NET.RamdaPlaceholder,System.Func{Ramda.NET.ITransformer,Ramda.NET.ITransformer},Ramda.NET.R.IReducible)"/>
        </member>
        <member name="M:Ramda.NET.R.Transpose``1(``0[][])">
            <summary>
            Transposes the rows and columns of a 2D list.When passed a list of `n` lists of length `x`,returns a list of `x` lists of length `n`.
            <para />
            sig: [[a]] -> [[a]]
            </summary>
            <param name="list">A 2D list</param>
            <returns>A 2D list</returns>
        </member>
        <member name="M:Ramda.NET.R.Transpose(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Transposes the rows and columns of a 2D list.When passed a list of `n` lists of length `x`,returns a list of `x` lists of length `n`.
            <para />
            sig: [[a]] -> [[a]]
            </summary>
            <param name="list">A 2D list</param>
            <returns>A 2D list</returns>
        </member>
        <member name="M:Ramda.NET.R.Traverse``1(System.Delegate,System.Func{``0,``0},System.Collections.Generic.IList{``0})">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse``1(Ramda.NET.RamdaPlaceholder,System.Func{``0,``0},System.Collections.Generic.IList{``0})">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse``1(System.Delegate,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse``1(System.Delegate,System.Func{``0,``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse(System.Delegate,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse``1(Ramda.NET.RamdaPlaceholder,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse(System.Delegate,System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Traverse``1(System.Delegate,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
            <para />
            sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
            </summary>
            <param name="of">first</param>
            <param name="f">second</param>
            <param name="traversable">third</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Sequence(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Trim(System.String)">
            <summary>
            Removes (strips) whitespace from both ends of the string.
            <para />
            sig: String -> String
            </summary>
            <param name="str">The string to trim.</param>
            <returns>Trimmed version of `str`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Trim(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Removes (strips) whitespace from both ends of the string.
            <para />
            sig: String -> String
            </summary>
            <param name="str">The string to trim.</param>
            <returns>Trimmed version of `str`.</returns>
        </member>
        <member name="M:Ramda.NET.R.TryCatch(System.Delegate,System.Delegate)">
            <summary>
            `tryCatch` takes two functions, a `tryer` and a `catcher`. The returnedfunction evaluates the `tryer`; if it does not throw, it simply returns theresult. If the `tryer` *does* throw, the returned function evaluates the`catcher` function and returns its result. Note that for effectivecomposition with this function, both the `tryer` and `catcher` functionsmust return the same type of results.
            <para />
            sig: (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
            </summary>
            <param name="tryer">The function that may throw.</param>
            <param name="catcher">The function that will be evaluated if `tryer` throws.</param>
            <returns>A new function that will catch exceptions and send then to the catcher.</returns>
        </member>
        <member name="M:Ramda.NET.R.TryCatch(Ramda.NET.RamdaPlaceholder,System.Delegate)">
            <summary>
            `tryCatch` takes two functions, a `tryer` and a `catcher`. The returnedfunction evaluates the `tryer`; if it does not throw, it simply returns theresult. If the `tryer` *does* throw, the returned function evaluates the`catcher` function and returns its result. Note that for effectivecomposition with this function, both the `tryer` and `catcher` functionsmust return the same type of results.
            <para />
            sig: (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
            </summary>
            <param name="tryer">The function that may throw.</param>
            <param name="catcher">The function that will be evaluated if `tryer` throws.</param>
            <returns>A new function that will catch exceptions and send then to the catcher.</returns>
        </member>
        <member name="M:Ramda.NET.R.TryCatch(System.Delegate,Ramda.NET.RamdaPlaceholder)">
            <summary>
            `tryCatch` takes two functions, a `tryer` and a `catcher`. The returnedfunction evaluates the `tryer`; if it does not throw, it simply returns theresult. If the `tryer` *does* throw, the returned function evaluates the`catcher` function and returns its result. Note that for effectivecomposition with this function, both the `tryer` and `catcher` functionsmust return the same type of results.
            <para />
            sig: (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
            </summary>
            <param name="tryer">The function that may throw.</param>
            <param name="catcher">The function that will be evaluated if `tryer` throws.</param>
            <returns>A new function that will catch exceptions and send then to the catcher.</returns>
        </member>
        <member name="M:Ramda.NET.R.TryCatch(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            `tryCatch` takes two functions, a `tryer` and a `catcher`. The returnedfunction evaluates the `tryer`; if it does not throw, it simply returns theresult. If the `tryer` *does* throw, the returned function evaluates the`catcher` function and returns its result. Note that for effectivecomposition with this function, both the `tryer` and `catcher` functionsmust return the same type of results.
            <para />
            sig: (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
            </summary>
            <param name="tryer">The function that may throw.</param>
            <param name="catcher">The function that will be evaluated if `tryer` throws.</param>
            <returns>A new function that will catch exceptions and send then to the catcher.</returns>
        </member>
        <member name="M:Ramda.NET.R.TryCatch(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            `tryCatch` takes two functions, a `tryer` and a `catcher`. The returnedfunction evaluates the `tryer`; if it does not throw, it simply returns theresult. If the `tryer` *does* throw, the returned function evaluates the`catcher` function and returns its result. Note that for effectivecomposition with this function, both the `tryer` and `catcher` functionsmust return the same type of results.
            <para />
            sig: (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
            </summary>
            <param name="tryer">The function that may throw.</param>
            <param name="catcher">The function that will be evaluated if `tryer` throws.</param>
            <returns>A new function that will catch exceptions and send then to the catcher.</returns>
        </member>
        <member name="M:Ramda.NET.R.TryCatch(System.Object,System.Delegate)">
            <summary>
            `tryCatch` takes two functions, a `tryer` and a `catcher`. The returnedfunction evaluates the `tryer`; if it does not throw, it simply returns theresult. If the `tryer` *does* throw, the returned function evaluates the`catcher` function and returns its result. Note that for effectivecomposition with this function, both the `tryer` and `catcher` functionsmust return the same type of results.
            <para />
            sig: (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
            </summary>
            <param name="tryer">The function that may throw.</param>
            <param name="catcher">The function that will be evaluated if `tryer` throws.</param>
            <returns>A new function that will catch exceptions and send then to the catcher.</returns>
        </member>
        <member name="M:Ramda.NET.R.TryCatch(System.Delegate,System.Object)">
            <summary>
            `tryCatch` takes two functions, a `tryer` and a `catcher`. The returnedfunction evaluates the `tryer`; if it does not throw, it simply returns theresult. If the `tryer` *does* throw, the returned function evaluates the`catcher` function and returns its result. Note that for effectivecomposition with this function, both the `tryer` and `catcher` functionsmust return the same type of results.
            <para />
            sig: (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
            </summary>
            <param name="tryer">The function that may throw.</param>
            <param name="catcher">The function that will be evaluated if `tryer` throws.</param>
            <returns>A new function that will catch exceptions and send then to the catcher.</returns>
        </member>
        <member name="M:Ramda.NET.R.TryCatch(System.Object,System.Object)">
            <summary>
            `tryCatch` takes two functions, a `tryer` and a `catcher`. The returnedfunction evaluates the `tryer`; if it does not throw, it simply returns theresult. If the `tryer` *does* throw, the returned function evaluates the`catcher` function and returns its result. Note that for effectivecomposition with this function, both the `tryer` and `catcher` functionsmust return the same type of results.
            <para />
            sig: (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
            </summary>
            <param name="tryer">The function that may throw.</param>
            <param name="catcher">The function that will be evaluated if `tryer` throws.</param>
            <returns>A new function that will catch exceptions and send then to the catcher.</returns>
        </member>
        <member name="M:Ramda.NET.R.TryCatch(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            `tryCatch` takes two functions, a `tryer` and a `catcher`. The returnedfunction evaluates the `tryer`; if it does not throw, it simply returns theresult. If the `tryer` *does* throw, the returned function evaluates the`catcher` function and returns its result. Note that for effectivecomposition with this function, both the `tryer` and `catcher` functionsmust return the same type of results.
            <para />
            sig: (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
            </summary>
            <param name="tryer">The function that may throw.</param>
            <param name="catcher">The function that will be evaluated if `tryer` throws.</param>
            <returns>A new function that will catch exceptions and send then to the catcher.</returns>
        </member>
        <member name="M:Ramda.NET.R.Unapply(System.Delegate)">
            <summary>
            Takes a function `fn`, which takes a single array argument, and returns afunction which:  - takes any number of positional arguments;  - passes these arguments to `fn` as an array; and  - returns the result.In other words, R.unapply derives a variadic function from a function whichtakes an array. R.unapply is the inverse of R.apply.
            <para />
            sig: ([*...] -> a) -> (*... -> a)
            </summary>
            <param name="fn">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Apply(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unapply(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a function `fn`, which takes a single array argument, and returns afunction which:  - takes any number of positional arguments;  - passes these arguments to `fn` as an array; and  - returns the result.In other words, R.unapply derives a variadic function from a function whichtakes an array. R.unapply is the inverse of R.apply.
            <para />
            sig: ([*...] -> a) -> (*... -> a)
            </summary>
            <param name="fn">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Apply(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unapply(System.Object)">
            <summary>
            Takes a function `fn`, which takes a single array argument, and returns afunction which:  - takes any number of positional arguments;  - passes these arguments to `fn` as an array; and  - returns the result.In other words, R.unapply derives a variadic function from a function whichtakes an array. R.unapply is the inverse of R.apply.
            <para />
            sig: ([*...] -> a) -> (*... -> a)
            </summary>
            <param name="fn">first</param>
            <returns>Function</returns>
            <see cref="M:Ramda.NET.R.Apply(System.Delegate,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.UncurryN(System.Int32,System.Delegate)">
            <summary>
            Returns a function of arity `n` from a (manually) curried function.
            <para />
            sig: Number -> (a -> b) -> (a -> c)
            </summary>
            <param name="length">The arity for the returned function.</param>
            <param name="fn">The function to uncurry.</param>
            <returns>A new function.</returns>
            <see cref="M:Ramda.NET.R.Curry(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.UncurryN(Ramda.NET.RamdaPlaceholder,System.Delegate)">
            <summary>
            Returns a function of arity `n` from a (manually) curried function.
            <para />
            sig: Number -> (a -> b) -> (a -> c)
            </summary>
            <param name="length">The arity for the returned function.</param>
            <param name="fn">The function to uncurry.</param>
            <returns>A new function.</returns>
            <see cref="M:Ramda.NET.R.Curry(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.UncurryN(System.Int32,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a function of arity `n` from a (manually) curried function.
            <para />
            sig: Number -> (a -> b) -> (a -> c)
            </summary>
            <param name="length">The arity for the returned function.</param>
            <param name="fn">The function to uncurry.</param>
            <returns>A new function.</returns>
            <see cref="M:Ramda.NET.R.Curry(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.UncurryN(Ramda.NET.RamdaPlaceholder,System.Object)">
            <summary>
            Returns a function of arity `n` from a (manually) curried function.
            <para />
            sig: Number -> (a -> b) -> (a -> c)
            </summary>
            <param name="length">The arity for the returned function.</param>
            <param name="fn">The function to uncurry.</param>
            <returns>A new function.</returns>
            <see cref="M:Ramda.NET.R.Curry(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.UncurryN(System.Int32,System.Object)">
            <summary>
            Returns a function of arity `n` from a (manually) curried function.
            <para />
            sig: Number -> (a -> b) -> (a -> c)
            </summary>
            <param name="length">The arity for the returned function.</param>
            <param name="fn">The function to uncurry.</param>
            <returns>A new function.</returns>
            <see cref="M:Ramda.NET.R.Curry(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.UncurryN(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a function of arity `n` from a (manually) curried function.
            <para />
            sig: Number -> (a -> b) -> (a -> c)
            </summary>
            <param name="length">The arity for the returned function.</param>
            <param name="fn">The function to uncurry.</param>
            <returns>A new function.</returns>
            <see cref="M:Ramda.NET.R.Curry(System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Unfold(System.Func{System.Int32,System.Object},System.Int32)">
            <summary>
            Builds a list from a seed value. Accepts an iterator function, which returnseither false to stop iteration or an array of length 2 containing the valueto add to the resulting list and the seed to be used in the next call to theiterator function.The iterator function receives one argument: *(seed)*.
            <para />
            sig: (a -> [b]) -> * -> [b]
            </summary>
            <param name="fn">The iterator function. receives one argument, `seed`, and returns       either false to quit iteration or an array of length two to proceed. The element       at index 0 of this array will be added to the resulting array, and the element       at index 1 will be passed to the next call to `fn`.</param>
            <param name="seed">The seed value.</param>
            <returns>The final list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Unfold(Ramda.NET.RamdaPlaceholder,System.Int32)">
            <summary>
            Builds a list from a seed value. Accepts an iterator function, which returnseither false to stop iteration or an array of length 2 containing the valueto add to the resulting list and the seed to be used in the next call to theiterator function.The iterator function receives one argument: *(seed)*.
            <para />
            sig: (a -> [b]) -> * -> [b]
            </summary>
            <param name="fn">The iterator function. receives one argument, `seed`, and returns       either false to quit iteration or an array of length two to proceed. The element       at index 0 of this array will be added to the resulting array, and the element       at index 1 will be passed to the next call to `fn`.</param>
            <param name="seed">The seed value.</param>
            <returns>The final list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Unfold(System.Func{System.Int32,System.Object},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Builds a list from a seed value. Accepts an iterator function, which returnseither false to stop iteration or an array of length 2 containing the valueto add to the resulting list and the seed to be used in the next call to theiterator function.The iterator function receives one argument: *(seed)*.
            <para />
            sig: (a -> [b]) -> * -> [b]
            </summary>
            <param name="fn">The iterator function. receives one argument, `seed`, and returns       either false to quit iteration or an array of length two to proceed. The element       at index 0 of this array will be added to the resulting array, and the element       at index 1 will be passed to the next call to `fn`.</param>
            <param name="seed">The seed value.</param>
            <returns>The final list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Unfold(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Builds a list from a seed value. Accepts an iterator function, which returnseither false to stop iteration or an array of length 2 containing the valueto add to the resulting list and the seed to be used in the next call to theiterator function.The iterator function receives one argument: *(seed)*.
            <para />
            sig: (a -> [b]) -> * -> [b]
            </summary>
            <param name="fn">The iterator function. receives one argument, `seed`, and returns       either false to quit iteration or an array of length two to proceed. The element       at index 0 of this array will be added to the resulting array, and the element       at index 1 will be passed to the next call to `fn`.</param>
            <param name="seed">The seed value.</param>
            <returns>The final list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Unfold(System.Object,System.Int32)">
            <summary>
            Builds a list from a seed value. Accepts an iterator function, which returnseither false to stop iteration or an array of length 2 containing the valueto add to the resulting list and the seed to be used in the next call to theiterator function.The iterator function receives one argument: *(seed)*.
            <para />
            sig: (a -> [b]) -> * -> [b]
            </summary>
            <param name="fn">The iterator function. receives one argument, `seed`, and returns       either false to quit iteration or an array of length two to proceed. The element       at index 0 of this array will be added to the resulting array, and the element       at index 1 will be passed to the next call to `fn`.</param>
            <param name="seed">The seed value.</param>
            <returns>The final list.</returns>
        </member>
        <member name="M:Ramda.NET.R.Unfold(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Builds a list from a seed value. Accepts an iterator function, which returnseither false to stop iteration or an array of length 2 containing the valueto add to the resulting list and the seed to be used in the next call to theiterator function.The iterator function receives one argument: *(seed)*.
            <para />
            sig: (a -> [b]) -> * -> [b]
            </summary>
            <param name="fn">The iterator function. receives one argument, `seed`, and returns       either false to quit iteration or an array of length two to proceed. The element       at index 0 of this array will be added to the resulting array, and the element       at index 1 will be passed to the next call to `fn`.</param>
            <param name="seed">The seed value.</param>
            <returns>The final list.</returns>
        </member>
        <member name="M:Ramda.NET.R.UnionWith``2(System.Func{``0,``1,System.Boolean},System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list. Duplication is determined according to the value returned byapplying the supplied predicate to two list elements.
            <para />
            sig: (a -> a -> Boolean) -> [*] -> [*] -> [*]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The first and second lists concatenated, with duplicates removed.</returns>
            <see cref="M:Ramda.NET.R.Union(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.UnionWith``2(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list. Duplication is determined according to the value returned byapplying the supplied predicate to two list elements.
            <para />
            sig: (a -> a -> Boolean) -> [*] -> [*] -> [*]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The first and second lists concatenated, with duplicates removed.</returns>
            <see cref="M:Ramda.NET.R.Union(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.UnionWith``2(System.Func{``0,``1,System.Boolean},Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``1})">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list. Duplication is determined according to the value returned byapplying the supplied predicate to two list elements.
            <para />
            sig: (a -> a -> Boolean) -> [*] -> [*] -> [*]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The first and second lists concatenated, with duplicates removed.</returns>
            <see cref="M:Ramda.NET.R.Union(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.UnionWith``2(System.Func{``0,``1,System.Boolean},System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list. Duplication is determined according to the value returned byapplying the supplied predicate to two list elements.
            <para />
            sig: (a -> a -> Boolean) -> [*] -> [*] -> [*]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The first and second lists concatenated, with duplicates removed.</returns>
            <see cref="M:Ramda.NET.R.Union(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.UnionWith``2(System.Func{``0,``1,System.Boolean},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list. Duplication is determined according to the value returned byapplying the supplied predicate to two list elements.
            <para />
            sig: (a -> a -> Boolean) -> [*] -> [*] -> [*]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The first and second lists concatenated, with duplicates removed.</returns>
            <see cref="M:Ramda.NET.R.Union(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.UnionWith``1(System.Object,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list. Duplication is determined according to the value returned byapplying the supplied predicate to two list elements.
            <para />
            sig: (a -> a -> Boolean) -> [*] -> [*] -> [*]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The first and second lists concatenated, with duplicates removed.</returns>
            <see cref="M:Ramda.NET.R.Union(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.UnionWith``1(System.Object,System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list. Duplication is determined according to the value returned byapplying the supplied predicate to two list elements.
            <para />
            sig: (a -> a -> Boolean) -> [*] -> [*] -> [*]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The first and second lists concatenated, with duplicates removed.</returns>
            <see cref="M:Ramda.NET.R.Union(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.UnionWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list. Duplication is determined according to the value returned byapplying the supplied predicate to two list elements.
            <para />
            sig: (a -> a -> Boolean) -> [*] -> [*] -> [*]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The first and second lists concatenated, with duplicates removed.</returns>
            <see cref="M:Ramda.NET.R.Union(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.UnionWith``2(System.Object,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list. Duplication is determined according to the value returned byapplying the supplied predicate to two list elements.
            <para />
            sig: (a -> a -> Boolean) -> [*] -> [*] -> [*]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The first and second lists concatenated, with duplicates removed.</returns>
            <see cref="M:Ramda.NET.R.Union(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.UnionWith(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Combines two lists into a set (i.e. no duplicates) composed of the elementsof each list. Duplication is determined according to the value returned byapplying the supplied predicate to two list elements.
            <para />
            sig: (a -> a -> Boolean) -> [*] -> [*] -> [*]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The first and second lists concatenated, with duplicates removed.</returns>
            <see cref="M:Ramda.NET.R.Union(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.UniqWith``1(System.Func{``0,``0,System.Boolean},System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing only one copy of each element in the originallist, based upon the value returned by applying the supplied predicate totwo list elements. Prefers the first item if two items compare equal basedon the predicate.
            <para />
            sig: (a, a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of unique items.</returns>
        </member>
        <member name="M:Ramda.NET.R.UniqWith``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing only one copy of each element in the originallist, based upon the value returned by applying the supplied predicate totwo list elements. Prefers the first item if two items compare equal basedon the predicate.
            <para />
            sig: (a, a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of unique items.</returns>
        </member>
        <member name="M:Ramda.NET.R.UniqWith``1(System.Func{``0,``0,System.Boolean},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing only one copy of each element in the originallist, based upon the value returned by applying the supplied predicate totwo list elements. Prefers the first item if two items compare equal basedon the predicate.
            <para />
            sig: (a, a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of unique items.</returns>
        </member>
        <member name="M:Ramda.NET.R.UniqWith(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing only one copy of each element in the originallist, based upon the value returned by applying the supplied predicate totwo list elements. Prefers the first item if two items compare equal basedon the predicate.
            <para />
            sig: (a, a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of unique items.</returns>
        </member>
        <member name="M:Ramda.NET.R.UniqWith``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new list containing only one copy of each element in the originallist, based upon the value returned by applying the supplied predicate totwo list elements. Prefers the first item if two items compare equal basedon the predicate.
            <para />
            sig: (a, a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of unique items.</returns>
        </member>
        <member name="M:Ramda.NET.R.UniqWith(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new list containing only one copy of each element in the originallist, based upon the value returned by applying the supplied predicate totwo list elements. Prefers the first item if two items compare equal basedon the predicate.
            <para />
            sig: (a, a -> Boolean) -> [a] -> [a]
            </summary>
            <param name="pred">A predicate used to test whether two items are equal.</param>
            <param name="list">The array to consider.</param>
            <returns>The list of unique items.</returns>
        </member>
        <member name="M:Ramda.NET.R.Unless``2(System.Func{``0,System.Boolean},System.Func{``0,``1},``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is not satisfied, the function will return the result ofcalling the `whenFalseFn` function with the same argument. If the predicateis satisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenFalseFn">A function to invoke when the `pred` evaluates         to a falsy value.</param>
            <param name="x">An object to test with the `pred` function and         pass to `whenFalseFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenFalseFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unless``2(Ramda.NET.RamdaPlaceholder,System.Func{``0,``1},``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is not satisfied, the function will return the result ofcalling the `whenFalseFn` function with the same argument. If the predicateis satisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenFalseFn">A function to invoke when the `pred` evaluates         to a falsy value.</param>
            <param name="x">An object to test with the `pred` function and         pass to `whenFalseFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenFalseFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unless``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is not satisfied, the function will return the result ofcalling the `whenFalseFn` function with the same argument. If the predicateis satisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenFalseFn">A function to invoke when the `pred` evaluates         to a falsy value.</param>
            <param name="x">An object to test with the `pred` function and         pass to `whenFalseFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenFalseFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unless``2(System.Func{``0,System.Boolean},System.Func{``0,``1},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is not satisfied, the function will return the result ofcalling the `whenFalseFn` function with the same argument. If the predicateis satisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenFalseFn">A function to invoke when the `pred` evaluates         to a falsy value.</param>
            <param name="x">An object to test with the `pred` function and         pass to `whenFalseFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenFalseFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unless``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is not satisfied, the function will return the result ofcalling the `whenFalseFn` function with the same argument. If the predicateis satisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenFalseFn">A function to invoke when the `pred` evaluates         to a falsy value.</param>
            <param name="x">An object to test with the `pred` function and         pass to `whenFalseFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenFalseFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unless``1(Ramda.NET.RamdaPlaceholder,System.Object,``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is not satisfied, the function will return the result ofcalling the `whenFalseFn` function with the same argument. If the predicateis satisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenFalseFn">A function to invoke when the `pred` evaluates         to a falsy value.</param>
            <param name="x">An object to test with the `pred` function and         pass to `whenFalseFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenFalseFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unless``1(System.Object,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is not satisfied, the function will return the result ofcalling the `whenFalseFn` function with the same argument. If the predicateis satisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenFalseFn">A function to invoke when the `pred` evaluates         to a falsy value.</param>
            <param name="x">An object to test with the `pred` function and         pass to `whenFalseFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenFalseFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is not satisfied, the function will return the result ofcalling the `whenFalseFn` function with the same argument. If the predicateis satisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenFalseFn">A function to invoke when the `pred` evaluates         to a falsy value.</param>
            <param name="x">An object to test with the `pred` function and         pass to `whenFalseFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenFalseFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unless(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is not satisfied, the function will return the result ofcalling the `whenFalseFn` function with the same argument. If the predicateis satisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenFalseFn">A function to invoke when the `pred` evaluates         to a falsy value.</param>
            <param name="x">An object to test with the `pred` function and         pass to `whenFalseFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenFalseFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unless``2(System.Object,System.Func{``0,``1},``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is not satisfied, the function will return the result ofcalling the `whenFalseFn` function with the same argument. If the predicateis satisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenFalseFn">A function to invoke when the `pred` evaluates         to a falsy value.</param>
            <param name="x">An object to test with the `pred` function and         pass to `whenFalseFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenFalseFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unless``1(System.Func{``0,System.Boolean},System.Object,``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is not satisfied, the function will return the result ofcalling the `whenFalseFn` function with the same argument. If the predicateis satisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenFalseFn">A function to invoke when the `pred` evaluates         to a falsy value.</param>
            <param name="x">An object to test with the `pred` function and         pass to `whenFalseFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenFalseFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unless``1(System.Object,System.Object,``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is not satisfied, the function will return the result ofcalling the `whenFalseFn` function with the same argument. If the predicateis satisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenFalseFn">A function to invoke when the `pred` evaluates         to a falsy value.</param>
            <param name="x">An object to test with the `pred` function and         pass to `whenFalseFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenFalseFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unless(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is not satisfied, the function will return the result ofcalling the `whenFalseFn` function with the same argument. If the predicateis satisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenFalseFn">A function to invoke when the `pred` evaluates         to a falsy value.</param>
            <param name="x">An object to test with the `pred` function and         pass to `whenFalseFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenFalseFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Unnest``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shorthand for `R.chain(R.identity)`, which removes one level of nesting fromany [Chain](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain c => c (c a) -> c a
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Flatten(System.Collections.IDictionary)"/>
            <see cref="M:Ramda.NET.R.Chain(System.Delegate,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Unnest(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Shorthand for `R.chain(R.identity)`, which removes one level of nesting fromany [Chain](https://github.com/fantasyland/fantasy-land#chain).
            <para />
            sig: Chain c => c (c a) -> c a
            </summary>
            <param name="list">first</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Flatten(System.Collections.IDictionary)"/>
            <see cref="M:Ramda.NET.R.Chain(System.Delegate,System.Delegate)"/>
        </member>
        <member name="M:Ramda.NET.R.Until``2(System.Func{``0,System.Boolean},System.Func{``0,``1},``0)">
            <summary>
            Takes a predicate, a transformation function, and an initial value,and returns a value of the same type as the initial value.It does so by applying the transformation until the predicate is satisfied,at which point it returns the satisfactory value.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="fn">The iterator function</param>
            <param name="init">Initial value</param>
            <returns>Final value that satisfies predicate</returns>
        </member>
        <member name="M:Ramda.NET.R.Until``2(Ramda.NET.RamdaPlaceholder,System.Func{``0,``1},``0)">
            <summary>
            Takes a predicate, a transformation function, and an initial value,and returns a value of the same type as the initial value.It does so by applying the transformation until the predicate is satisfied,at which point it returns the satisfactory value.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="fn">The iterator function</param>
            <param name="init">Initial value</param>
            <returns>Final value that satisfies predicate</returns>
        </member>
        <member name="M:Ramda.NET.R.Until``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Takes a predicate, a transformation function, and an initial value,and returns a value of the same type as the initial value.It does so by applying the transformation until the predicate is satisfied,at which point it returns the satisfactory value.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="fn">The iterator function</param>
            <param name="init">Initial value</param>
            <returns>Final value that satisfies predicate</returns>
        </member>
        <member name="M:Ramda.NET.R.Until``2(System.Func{``0,System.Boolean},System.Func{``0,``1},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a predicate, a transformation function, and an initial value,and returns a value of the same type as the initial value.It does so by applying the transformation until the predicate is satisfied,at which point it returns the satisfactory value.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="fn">The iterator function</param>
            <param name="init">Initial value</param>
            <returns>Final value that satisfies predicate</returns>
        </member>
        <member name="M:Ramda.NET.R.Until``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a predicate, a transformation function, and an initial value,and returns a value of the same type as the initial value.It does so by applying the transformation until the predicate is satisfied,at which point it returns the satisfactory value.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="fn">The iterator function</param>
            <param name="init">Initial value</param>
            <returns>Final value that satisfies predicate</returns>
        </member>
        <member name="M:Ramda.NET.R.Until``1(Ramda.NET.RamdaPlaceholder,System.Object,``0)">
            <summary>
            Takes a predicate, a transformation function, and an initial value,and returns a value of the same type as the initial value.It does so by applying the transformation until the predicate is satisfied,at which point it returns the satisfactory value.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="fn">The iterator function</param>
            <param name="init">Initial value</param>
            <returns>Final value that satisfies predicate</returns>
        </member>
        <member name="M:Ramda.NET.R.Until``1(System.Object,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Takes a predicate, a transformation function, and an initial value,and returns a value of the same type as the initial value.It does so by applying the transformation until the predicate is satisfied,at which point it returns the satisfactory value.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="fn">The iterator function</param>
            <param name="init">Initial value</param>
            <returns>Final value that satisfies predicate</returns>
        </member>
        <member name="M:Ramda.NET.R.Until(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a predicate, a transformation function, and an initial value,and returns a value of the same type as the initial value.It does so by applying the transformation until the predicate is satisfied,at which point it returns the satisfactory value.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="fn">The iterator function</param>
            <param name="init">Initial value</param>
            <returns>Final value that satisfies predicate</returns>
        </member>
        <member name="M:Ramda.NET.R.Until(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a predicate, a transformation function, and an initial value,and returns a value of the same type as the initial value.It does so by applying the transformation until the predicate is satisfied,at which point it returns the satisfactory value.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="fn">The iterator function</param>
            <param name="init">Initial value</param>
            <returns>Final value that satisfies predicate</returns>
        </member>
        <member name="M:Ramda.NET.R.Until``2(System.Object,System.Func{``0,``1},``0)">
            <summary>
            Takes a predicate, a transformation function, and an initial value,and returns a value of the same type as the initial value.It does so by applying the transformation until the predicate is satisfied,at which point it returns the satisfactory value.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="fn">The iterator function</param>
            <param name="init">Initial value</param>
            <returns>Final value that satisfies predicate</returns>
        </member>
        <member name="M:Ramda.NET.R.Until``1(System.Func{``0,System.Boolean},System.Object,``0)">
            <summary>
            Takes a predicate, a transformation function, and an initial value,and returns a value of the same type as the initial value.It does so by applying the transformation until the predicate is satisfied,at which point it returns the satisfactory value.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="fn">The iterator function</param>
            <param name="init">Initial value</param>
            <returns>Final value that satisfies predicate</returns>
        </member>
        <member name="M:Ramda.NET.R.Until``1(System.Object,System.Object,``0)">
            <summary>
            Takes a predicate, a transformation function, and an initial value,and returns a value of the same type as the initial value.It does so by applying the transformation until the predicate is satisfied,at which point it returns the satisfactory value.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="fn">The iterator function</param>
            <param name="init">Initial value</param>
            <returns>Final value that satisfies predicate</returns>
        </member>
        <member name="M:Ramda.NET.R.Until(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a predicate, a transformation function, and an initial value,and returns a value of the same type as the initial value.It does so by applying the transformation until the predicate is satisfied,at which point it returns the satisfactory value.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="fn">The iterator function</param>
            <param name="init">Initial value</param>
            <returns>Final value that satisfies predicate</returns>
        </member>
        <member name="M:Ramda.NET.R.Update``1(System.Int32,``0,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new copy of the array with the element at the provided indexreplaced with the given value.
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="idx">The index to update.</param>
            <param name="x">The value to exist at the given index of the returned array.</param>
            <param name="list">The source array-like object to be updated.</param>
            <returns>A copy of `list` with the value at index `idx` replaced with `x`.</returns>
            <see cref="M:Ramda.NET.R.Adjust(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Update``1(Ramda.NET.RamdaPlaceholder,``0,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new copy of the array with the element at the provided indexreplaced with the given value.
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="idx">The index to update.</param>
            <param name="x">The value to exist at the given index of the returned array.</param>
            <param name="list">The source array-like object to be updated.</param>
            <returns>A copy of `list` with the value at index `idx` replaced with `x`.</returns>
            <see cref="M:Ramda.NET.R.Adjust(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Update``1(System.Int32,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Returns a new copy of the array with the element at the provided indexreplaced with the given value.
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="idx">The index to update.</param>
            <param name="x">The value to exist at the given index of the returned array.</param>
            <param name="list">The source array-like object to be updated.</param>
            <returns>A copy of `list` with the value at index `idx` replaced with `x`.</returns>
            <see cref="M:Ramda.NET.R.Adjust(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Update``1(System.Int32,``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new copy of the array with the element at the provided indexreplaced with the given value.
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="idx">The index to update.</param>
            <param name="x">The value to exist at the given index of the returned array.</param>
            <param name="list">The source array-like object to be updated.</param>
            <returns>A copy of `list` with the value at index `idx` replaced with `x`.</returns>
            <see cref="M:Ramda.NET.R.Adjust(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Update(System.Int32,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new copy of the array with the element at the provided indexreplaced with the given value.
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="idx">The index to update.</param>
            <param name="x">The value to exist at the given index of the returned array.</param>
            <param name="list">The source array-like object to be updated.</param>
            <returns>A copy of `list` with the value at index `idx` replaced with `x`.</returns>
            <see cref="M:Ramda.NET.R.Adjust(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Update(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a new copy of the array with the element at the provided indexreplaced with the given value.
            <para />
            sig: Number -> a -> [a] -> [a]
            </summary>
            <param name="idx">The index to update.</param>
            <param name="x">The value to exist at the given index of the returned array.</param>
            <param name="list">The source array-like object to be updated.</param>
            <returns>A copy of `list` with the value at index `idx` replaced with `x`.</returns>
            <see cref="M:Ramda.NET.R.Adjust(System.Object,System.Int32,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.UseWith``1(System.Delegate,System.Collections.Generic.IList{``0})">
            <summary>
            Accepts a function `fn` and a list of transformer functions and returns anew curried function. When the new function is invoked, it calls thefunction `fn` with parameters consisting of the result of calling eachsupplied handler on successive arguments to the new function.If more arguments are passed to the returned function than transformerfunctions, those arguments are passed directly to `fn` as additionalparameters. If you expect additional arguments that don't need to betransformed, although you can ignore them, it's best to pass an identityfunction so that the new function reports the correct arity.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="fn">The function to wrap.</param>
            <param name="transformers">A list of transformer functions</param>
            <returns>The wrapped function.</returns>
            <see cref="M:Ramda.NET.R.Converge(System.Delegate,System.Collections.Generic.IList{System.Delegate})"/>
        </member>
        <member name="M:Ramda.NET.R.UseWith``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Accepts a function `fn` and a list of transformer functions and returns anew curried function. When the new function is invoked, it calls thefunction `fn` with parameters consisting of the result of calling eachsupplied handler on successive arguments to the new function.If more arguments are passed to the returned function than transformerfunctions, those arguments are passed directly to `fn` as additionalparameters. If you expect additional arguments that don't need to betransformed, although you can ignore them, it's best to pass an identityfunction so that the new function reports the correct arity.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="fn">The function to wrap.</param>
            <param name="transformers">A list of transformer functions</param>
            <returns>The wrapped function.</returns>
            <see cref="M:Ramda.NET.R.Converge(System.Delegate,System.Collections.Generic.IList{System.Delegate})"/>
        </member>
        <member name="M:Ramda.NET.R.UseWith(System.Delegate,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Accepts a function `fn` and a list of transformer functions and returns anew curried function. When the new function is invoked, it calls thefunction `fn` with parameters consisting of the result of calling eachsupplied handler on successive arguments to the new function.If more arguments are passed to the returned function than transformerfunctions, those arguments are passed directly to `fn` as additionalparameters. If you expect additional arguments that don't need to betransformed, although you can ignore them, it's best to pass an identityfunction so that the new function reports the correct arity.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="fn">The function to wrap.</param>
            <param name="transformers">A list of transformer functions</param>
            <returns>The wrapped function.</returns>
            <see cref="M:Ramda.NET.R.Converge(System.Delegate,System.Collections.Generic.IList{System.Delegate})"/>
        </member>
        <member name="M:Ramda.NET.R.UseWith(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Accepts a function `fn` and a list of transformer functions and returns anew curried function. When the new function is invoked, it calls thefunction `fn` with parameters consisting of the result of calling eachsupplied handler on successive arguments to the new function.If more arguments are passed to the returned function than transformerfunctions, those arguments are passed directly to `fn` as additionalparameters. If you expect additional arguments that don't need to betransformed, although you can ignore them, it's best to pass an identityfunction so that the new function reports the correct arity.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="fn">The function to wrap.</param>
            <param name="transformers">A list of transformer functions</param>
            <returns>The wrapped function.</returns>
            <see cref="M:Ramda.NET.R.Converge(System.Delegate,System.Collections.Generic.IList{System.Delegate})"/>
        </member>
        <member name="M:Ramda.NET.R.UseWith``1(System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Accepts a function `fn` and a list of transformer functions and returns anew curried function. When the new function is invoked, it calls thefunction `fn` with parameters consisting of the result of calling eachsupplied handler on successive arguments to the new function.If more arguments are passed to the returned function than transformerfunctions, those arguments are passed directly to `fn` as additionalparameters. If you expect additional arguments that don't need to betransformed, although you can ignore them, it's best to pass an identityfunction so that the new function reports the correct arity.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="fn">The function to wrap.</param>
            <param name="transformers">A list of transformer functions</param>
            <returns>The wrapped function.</returns>
            <see cref="M:Ramda.NET.R.Converge(System.Delegate,System.Collections.Generic.IList{System.Delegate})"/>
        </member>
        <member name="M:Ramda.NET.R.UseWith(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Accepts a function `fn` and a list of transformer functions and returns anew curried function. When the new function is invoked, it calls thefunction `fn` with parameters consisting of the result of calling eachsupplied handler on successive arguments to the new function.If more arguments are passed to the returned function than transformerfunctions, those arguments are passed directly to `fn` as additionalparameters. If you expect additional arguments that don't need to betransformed, although you can ignore them, it's best to pass an identityfunction so that the new function reports the correct arity.
            <para />
            sig: (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
            </summary>
            <param name="fn">The function to wrap.</param>
            <param name="transformers">A list of transformer functions</param>
            <returns>The wrapped function.</returns>
            <see cref="M:Ramda.NET.R.Converge(System.Delegate,System.Collections.Generic.IList{System.Delegate})"/>
        </member>
        <member name="M:Ramda.NET.R.Values``1(``0)">
            <summary>
            Returns a list of all the enumerable own properties of the supplied object.Note that the order of the output array is not guaranteed across differentJS platforms.
            <para />
            sig: {k: v} -> [v]
            </summary>
            <param name="obj">The object to extract values from</param>
            <returns>An array of the values of the object's own properties.</returns>
        </member>
        <member name="M:Ramda.NET.R.Values(Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a list of all the enumerable own properties of the supplied object.Note that the order of the output array is not guaranteed across differentJS platforms.
            <para />
            sig: {k: v} -> [v]
            </summary>
            <param name="obj">The object to extract values from</param>
            <returns>An array of the values of the object's own properties.</returns>
        </member>
        <member name="M:Ramda.NET.R.View``1(System.Func{System.Func{``0,Ramda.NET.R.Functor},System.Func{``0,Ramda.NET.R.Functor}},``0)">
            <summary>
            Returns a "view" of the given data structure, determined by the given lens.The lens's focus determines which portion of the data structure is visible.
            <para />
            sig: Lens s a -> s -> a
            </summary>
            <param name="lens">first</param>
            <param name="x">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.View``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Returns a "view" of the given data structure, determined by the given lens.The lens's focus determines which portion of the data structure is visible.
            <para />
            sig: Lens s a -> s -> a
            </summary>
            <param name="lens">first</param>
            <param name="x">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.View``1(System.Func{System.Func{``0,Ramda.NET.R.Functor},System.Func{``0,Ramda.NET.R.Functor}},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a "view" of the given data structure, determined by the given lens.The lens's focus determines which portion of the data structure is visible.
            <para />
            sig: Lens s a -> s -> a
            </summary>
            <param name="lens">first</param>
            <param name="x">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.View(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a "view" of the given data structure, determined by the given lens.The lens's focus determines which portion of the data structure is visible.
            <para />
            sig: Lens s a -> s -> a
            </summary>
            <param name="lens">first</param>
            <param name="x">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.View``1(System.Object,``0)">
            <summary>
            Returns a "view" of the given data structure, determined by the given lens.The lens's focus determines which portion of the data structure is visible.
            <para />
            sig: Lens s a -> s -> a
            </summary>
            <param name="lens">first</param>
            <param name="x">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.View(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Returns a "view" of the given data structure, determined by the given lens.The lens's focus determines which portion of the data structure is visible.
            <para />
            sig: Lens s a -> s -> a
            </summary>
            <param name="lens">first</param>
            <param name="x">second</param>
            <returns>*</returns>
            <see cref="M:Ramda.NET.R.Prop(System.Int32,Ramda.NET.RamdaPlaceholder)"/>
            <see cref="M:Ramda.NET.R.LensIndex(System.Int32)"/>
            <see cref="M:Ramda.NET.R.LensProp(System.String)"/>
        </member>
        <member name="M:Ramda.NET.R.When``2(System.Func{``0,System.Boolean},System.Func{``0,``1},``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is satisfied, the function will return the result of callingthe `whenTrueFn` function with the same argument. If the predicate is notsatisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenTrueFn">A function to invoke when the `condition`        evaluates to a truthy value.</param>
            <param name="x">An object to test with the `pred` function and        pass to `whenTrueFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenTrueFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.When``2(Ramda.NET.RamdaPlaceholder,System.Func{``0,``1},``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is satisfied, the function will return the result of callingthe `whenTrueFn` function with the same argument. If the predicate is notsatisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenTrueFn">A function to invoke when the `condition`        evaluates to a truthy value.</param>
            <param name="x">An object to test with the `pred` function and        pass to `whenTrueFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenTrueFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.When``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is satisfied, the function will return the result of callingthe `whenTrueFn` function with the same argument. If the predicate is notsatisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenTrueFn">A function to invoke when the `condition`        evaluates to a truthy value.</param>
            <param name="x">An object to test with the `pred` function and        pass to `whenTrueFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenTrueFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.When``2(System.Func{``0,System.Boolean},System.Func{``0,``1},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is satisfied, the function will return the result of callingthe `whenTrueFn` function with the same argument. If the predicate is notsatisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenTrueFn">A function to invoke when the `condition`        evaluates to a truthy value.</param>
            <param name="x">An object to test with the `pred` function and        pass to `whenTrueFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenTrueFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.When``1(System.Func{``0,System.Boolean},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is satisfied, the function will return the result of callingthe `whenTrueFn` function with the same argument. If the predicate is notsatisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenTrueFn">A function to invoke when the `condition`        evaluates to a truthy value.</param>
            <param name="x">An object to test with the `pred` function and        pass to `whenTrueFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenTrueFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.When``1(Ramda.NET.RamdaPlaceholder,System.Object,``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is satisfied, the function will return the result of callingthe `whenTrueFn` function with the same argument. If the predicate is notsatisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenTrueFn">A function to invoke when the `condition`        evaluates to a truthy value.</param>
            <param name="x">An object to test with the `pred` function and        pass to `whenTrueFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenTrueFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.When``1(System.Object,Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is satisfied, the function will return the result of callingthe `whenTrueFn` function with the same argument. If the predicate is notsatisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenTrueFn">A function to invoke when the `condition`        evaluates to a truthy value.</param>
            <param name="x">An object to test with the `pred` function and        pass to `whenTrueFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenTrueFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.When(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is satisfied, the function will return the result of callingthe `whenTrueFn` function with the same argument. If the predicate is notsatisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenTrueFn">A function to invoke when the `condition`        evaluates to a truthy value.</param>
            <param name="x">An object to test with the `pred` function and        pass to `whenTrueFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenTrueFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.When(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is satisfied, the function will return the result of callingthe `whenTrueFn` function with the same argument. If the predicate is notsatisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenTrueFn">A function to invoke when the `condition`        evaluates to a truthy value.</param>
            <param name="x">An object to test with the `pred` function and        pass to `whenTrueFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenTrueFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.When``2(System.Object,System.Func{``0,``1},``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is satisfied, the function will return the result of callingthe `whenTrueFn` function with the same argument. If the predicate is notsatisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenTrueFn">A function to invoke when the `condition`        evaluates to a truthy value.</param>
            <param name="x">An object to test with the `pred` function and        pass to `whenTrueFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenTrueFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.When``1(System.Func{``0,System.Boolean},System.Object,``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is satisfied, the function will return the result of callingthe `whenTrueFn` function with the same argument. If the predicate is notsatisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenTrueFn">A function to invoke when the `condition`        evaluates to a truthy value.</param>
            <param name="x">An object to test with the `pred` function and        pass to `whenTrueFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenTrueFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.When``1(System.Object,System.Object,``0)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is satisfied, the function will return the result of callingthe `whenTrueFn` function with the same argument. If the predicate is notsatisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenTrueFn">A function to invoke when the `condition`        evaluates to a truthy value.</param>
            <param name="x">An object to test with the `pred` function and        pass to `whenTrueFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenTrueFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.When(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Tests the final argument by passing it to the given predicate function. Ifthe predicate is satisfied, the function will return the result of callingthe `whenTrueFn` function with the same argument. If the predicate is notsatisfied, the argument is returned as is.
            <para />
            sig: (a -> Boolean) -> (a -> a) -> a -> a
            </summary>
            <param name="pred">A predicate function</param>
            <param name="whenTrueFn">A function to invoke when the `condition`        evaluates to a truthy value.</param>
            <param name="x">An object to test with the `pred` function and        pass to `whenTrueFn` if necessary.</param>
            <returns>Either `x` or the result of applying `x` to `whenTrueFn`.</returns>
            <see cref="M:Ramda.NET.R.IfElse(System.Delegate,System.Delegate,System.Delegate)"/>
            <see cref="M:Ramda.NET.R.Unless(System.Object,System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Where``1(System.Object,``0)">
            <summary>
            Takes a spec object and a test object; returns true if the test satisfiesthe spec. Each of the spec's own properties must be a predicate function.Each predicate is applied to the value of the corresponding property of thetest object. `where` returns true if all the predicates return true, falseotherwise.`where` is well suited to declaratively expressing constraints for otherfunctions such as `filter` and `find`.
            <para />
            sig: {String: (* -> Boolean)} -> {String: *} -> Boolean
            </summary>
            <param name="spec">first</param>
            <param name="testObj">second</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Where``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Takes a spec object and a test object; returns true if the test satisfiesthe spec. Each of the spec's own properties must be a predicate function.Each predicate is applied to the value of the corresponding property of thetest object. `where` returns true if all the predicates return true, falseotherwise.`where` is well suited to declaratively expressing constraints for otherfunctions such as `filter` and `find`.
            <para />
            sig: {String: (* -> Boolean)} -> {String: *} -> Boolean
            </summary>
            <param name="spec">first</param>
            <param name="testObj">second</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Where(System.Object,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a spec object and a test object; returns true if the test satisfiesthe spec. Each of the spec's own properties must be a predicate function.Each predicate is applied to the value of the corresponding property of thetest object. `where` returns true if all the predicates return true, falseotherwise.`where` is well suited to declaratively expressing constraints for otherfunctions such as `filter` and `find`.
            <para />
            sig: {String: (* -> Boolean)} -> {String: *} -> Boolean
            </summary>
            <param name="spec">first</param>
            <param name="testObj">second</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.Where(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a spec object and a test object; returns true if the test satisfiesthe spec. Each of the spec's own properties must be a predicate function.Each predicate is applied to the value of the corresponding property of thetest object. `where` returns true if all the predicates return true, falseotherwise.`where` is well suited to declaratively expressing constraints for otherfunctions such as `filter` and `find`.
            <para />
            sig: {String: (* -> Boolean)} -> {String: *} -> Boolean
            </summary>
            <param name="spec">first</param>
            <param name="testObj">second</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Ramda.NET.R.WhereEq``2(``0,``1)">
            <summary>
            Takes a spec object and a test object; returns true if the test satisfiesthe spec, false otherwise. An object satisfies the spec if, for each of thespec's own properties, accessing that property of the object gives the samevalue (in `R.equals` terms) as accessing that property of the spec.`whereEq` is a specialization of [`where`](#where).
            <para />
            sig: {String: *} -> {String: *} -> Boolean
            </summary>
            <param name="spec">first</param>
            <param name="testObj">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Where(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.WhereEq``1(Ramda.NET.RamdaPlaceholder,``0)">
            <summary>
            Takes a spec object and a test object; returns true if the test satisfiesthe spec, false otherwise. An object satisfies the spec if, for each of thespec's own properties, accessing that property of the object gives the samevalue (in `R.equals` terms) as accessing that property of the spec.`whereEq` is a specialization of [`where`](#where).
            <para />
            sig: {String: *} -> {String: *} -> Boolean
            </summary>
            <param name="spec">first</param>
            <param name="testObj">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Where(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.WhereEq``1(``0,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a spec object and a test object; returns true if the test satisfiesthe spec, false otherwise. An object satisfies the spec if, for each of thespec's own properties, accessing that property of the object gives the samevalue (in `R.equals` terms) as accessing that property of the spec.`whereEq` is a specialization of [`where`](#where).
            <para />
            sig: {String: *} -> {String: *} -> Boolean
            </summary>
            <param name="spec">first</param>
            <param name="testObj">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Where(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.WhereEq(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Takes a spec object and a test object; returns true if the test satisfiesthe spec, false otherwise. An object satisfies the spec if, for each of thespec's own properties, accessing that property of the object gives the samevalue (in `R.equals` terms) as accessing that property of the spec.`whereEq` is a specialization of [`where`](#where).
            <para />
            sig: {String: *} -> {String: *} -> Boolean
            </summary>
            <param name="spec">first</param>
            <param name="testObj">second</param>
            <returns>Boolean</returns>
            <see cref="M:Ramda.NET.R.Where(System.Object,Ramda.NET.RamdaPlaceholder)"/>
        </member>
        <member name="M:Ramda.NET.R.Zip``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Creates a new list out of the two supplied by pairing up equally-positioneditems from both lists. The returned list is truncated to the length of theshorter of the two input lists.Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
            <para />
            sig: [a] -> [b] -> [[a,b]]
            </summary>
            <param name="list1">The first array to consider.</param>
            <param name="list2">The second array to consider.</param>
            <returns>The list made by pairing up same-indexed elements of `list1` and `list2`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Zip``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new list out of the two supplied by pairing up equally-positioneditems from both lists. The returned list is truncated to the length of theshorter of the two input lists.Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
            <para />
            sig: [a] -> [b] -> [[a,b]]
            </summary>
            <param name="list1">The first array to consider.</param>
            <param name="list2">The second array to consider.</param>
            <returns>The list made by pairing up same-indexed elements of `list1` and `list2`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Zip``1(System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new list out of the two supplied by pairing up equally-positioneditems from both lists. The returned list is truncated to the length of theshorter of the two input lists.Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
            <para />
            sig: [a] -> [b] -> [[a,b]]
            </summary>
            <param name="list1">The first array to consider.</param>
            <param name="list2">The second array to consider.</param>
            <returns>The list made by pairing up same-indexed elements of `list1` and `list2`.</returns>
        </member>
        <member name="M:Ramda.NET.R.Zip(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new list out of the two supplied by pairing up equally-positioneditems from both lists. The returned list is truncated to the length of theshorter of the two input lists.Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
            <para />
            sig: [a] -> [b] -> [[a,b]]
            </summary>
            <param name="list1">The first array to consider.</param>
            <param name="list2">The second array to consider.</param>
            <returns>The list made by pairing up same-indexed elements of `list1` and `list2`.</returns>
        </member>
        <member name="M:Ramda.NET.R.XProd``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Creates a new list out of the two supplied by creating each possible pairfrom the lists.
            <para />
            sig: [a] -> [b] -> [[a,b]]
            </summary>
            <param name="as">The first list.</param>
            <param name="bs">The second list.</param>
            <returns>The list made by combining each possible pair from `as` and `bs` into pairs (`[a, b]`).</returns>
        </member>
        <member name="M:Ramda.NET.R.XProd``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new list out of the two supplied by creating each possible pairfrom the lists.
            <para />
            sig: [a] -> [b] -> [[a,b]]
            </summary>
            <param name="as">The first list.</param>
            <param name="bs">The second list.</param>
            <returns>The list made by combining each possible pair from `as` and `bs` into pairs (`[a, b]`).</returns>
        </member>
        <member name="M:Ramda.NET.R.XProd``1(System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new list out of the two supplied by creating each possible pairfrom the lists.
            <para />
            sig: [a] -> [b] -> [[a,b]]
            </summary>
            <param name="as">The first list.</param>
            <param name="bs">The second list.</param>
            <returns>The list made by combining each possible pair from `as` and `bs` into pairs (`[a, b]`).</returns>
        </member>
        <member name="M:Ramda.NET.R.XProd(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new list out of the two supplied by creating each possible pairfrom the lists.
            <para />
            sig: [a] -> [b] -> [[a,b]]
            </summary>
            <param name="as">The first list.</param>
            <param name="bs">The second list.</param>
            <returns>The list made by combining each possible pair from `as` and `bs` into pairs (`[a, b]`).</returns>
        </member>
        <member name="M:Ramda.NET.R.ZipObj``1(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new object out of a list of keys and a list of values.Key/value pairing is truncated to the length of the shorter of the two lists.Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.
            <para />
            sig: [String] -> [*] -> {String: *}
            </summary>
            <param name="keys">The array that will be properties on the output object.</param>
            <param name="values">The list of values on the output object.</param>
            <returns>The object made by pairing up same-indexed elements of `keys` and `values`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ZipObj``1(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new object out of a list of keys and a list of values.Key/value pairing is truncated to the length of the shorter of the two lists.Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.
            <para />
            sig: [String] -> [*] -> {String: *}
            </summary>
            <param name="keys">The array that will be properties on the output object.</param>
            <param name="values">The list of values on the output object.</param>
            <returns>The object made by pairing up same-indexed elements of `keys` and `values`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ZipObj(System.Collections.Generic.IList{System.String},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object out of a list of keys and a list of values.Key/value pairing is truncated to the length of the shorter of the two lists.Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.
            <para />
            sig: [String] -> [*] -> {String: *}
            </summary>
            <param name="keys">The array that will be properties on the output object.</param>
            <param name="values">The list of values on the output object.</param>
            <returns>The object made by pairing up same-indexed elements of `keys` and `values`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ZipObj(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new object out of a list of keys and a list of values.Key/value pairing is truncated to the length of the shorter of the two lists.Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.
            <para />
            sig: [String] -> [*] -> {String: *}
            </summary>
            <param name="keys">The array that will be properties on the output object.</param>
            <param name="values">The list of values on the output object.</param>
            <returns>The object made by pairing up same-indexed elements of `keys` and `values`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ZipWith``3(System.Func{``0,``1,``2},System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Creates a new list out of the two supplied by applying the function to eachequally-positioned pair in the lists. The returned list is truncated to thelength of the shorter of the two input lists.
            <para />
            sig: (a,b -> c) -> [a] -> [b] -> [c]
            </summary>
            <param name="fn">The function used to combine the two elements into one value.</param>
            <param name="list1">The first array to consider.</param>
            <param name="list2">The second array to consider.</param>
            <returns>The list made by combining same-indexed elements of `list1` and `list2` using `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ZipWith``2(Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Creates a new list out of the two supplied by applying the function to eachequally-positioned pair in the lists. The returned list is truncated to thelength of the shorter of the two input lists.
            <para />
            sig: (a,b -> c) -> [a] -> [b] -> [c]
            </summary>
            <param name="fn">The function used to combine the two elements into one value.</param>
            <param name="list1">The first array to consider.</param>
            <param name="list2">The second array to consider.</param>
            <returns>The list made by combining same-indexed elements of `list1` and `list2` using `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ZipWith``3(System.Func{``0,``1,``2},Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``1})">
            <summary>
            Creates a new list out of the two supplied by applying the function to eachequally-positioned pair in the lists. The returned list is truncated to thelength of the shorter of the two input lists.
            <para />
            sig: (a,b -> c) -> [a] -> [b] -> [c]
            </summary>
            <param name="fn">The function used to combine the two elements into one value.</param>
            <param name="list1">The first array to consider.</param>
            <param name="list2">The second array to consider.</param>
            <returns>The list made by combining same-indexed elements of `list1` and `list2` using `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ZipWith``3(System.Func{``0,``1,``2},System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new list out of the two supplied by applying the function to eachequally-positioned pair in the lists. The returned list is truncated to thelength of the shorter of the two input lists.
            <para />
            sig: (a,b -> c) -> [a] -> [b] -> [c]
            </summary>
            <param name="fn">The function used to combine the two elements into one value.</param>
            <param name="list1">The first array to consider.</param>
            <param name="list2">The second array to consider.</param>
            <returns>The list made by combining same-indexed elements of `list1` and `list2` using `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ZipWith``3(System.Func{``0,``1,``2},Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new list out of the two supplied by applying the function to eachequally-positioned pair in the lists. The returned list is truncated to thelength of the shorter of the two input lists.
            <para />
            sig: (a,b -> c) -> [a] -> [b] -> [c]
            </summary>
            <param name="fn">The function used to combine the two elements into one value.</param>
            <param name="list1">The first array to consider.</param>
            <param name="list2">The second array to consider.</param>
            <returns>The list made by combining same-indexed elements of `list1` and `list2` using `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ZipWith``1(System.Object,Ramda.NET.RamdaPlaceholder,System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new list out of the two supplied by applying the function to eachequally-positioned pair in the lists. The returned list is truncated to thelength of the shorter of the two input lists.
            <para />
            sig: (a,b -> c) -> [a] -> [b] -> [c]
            </summary>
            <param name="fn">The function used to combine the two elements into one value.</param>
            <param name="list1">The first array to consider.</param>
            <param name="list2">The second array to consider.</param>
            <returns>The list made by combining same-indexed elements of `list1` and `list2` using `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ZipWith``1(System.Object,System.Collections.Generic.IList{``0},Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new list out of the two supplied by applying the function to eachequally-positioned pair in the lists. The returned list is truncated to thelength of the shorter of the two input lists.
            <para />
            sig: (a,b -> c) -> [a] -> [b] -> [c]
            </summary>
            <param name="fn">The function used to combine the two elements into one value.</param>
            <param name="list1">The first array to consider.</param>
            <param name="list2">The second array to consider.</param>
            <returns>The list made by combining same-indexed elements of `list1` and `list2` using `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ZipWith(System.Object,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new list out of the two supplied by applying the function to eachequally-positioned pair in the lists. The returned list is truncated to thelength of the shorter of the two input lists.
            <para />
            sig: (a,b -> c) -> [a] -> [b] -> [c]
            </summary>
            <param name="fn">The function used to combine the two elements into one value.</param>
            <param name="list1">The first array to consider.</param>
            <param name="list2">The second array to consider.</param>
            <returns>The list made by combining same-indexed elements of `list1` and `list2` using `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ZipWith``2(System.Object,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Creates a new list out of the two supplied by applying the function to eachequally-positioned pair in the lists. The returned list is truncated to thelength of the shorter of the two input lists.
            <para />
            sig: (a,b -> c) -> [a] -> [b] -> [c]
            </summary>
            <param name="fn">The function used to combine the two elements into one value.</param>
            <param name="list1">The first array to consider.</param>
            <param name="list2">The second array to consider.</param>
            <returns>The list made by combining same-indexed elements of `list1` and `list2` using `fn`.</returns>
        </member>
        <member name="M:Ramda.NET.R.ZipWith(Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder,Ramda.NET.RamdaPlaceholder)">
            <summary>
            Creates a new list out of the two supplied by applying the function to eachequally-positioned pair in the lists. The returned list is truncated to thelength of the shorter of the two input lists.
            <para />
            sig: (a,b -> c) -> [a] -> [b] -> [c]
            </summary>
            <param name="fn">The function used to combine the two elements into one value.</param>
            <param name="list1">The first array to consider.</param>
            <param name="list2">The second array to consider.</param>
            <returns>The list made by combining same-indexed elements of `list1` and `list2` using `fn`.</returns>
        </member>
        <member name="F:Ramda.NET.R.null">
            <summary>
            Represents a null value. A Replacement for the null keyword.
            </summary>
        </member>
        <member name="F:Ramda.NET.R.__">
            <summary>
             A special placeholder value used to specify "gaps" within curried functions,
             allowing partial application of any combination of arguments, regardless of
             their positions.
            </summary>
        </member>
        <member name="F:Ramda.NET.R.F">
            <summary>
            A function that always returns `true`. Any passed in parameters are ignored.
            <para />
            sig: * -> Boolean
            </summary>
            <returns>Function</returns>
        </member>
        <member name="F:Ramda.NET.R.T">
            <summary>
            A function that always returns `false`. Any passed in parameters are ignored.
            <para />
            sig: * -> Boolean
            </summary>
            <returns>Function</returns>
        </member>
        <member name="T:Ramda.NET.IDispersible`2">
            <summary>
            Provides a contract to interpose a seperator between elements
            </summary>
            <typeparam name="TSeperator">The type of the seperator.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Ramda.NET.IDispersible`2.Intersperse(`0)">
            <summary>
            Intersperses the specified seperator.
            </summary>
            <param name="seperator">The seperator.</param>
            <returns></returns>
        </member>
        <member name="T:Ramda.NET.IListStrategy">
            <summary>
             Provides a unified contract for list or string manipulation
            </summary>
        </member>
        <member name="P:Ramda.NET.IListStrategy.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:Ramda.NET.IListStrategy.Slice(System.Int32,System.Int32)">
            <summary>
            Slices the specified list.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
        </member>
        <member name="P:Ramda.NET.IListStrategy.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Ramda.NET.IListStrategy.GetElementType">
            <summary>
            Gets the type of the element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ramda.NET.IListStrategy.Add(System.Object)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:Ramda.NET.Nothing">
            <summary>
             Equivalent to null
            </summary>
        </member>
        <member name="M:Ramda.NET.Nothing.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ramda.NET.Nothing.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Ramda.NET.Nothing.op_Explicit(Ramda.NET.Nothing)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Ramda.NET.Nothing"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="x">The x.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
    </members>
</doc>
